<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Secure your Kubernetes secrets with smart cards and libssh</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xubRt-0X_o4/" /><category term="Kubernetes" /><category term="Linux" /><category term="Security" /><category term="Windows" /><category term="cryptography" /><category term="hardware token" /><category term="libssh" /><category term="openshift" /><category term="PKCS #11" /><author><name>sahana</name></author><id>https://developers.redhat.com/blog/?p=710157</id><updated>2020-10-28T07:00:27Z</updated><published>2020-10-28T07:00:27Z</published><content type="html">&lt;p&gt;In computer security, software implementations of cryptographic algorithms are vulnerable to &lt;em&gt;side-channel attacks&lt;/em&gt;. This type of attack seeks to glean information from the computer system rather than from the program that it is running. As examples, Spectre and Meltdown are both side-channel attacks that target the microarchitecture of modern processors. Microarchitecture attacks are only a subset of all side-channel attacks. There are many others.&lt;/p&gt; &lt;p&gt;An attacker who is able to access unauthorized regions in memory can discover private or sensitive information, including authentication secrets. A question that naturally follows is, &amp;#8220;Where can I safely store my secrets?&amp;#8221;&lt;/p&gt; &lt;p&gt;One way to protect your &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; secrets is to store them in a hardware token. A hardware token physically separates your secret key from the host machine and the applications that it is running. You can use secret keys stored on smart cards or cryptographic tokens to authenticate to server-side applications.&lt;/p&gt; &lt;p&gt;This article introduces Public Key Cryptography Standard #11 (&lt;a target="_blank" rel="nofollow" href="http://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/os/pkcs11-base-v2.40-os.html"&gt;PKCS #11&lt;/a&gt;), which you can use to uniquely identify objects stored in tokens. I show you how to build and use libssh with support for PKCS #11 and how to use &lt;code&gt;curl&lt;/code&gt; to store and retrieve tokens through the secure shell (SSH) protocol.&lt;/p&gt; &lt;h2&gt;The PKCS #11 interface&lt;/h2&gt; &lt;p&gt;PKCS #11 provides an application programming interface (API) for interacting with devices like smart cards, which store private cryptographic information. Such cryptographic devices are known as &lt;i&gt;tokens&lt;/i&gt;. PKCS #11 uses a uniform resource identifier (URI) to uniquely identify objects stored in tokens. The PKCS #11 URI is defined by the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc7512"&gt;RFC 7512: PKCS #11 URI Scheme&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;pkcs11:&lt;strong&gt;token&lt;/strong&gt;=my-token;&lt;strong&gt;object&lt;/strong&gt;=my-object;&lt;strong&gt;type&lt;/strong&gt;=private?&lt;strong&gt;pin-&lt;/strong&gt;&lt;strong&gt;value&lt;/strong&gt;=1234 &lt;/pre&gt; &lt;p&gt;The URI format is defined as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Every PKCS #11 URI begins with the scheme name, &amp;#8220;&lt;i&gt;pkcs11:&amp;#8221;&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;The scheme name is followed by attribute-value pairs, which are separated by a colon.&lt;/li&gt; &lt;li&gt;The parameter &lt;i&gt;token&lt;/i&gt; represents the name of the device or smart card.&lt;/li&gt; &lt;li&gt;The stored-object name in the token is identified by the parameter &lt;i&gt;object&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;The object itself can be of type private, public, certificate, data, or a secret key.&lt;/li&gt; &lt;li&gt;The parameter &lt;i&gt;pin-value&lt;/i&gt; stores the personal identification number that is required to access the private key.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The token description provides authenticating applications with a logical view of the hardware device storing the cryptographic token.&lt;/p&gt; &lt;h2&gt;Smart card support in libssh&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://api.libssh.org/stable/libssh_tutorial.html"&gt;SSH library, or libssh&lt;/a&gt;, is a library-based implementation of the Secure Shell (SSH) protocol. It supports using PKCS #11 URIs to authenticate users to a remote server. Currently, PKCS #11 URI support is only available in the &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/libssh/libssh-mirror"&gt;libssh main branch&lt;/a&gt; and not in Fedora. The next libssh release (0.9.x) will include PKCS #11 URI support, which will then be available in Fedora.&lt;/p&gt; &lt;h2&gt;Build and use libssh with PKCS #11&lt;/h2&gt; &lt;p&gt;The SSH library uses &lt;a target="_blank" rel="nofollow" href="https://www.openssl.org"&gt;OpenSSL&lt;/a&gt; (Secure Socket Layer) as its cryptographic back end. OpenSSL defines an abstract layer called the &lt;i&gt;engine&lt;/i&gt;, which implements cryptographic primitives. It provides cryptographic functionality, called &lt;i&gt;key-loading&lt;/i&gt;, which we use to load private and public keys from smart cards. The &lt;code&gt;engine_pkcs11&lt;/code&gt; module acts as an interface between the PKCS #11 modules and OpenSSL.&lt;/p&gt; &lt;p&gt;To build and use libssh with support for PKCS #11, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Enable the &lt;code&gt;cmake&lt;/code&gt; option: &lt;code&gt;$ cmake -DWITH_PKCS11_URI=ON&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Build with OpenSSL.&lt;/li&gt; &lt;li&gt;Install and configure &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenSC/libp11"&gt;engine_pkcs11&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Plug-in a working smart card or configure &lt;a target="_blank" rel="nofollow" href="https://www.opendnssec.org/softhsm"&gt;SoftHSM&lt;/a&gt;, a cryptographic store that is accessible through PKCS #11.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The legacy functions in libssh are extended to automatically detect if a provided filename is a file path or a PKCS #11 URI. You can replace the paths to files containing keys and certificates with PKCS #11 URIs. If a PKCS #11 URI is detected, the engine is loaded and initialized. The engine loads the private or public key corresponding to the PKCS #11 URI from the PKCS #11 device.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you wish to authenticate using public keys on your own, follow the steps described in the &amp;#8220;Authentication with public keys&amp;#8221; section of the libssh documentation (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://api.libssh.org/stable/libssh_tutor_authentication.html"&gt;Chapter 2: A deeper insight on authentication&lt;/a&gt;&lt;/i&gt;).&lt;/p&gt; &lt;h2&gt;Public-key authentication with PKCS #11 and libssh&lt;/h2&gt; &lt;p&gt;Here is a minimalistic example of public-key authentication using PKCS #11 URIs:&lt;/p&gt; &lt;pre&gt;int authenticate_pkcs11_URI(ssh_session session) { int rc; char priv_uri[1042] = “pkcs11:token=my-token;object=my-object;type=private?pin-value=1234”; rc = ssh_options_set(session, SSH_OPTIONS_IDENTITY, priv_uri); assert_int_equal(rc, SSH_OK) rc = ssh_userauth_publickey_auto(session, NULL, NULL); if (rc == SSH_AUTH_ERROR) { fprintf(stderr, “Authentication with PKCS #11 URIs failed: %s\n”, ssh_get_error(session)); return SSH_AUTH_ERROR; } return rc; } &lt;/pre&gt; &lt;p&gt;Instead of specifying the path where the private-key file was stored, all you need to do is to set the PKCS #11 URI using &lt;code&gt;SSH_OPTIONS_IDENTITY&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Using PKCS #11 smart cards with curl&lt;/h2&gt; &lt;p&gt;Applications such as &lt;code&gt;curl&lt;/code&gt; use &lt;code&gt;libssh&lt;/code&gt; as the underlying library to communicate through the SSH protocol. In this example, we use &lt;code&gt;curl&lt;/code&gt; to connect to a Secure File Transfer Protocol (SFTP) server:&lt;/p&gt; &lt;pre&gt;curl -kvu root: sftp://localhost –key ‘pkcs11:token=my-token;object=my-object;type=private?pin-value=1234’ — testuser &lt;/pre&gt; &lt;p&gt;We could change the above command to use a PKCS #11 URI to test a SSH &lt;code&gt;testuser&lt;/code&gt;&amp;#8216;s access to localhost. Instead of specifying the path to the private key in the &lt;code&gt;--key&lt;/code&gt; attribute,  we would specify the corresponding PKCS #11 URI.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article has been a brief introduction to using the PKCS #11 standard and libssh to store and access cryptographic private information in hardware tokens such as smart cards. I will leave you with two additional recommendations.&lt;/p&gt; &lt;p&gt;First, provide a specific PKCS #11 URI that matches only a single slot in the engine. If the engine discovers multiple slots that could potentially contain the private keys referenced by the provided PKCS #11 URI, the engine will not attempt to authenticate. Second, if you are using Elliptic Curve Digital Signature Algorithm (ECDSA) for your PKCS #11 URIs, ensure that you import the public keys along with the private keys to the token. Unlike the more commonly used RSA algorithm (named after its creators, Rivest, Shamir, and Adleman), ECDSA public keys cannot be derived from private keys.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#038;title=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" data-a2a-url="https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/" data-a2a-title="Secure your Kubernetes secrets with smart cards and libssh"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/"&gt;Secure your Kubernetes secrets with smart cards and libssh&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xubRt-0X_o4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In computer security, software implementations of cryptographic algorithms are vulnerable to side-channel attacks. This type of attack seeks to glean information from the computer system rather than from the program that it is running. As examples, Spectre and Meltdown are both side-channel attacks that target the microarchitecture of modern processors. Microarchitecture attacks are only a [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/"&gt;Secure your Kubernetes secrets with smart cards and libssh&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">710157</post-id><dc:creator>sahana</dc:creator><dc:date>2020-10-28T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/</feedburner:origLink></entry><entry><title>Using Microsoft SQL Server on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lLrt4cq6IpU/" /><category term=".NET Core" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Linux" /><category term="Mac" /><category term="Windows" /><category term="ASP.NET Core" /><category term="openshift" /><category term="RHEL" /><category term="SQL Server 2019" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=749997</id><updated>2020-10-27T07:00:30Z</updated><published>2020-10-27T07:00:30Z</published><content type="html">&lt;p&gt;In this article, you&amp;#8217;ll learn how to deploy &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/sql-server/what-s-new-in-sql-server-ver15"&gt;Microsoft SQL Server 2019&lt;/a&gt; on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. We’ll then use SQL Server from an &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;ASP.NET Core&lt;/a&gt; application that is also deployed on OpenShift. Next, I&amp;#8217;ll show you how to connect to SQL Server while working on the application from your local development machine. And finally, we’ll connect to the server using &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/azure-data-studio/what-is?view=sql-server-ver15"&gt;Azure Data Studio&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that I am using &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;Red Hat CodeReady Containers&lt;/a&gt; to run &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/welcome/index.html"&gt;OpenShift 4.3&lt;/a&gt; locally on my development machine.&lt;/p&gt; &lt;h2&gt;Deploying Microsoft SQL Server&lt;/h2&gt; &lt;p&gt;To start, log in to your OpenShift cluster using the &lt;code&gt;oc login&lt;/code&gt; command. Create a new project by entering:&lt;/p&gt; &lt;pre&gt;$ oc new-project mssqldemo &lt;/pre&gt; &lt;p&gt;Use the following template to facilitate deploying the &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/containers/mssql/rhel/server/5ba50865f5a0de06555a2ee7"&gt;Red Hat Enterprise Linux (RHEL)-based SQL Server image&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/s2i-dotnetcore-persistent-ex/dotnetcore-3.1-mssql/openshift/mssql2019.json template.template.openshift.io/mssql2019 created $ oc process --parameters mssql2019 NAME DESCRIPTION GENERATOR VALUE NAME The name assigned to all of the frontend objects defined in this template. mssql SA_PASSWORD expression aA1[a-zA-Z0-9]{8} ACCEPT_EULA 'Y' to accept the EULA (https://go.microsoft.com/fwlink/?linkid=857698). MSSQL_PID Set to 'Developer'/'Express'/'Standard'/'Enterprise'/'EnterpriseCore'. Developer VOLUME_CAPACITY Volume space available for data, e.g. 512Mi, 8Gi 512Mi &lt;/pre&gt; &lt;p&gt;For this deployment, you can retain the default parameters. Accept the end-user license agreement (EULA) as follows:&lt;/p&gt; &lt;pre&gt;$ oc new-app --template=mssql2019 -p ACCEPT_EULA=Y --&amp;#62; Deploying template "mssqldemo/mssql2019" to project mssqldemo Microsoft SQL Server 2019 --------- Relational database management system developed by Microsoft. * With parameters: * Name=mssql * Administrator Password=aA1qxWYb8ME # generated * Accept the End-User Licensing Agreement=Y * Product ID or Edition=Developer * Persistent Volume Capacity=512Mi --&amp;#62; Creating resources ... secret "mssql-secret" created service "mssql" created deploymentconfig.apps.openshift.io "mssql" created persistentvolumeclaim "mssql-pvc" created --&amp;#62; Success Application is not exposed. You can expose services to the outside world by executing one or more of the commands below: 'oc expose svc/mssql' Run 'oc status' to view your app. &lt;/pre&gt; &lt;p&gt;In addition to deploying SQL Server in a container, the template creates a secret (&lt;code&gt;mssql-secret&lt;/code&gt;), which stores the administrator password. It also creates a persistent volume claim (&lt;code&gt;mssql-pvc&lt;/code&gt;) for storage. Note that the secret includes the SQL Server service name, which facilitates binding to SQL Server later.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;oc status&lt;/code&gt; command or the OpenShift web console to monitor the deployment&amp;#8217;s progress.&lt;/p&gt; &lt;h2&gt;Using SQL Server from .NET Core on OpenShift&lt;/h2&gt; &lt;p&gt;For this demo, we’ll use the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex"&gt;s2i-dotnetcore-persistent-ex&lt;/a&gt; example application. This is a create, read, update, and delete (CRUD) application. The &lt;code&gt;dotnetcore-3.1-mssql&lt;/code&gt; branch has support for an in-memory, PostgreSQL, or SQL Server back end.&lt;/p&gt; &lt;p&gt;You can configure the application with environment variables to support the back end that you choose. We&amp;#8217;re using the &lt;code&gt;MSSQL_SA_PASSWORD&lt;/code&gt; and &lt;code&gt;MSSQL_SERVICE_NAME&lt;/code&gt; environment variables for SQL Server. Here are the relevant code snippets:&lt;/p&gt; &lt;pre&gt;// Detect that we should use a SQL Server backend: string saPassword = Configuration.GetValue("MSSQL_SA_PASSWORD"); if (saPassword != null) { dbProvider = DbProvider.Mssql; } ... // Determine the connection string: case DbProvider.Mssql: { string server = Configuration["MSSQL_SERVICE_NAME"] ?? "localhost"; string password = Configuration["MSSQL_SA_PASSWORD"]; string user = "sa"; string dbName = "myContacts"; connectionString = $@"Server={server};Database={dbName};User Id={user};Password={password};"; } ... // Configure EF Core to use SQL Server: case DbProvider.Mssql: Logger.LogInformation("Using Mssql database"); services.AddDbContext(options =&amp;#62; options.UseSqlServer(connectionString)); &lt;/pre&gt; &lt;p&gt;The application that we want to deploy requires .NET Core 3.1. Let’s find out whether this version is available on the OpenShift cluster:&lt;/p&gt; &lt;pre&gt;$ oc get is -n openshift dotnet NAME IMAGE REPOSITORY TAGS UPDATED dotnet default-route-openshift-image-registry.apps-crc.testing/openshift/dotnet 3.0,latest,2.2,2.1 2 months ago &lt;/pre&gt; &lt;p&gt;.NET Core 3.1 is not listed, but we can add it by importing the required &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;Universal Base Image (UBI) 8-based images&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;# note: only needed when .NET Core 3.1 is not available $ oc create -f https://raw.githubusercontent.com/redhat-developer/s2i-dotnetcore/master/dotnet_imagestreams_rhel8.json imagestream.image.openshift.io/dotnet created imagestream.image.openshift.io/dotnet-runtime created &lt;/pre&gt; &lt;p&gt;Now, we&amp;#8217;re ready to deploy the application:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet:3.1~https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex#dotnetcore-3.1-mssql --context-dir app --&amp;#62; Found image 45eae59 (28 hours old) in image stream "mssqldemo/dotnet" under tag "3.1" for "dotnet:3.1" .NET Core 3.1 ------------- Platform for building and running .NET Core 3.1 applications Tags: builder, .net, dotnet, dotnetcore, dotnet-31 * A source build using source code from https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex#dotnetcore-3.1-mssql will be created * The resulting image will be pushed to image stream tag "s2i-dotnetcore-persistent-ex:latest" * Use 'start-build' to trigger a new build * This image will be deployed in deployment config "s2i-dotnetcore-persistent-ex" * Port 8080/tcp will be load balanced by service "s2i-dotnetcore-persistent-ex" * Other containers can access this service through the hostname "s2i-dotnetcore-persistent-ex" --&amp;#62; Creating resources ... imagestream.image.openshift.io "s2i-dotnetcore-persistent-ex" created buildconfig.build.openshift.io "s2i-dotnetcore-persistent-ex" created deploymentconfig.apps.openshift.io "s2i-dotnetcore-persistent-ex" created service "s2i-dotnetcore-persistent-ex" created --&amp;#62; Success Build scheduled, use 'oc logs -f bc/s2i-dotnetcore-persistent-ex' to track its progress. Application is not exposed. You can expose services to the outside world by executing one or more of the commands below: 'oc expose svc/s2i-dotnetcore-persistent-ex' Run 'oc status' to view your app. &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;oc status&lt;/code&gt; command or the OpenShift web console to monitor the deployment&amp;#8217;s progress. Once the application is deployed, expose it externally and capture the URL:&lt;/p&gt; &lt;pre&gt;$ oc expose service s2i-dotnetcore-persistent-ex route.route.openshift.io/s2i-dotnetcore-persistent-ex exposed $ oc get route s2i-dotnetcore-persistent-ex NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD s2i-dotnetcore-persistent-ex s2i-dotnetcore-persistent-ex-mssqldemo.apps-crc.testing s2i-dotnetcore-persistent-ex 8080-tcp None &lt;/pre&gt; &lt;p&gt;When browsing to the URL, note that the application is running from an in-memory database.&lt;/p&gt; &lt;h2&gt;Adding contacts&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll add a few contacts, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_750077" style="width: 502px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-750077" class="wp-image-750077 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3.png" alt="A screenshot of the application dialog to add contacts from the in-memory database." width="492" height="185" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3.png 492w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3-300x113.png 300w" sizes="(max-width: 492px) 100vw, 492px" /&gt;&lt;p id="caption-attachment-750077" class="wp-caption-text"&gt;Figure 1: Adding contacts from the application&amp;#8217;s in-memory database.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;code&gt;oc set env&lt;/code&gt; command to configure the application to connect to SQL Server. Then, we&amp;#8217;ll add the data from &lt;code&gt;mssql-secret&lt;/code&gt; to the application&amp;#8217;s deployment configuration:&lt;/p&gt; &lt;pre&gt;$ oc set env --from=secret/mssql-secret dc/s2i-dotnetcore-persistent-ex --prefix=MSSQL_ &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;oc set env&lt;/code&gt; command restarts the application and connects to the Microsoft SQL Server running on OpenShift. Now you can create, remove, and update contacts in the database. Figure 2 shows a list of contacts.&lt;/p&gt; &lt;div id="attachment_750067" style="width: 449px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-750067" class="wp-image-750067 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2.png" alt="A list of contacts in the Microsoft SQL Server database." width="439" height="204" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2.png 439w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2-300x139.png 300w" sizes="(max-width: 439px) 100vw, 439px" /&gt;&lt;p id="caption-attachment-750067" class="wp-caption-text"&gt;Figure 2: Contacts in the Microsoft SQL Server database.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Connecting from a local .NET application&lt;/h2&gt; &lt;p&gt;It is sometimes useful to connect to SQL Server on OpenShift from a .NET application that is running on your development machine. I&amp;#8217;ll show you how to do that next.&lt;/p&gt; &lt;p&gt;First, let’s get the application source code:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex $ cd s2i-dotnetcore-persistent-ex $ git checkout dotnetcore-3.1-mssql $ cd app &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;oc get pod&lt;/code&gt; command to identify the SQL Server pod. Then, enter the &lt;code&gt;oc port-forward&lt;/code&gt; command to expose SQL Server on the local machine:&lt;/p&gt; &lt;pre&gt;$ oc get pod | grep mssql | grep Running mssql-1-288cm 1/1 Running 0 34m $ oc port-forward mssql-1-288cm 1433:1433 Forwarding from 127.0.0.1:1433 -&amp;#62; 1433 Forwarding from [::1]:1433 -&amp;#62; 1433 &lt;/pre&gt; &lt;p&gt;To connect the application to the database, we set the &lt;code&gt;MSSQL_SA_PASSWORD&lt;/code&gt; environment variable. The password was printed when we deployed the SQL database. If you missed it, try doing a Base64-decode from the &lt;code&gt;oc get secret mssql-secret -o yaml&lt;/code&gt; output.&lt;/p&gt; &lt;p&gt;Let’s run the application with the environment variable set:&lt;/p&gt; &lt;pre&gt;$ MSSQL_SA_PASSWORD=aA1qxWYb8ME dotnet run info: RazorPagesContacts.Startup[0] Using Mssql database info: Microsoft.EntityFrameworkCore.Infrastructure[10403] Entity Framework Core 3.1.0 initialized 'MssqlDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None ... info: Microsoft.EntityFrameworkCore.Migrations[20405] No migrations were applied. The database is already up to date. info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0] User profile is available. Using '/home/redhat-developer/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest. Hosting environment: Production Content root path: /tmp/s2i-dotnetcore-persistent-ex/app Now listening on: http://localhost:5000 Now listening on: https://localhost:5001 Application started. Press Ctrl+C to shut down. &lt;/pre&gt; &lt;p&gt;Browse to the localhost web server to display the contacts that you added earlier.&lt;/p&gt; &lt;p&gt;Note that the demo starts the operation from the command line. You can also set the environment variable as part of the IDE debug configuration and launch the application from your IDE.&lt;/p&gt; &lt;h2&gt;Managing SQL Server&lt;/h2&gt; &lt;p&gt;On a Windows desktop, you can manage SQL Server as you always have, with SQL Server Management Studio. On a Linux or Mac desktop, you can use Azure Data Studio. You can find the installation instructions for Azure Data Studio &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To connect to SQL Server, you need to set up port forwarding, as we did in the previous section. Next, you can open Azure Data Studio and add a connection for the &lt;code&gt;localhost&lt;/code&gt; user &lt;code&gt;sa&lt;/code&gt; and the password from the &lt;code&gt;mssql-secret&lt;/code&gt;, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_750047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login.png"&gt;&lt;img aria-describedby="caption-attachment-750047" class="wp-image-750047" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login-300x282.png" alt="The dialog to add a new connection." width="640" height="602" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login-300x282.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login.png 742w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-750047" class="wp-caption-text"&gt;Figure 3: Add a connection and secret for a localhost user.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After connecting, you can perform operations from Azure Data Studio. For example, you could execute an SQL query against the Customer database, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_750037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3.png"&gt;&lt;img aria-describedby="caption-attachment-750037" class="wp-image-750037" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3-300x173.png" alt="The dialog to execute a query against the Customer database." width="640" height="369" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3-300x173.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3.png 748w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-750037" class="wp-caption-text"&gt;Figure 4: Execute an SQL query against the Customer database.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned how to deploy Microsoft SQL Server on Red Hat OpenShift. I showed you how to use SQL Server from an ASP.NET Core application running on OpenShift and a .NET application running on your development machine. You also saw how to use Azure Data Studio to connect to the SQL Server database on OpenShift. You can try this on your development machine with &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;CodeReady Containers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#038;title=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/" data-a2a-title="Using Microsoft SQL Server on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/"&gt;Using Microsoft SQL Server on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lLrt4cq6IpU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, you&amp;#8217;ll learn how to deploy Microsoft SQL Server 2019 on Red Hat OpenShift. We’ll then use SQL Server from an ASP.NET Core application that is also deployed on OpenShift. Next, I&amp;#8217;ll show you how to connect to SQL Server while working on the application from your local development machine. And finally, we’ll [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/"&gt;Using Microsoft SQL Server on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">749997</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-10-27T07:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/C_EQq6DpgXQ/" /><category term="Containers" /><category term="Kubernetes" /><category term="Linux" /><category term="Docker containers" /><category term="Docker Kubernetes" /><category term="Docker OpenShift" /><category term="openshift" /><author><name>Michael Greenberg</name></author><id>https://developers.redhat.com/blog/?p=760987</id><updated>2020-10-26T07:00:48Z</updated><published>2020-10-26T07:00:48Z</published><content type="html">&lt;p&gt;More and more companies are migrating their applications to the &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (RHOCP). This enterprise-grade container platform is secure and comprehensive, based on industry standards including those related to Docker and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. However, due to the tightened security restrictions, containers that run on Docker and Kubernetes might not run successfully on Red Hat OpenShift without modification.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; is a fully managed Red Hat OpenShift service that takes advantage of enterprise-ready scaling and security. It is directly integrated with Kubernetes and provides several models for application deployment. For example, OpenShift can mitigate the risk that processes running in a container might be given escalated privileges on the host machine, due to security vulnerabilities in the container engine. For this reason, containers are run using an &lt;em&gt;arbitrarily assigned user ID&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;In contrast, in Docker and Kubernetes containers are run either as the user specified by the USER directive in the Dockerfile, or as the root user if a USER directive is not specified. Containerized applications designed to run as the root user might not run as expected on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;span id="more-760987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This article reviews the common issues I found when adapting containers from Docker and Kubernetes to run on Red Hat OpenShift. First, I describe potential areas to address so that containers can run on OpenShift securely without mandating a non-restricted &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html"&gt;Security Context Constraint&lt;/a&gt; (SCC). Then, I provide tips on how to create images that can run both on Kubernetes and OpenShift without modification. In addition, I provide techniques for debugging issues with applications that do not run as expected.&lt;/p&gt; &lt;h2&gt;Group ownership and file permission&lt;/h2&gt; &lt;p&gt;Although OpenShift runs containers using an arbitrarily assigned user ID, the group ID must always be set to the root group (0). Therefore, the directories and files that the processes running in the image need to access should have their group ownership set to the root group. They also need to be read/writable by that group as recommended by the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/openshift_images/create-images.html#images-create-guide-openshift_create-images"&gt;OpenShift Container Platform-specific guidelines&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Adding the following to your Dockerfile sets the directory and file permissions to allow users in the root group to access them with the same authorization as the directory and file owner:&lt;/p&gt; &lt;pre&gt;RUN chgrp -R 0 /some/directory &amp;#38;&amp;#38; \ chmod -R g=u /some/directory&lt;/pre&gt; &lt;h2&gt;Runtime user compatibility with Kubernetes&lt;/h2&gt; &lt;p&gt;For this step, I suggest that you set the runtime user for Kubernetes to a &lt;em&gt;non-root&lt;/em&gt; user for backward compatibility. You can perform this action by adding the following to the Dockerfile and then updating the file and directory permissions accordingly:&lt;/p&gt; &lt;pre&gt;USER 1001 RUN chown -R 1001:0 /some/directory&lt;/pre&gt; &lt;p&gt;The result, the specified user is ignored when the image is run on OpenShift because the user is set to an arbitrary ID. In contrast, when the image runs on Kubernetes, many of the OpenShift restrictions take effect as the container is run as a non-root user.&lt;/p&gt; &lt;p&gt;Good work. Runtime user compatibility helps to ensure that a single Dockerfile can be used to create an image that functions correctly, both on OpenShift and on Kubernetes.&lt;/p&gt; &lt;h2&gt;Executable permissions&lt;/h2&gt; &lt;p&gt;When containers run as the root user on Kubernetes, file permissions are ignored. In contrast, when an arbitrary user ID is used on OpenShift, set the permission bit in order to execute files.&lt;/p&gt; &lt;p&gt;For example, you add the following to set the execute permission bits to run for the owner and for the group:&lt;/p&gt; &lt;pre&gt;RUN chmod 775 /some/directory/script&lt;/pre&gt; &lt;h2&gt;Volume mounts&lt;/h2&gt; &lt;p&gt;In OpenShift, volume mounts are owned by user/group root:root and each is assigned the following permissions:&lt;/p&gt; &lt;pre&gt;drwxrwx---&lt;/pre&gt; &lt;p&gt;Note that Linux commands, such as&lt;code&gt; chown(1)&lt;/code&gt;, &lt;code&gt;chgrp(1)&lt;/code&gt;, &lt;code&gt;chmod(1)&lt;/code&gt;, cannot be performed on the volume mount point itself. However, you can create files or directories within the volume mount as the root group with full access permissions.&lt;/p&gt; &lt;h2&gt;Privileged ports&lt;/h2&gt; &lt;p&gt;TCP/IP port numbers below 1024 are privileged port numbers that enable only the root user to bind to these ports. When running a container on OpenShift, server applications need to be assigned port numbers greater than 1023.&lt;/p&gt; &lt;h2&gt;Applications requiring the user&amp;#8217;s name&lt;/h2&gt; &lt;p&gt;Applications sometimes fail on OpenShift when you attempt to look up the username for the currently running user ID. This problem occurs when there is no &lt;code&gt;/etc/passwd&lt;/code&gt; entry for the arbitrarily assigned user ID. A workaround for this issue is to add an &lt;code&gt;/etc/passwd&lt;/code&gt; entry for the arbitrary assigned user ID when the container starts.&lt;/p&gt; &lt;p&gt;For demonstration purposes, in the same directory as your Dockerfile, you need to create a file named, &lt;code&gt;uid_entrypoint&lt;/code&gt;, with the following contents.&lt;/p&gt; &lt;p&gt;Remember to replace &lt;code&gt;myuser&lt;/code&gt; with the name of the user you choose:&lt;/p&gt; &lt;pre&gt;#!/bin/sh if ! whoami &amp;#38;&amp;#62; /dev/null; then if [ -w /etc/passwd ]; then echo "myuser:x:$(id -u):0:My User:${HOME}:/sbin/nologin" &amp;#62;&amp;#62; /etc/passwd fi fi exec "$@"&lt;/pre&gt; &lt;p&gt;Add the following to the Dockerfile, after replacing &lt;code&gt;runcmd&lt;/code&gt; with the main script or program that runs in the container:&lt;/p&gt; &lt;pre&gt;COPY uid_entrypoint / RUN chmod g=u /etc/passwd &amp;#38;&amp;#38; chmod 775 /uid_entrypoint ENTRYPOINT ["uid_entrypoint"] CMD ["runcmd"]&lt;/pre&gt; &lt;p&gt;Note that, when the container starts running, you need to add a password entry for the specified username, if it does not already exist, and then the main process starts.&lt;/p&gt; &lt;h2&gt;Deployments&lt;/h2&gt; &lt;p&gt;Deployments to OpenShift can sometimes fail due to different behaviors between Kubernetes and OpenShift.&lt;/p&gt; &lt;h3&gt;InitContainers won&amp;#8217;t help resolve permission issues&lt;/h3&gt; &lt;p&gt;When you run in Kubernetes, &lt;code&gt;initContainers&lt;/code&gt; are sometimes used to set the permissions of files and directories used by other containers in the pod. This advantage relies on Kubernetes running &lt;code&gt;initContainers&lt;/code&gt; as the root user and running other containers as the user specified in the Docker directive &lt;code&gt;USER&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you run on OpenShift, both &lt;code&gt;initContainers&lt;/code&gt; and regular containers use the OpenShift-assigned user ID. Therefore, the permissions in &lt;code&gt;initContainers&lt;/code&gt; are exactly the same as the permissions in regular containers running in the same pod.&lt;/p&gt; &lt;h3&gt;SecurityContext directives&lt;/h3&gt; &lt;p&gt;Importantly, because OpenShift assigns an arbitrary user ID and a group ID of &lt;code&gt;zero (0)&lt;/code&gt;, SecurityContext directives, such as &lt;code&gt;runAsUser&lt;/code&gt; and &lt;code&gt;runAsGroup&lt;/code&gt;, must not appear in the deployment specifications (or Helm charts) when you run on OpenShift. Enabling SecurityContext directives causes the deployment to fail.&lt;/p&gt; &lt;h3&gt;Avoid the OpenShift project default&lt;/h3&gt; &lt;p&gt;Applications running in the OpenShift project &lt;em&gt;default&lt;/em&gt; receive permissions similar to the permissions used when running on Kubernetes. OpenShift security restrictions are not applied to this project. Therefore, do not use this namespace for testing containers.&lt;/p&gt; &lt;p&gt;In addition, &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html#role-based-access-to-ssc_configuring-internal-oauth"&gt;I recommend that you do not use&lt;/a&gt; the following OpenShift namespaces for running pods or services: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;kube-system&lt;/code&gt;, &lt;code&gt;kube-public&lt;/code&gt;, &lt;code&gt;openshift-node&lt;/code&gt;, &lt;code&gt;openshift-infra&lt;/code&gt;, &lt;code&gt;openshift&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;How to debug issues&lt;/h2&gt; &lt;p&gt;When migrating an image from Docker or Kubernetes to OpenShift, the image might not run out-of-the-box. For this reason, I recommend that you use the following tools and methods when debugging to find the root cause or the error:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Check for errors logged in the system events for the current namespace by running: &lt;pre&gt;$ oc get events -w&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Check for errors in the pod logs by running: &lt;pre&gt;$ oc logs -f &lt;em&gt;&amp;#60;podname&amp;#62;&lt;/em&gt; --all-containers&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Log into a container in the pod to check the file and permissions and other issues using the command: &lt;pre&gt;$ oc rsh &lt;em&gt;&amp;#60;podname&amp;#62;&lt;/em&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;When the container keeps starting and crashing, in the Dockerfile set: &lt;pre&gt;ENTRYPOINT ["sleep", "100000000"]&lt;/pre&gt; &lt;p&gt;Rerun the pod and log in to determine why issues are occurring.&lt;/li&gt; &lt;li&gt;Install the &lt;code&gt;strace(1)&lt;/code&gt; command in the container and trace the system calls of the running program to see which one fails.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned how to review common issues found when adapting containers from Docker and Kubernetes to OpenShift. I&amp;#8217;ve also demonstrated how you can easily resolve these issues and create images that can be run on Docker, Kubernetes, and OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#038;title=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" data-a2a-url="https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/" data-a2a-title="Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/"&gt;Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/C_EQq6DpgXQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;More and more companies are migrating their applications to the Red Hat OpenShift Container Platform (RHOCP). This enterprise-grade container platform is secure and comprehensive, based on industry standards including those related to Docker and Kubernetes. However, due to the tightened security restrictions, containers that run on Docker and Kubernetes might not run successfully on Red [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/"&gt;Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">760987</post-id><dc:creator>Michael Greenberg</dc:creator><dc:date>2020-10-26T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/</feedburner:origLink></entry><entry><title>Use mobile numbers for user authentication in Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gwSgmlh7G8c/" /><category term="Java" /><category term="Linux" /><category term="Security" /><category term="Custom authenticator" /><category term="keycloak" /><category term="Red Hat SSO" /><category term="User authentication" /><author><name>Siddhartha De</name></author><id>https://developers.redhat.com/blog/?p=693617</id><updated>2020-10-23T07:00:59Z</updated><published>2020-10-23T07:00:59Z</published><content type="html">&lt;p&gt;I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is &lt;a href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;Keycloak&lt;/a&gt;, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom authentication executor to meet the requirement.&lt;/p&gt; &lt;p&gt;In this article, I show you how to use Keycloak&amp;#8217;s authentication service provider interface (SPI) to write a custom &lt;code&gt;MobileAuthenticator&lt;/code&gt; class and then instantiate it with an &lt;code&gt;AuthenticationFactory&lt;/code&gt;. I also show you how to package and compile the mobile authentication project using Maven and how to create a custom mobile authentication flow for Keycloak.&lt;/p&gt; &lt;p&gt;&lt;span id="more-693617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article assumes that you are familiar with Keycloak, Maven, and &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; is an open source identity and access management (IAM) tool and is the upstream project for &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost/"&gt;Red Hat Single Sign-On&lt;/a&gt; (Red Hat SSO). Many developers use Keycloak or Red Hat SSO for enterprise security in production environments.&lt;/p&gt; &lt;h2&gt;Creating a custom authenticator with Keycloak&lt;/h2&gt; &lt;p&gt;Keycloak provides an &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#_auth_spi"&gt;authentication service provider interface&lt;/a&gt; (SPI) that we&amp;#8217;ll use to write a new, custom authenticator. As &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#packaging-classes-and-deployment"&gt;described in the Keycloak documentation&lt;/a&gt;, we must do the following when we package the custom authenticator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Package the entire implementation into a single JAR file.&lt;/li&gt; &lt;li&gt;Ensure that the JAR contains a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Locate the &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; file in the &lt;code&gt;META-INF/services/&lt;/code&gt; directory.&lt;/li&gt; &lt;li&gt;Ensure that it lists the fully qualified class name for each &lt;code&gt;AuthenticatorFactory&lt;/code&gt; implementation.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The MobileAuthenticator class&lt;/h2&gt; &lt;p&gt;To start, we&amp;#8217;ll create two classes. The first is &lt;code&gt;MobileAuthenticator.java&lt;/code&gt;, which performs the authentication:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import java.util.List; import javax.ws.rs.core.MultivaluedMap; import org.keycloak.authentication.AuthenticationFlowContext; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordForm; import org.keycloak.events.Errors; import org.keycloak.services.managers.AuthenticationManager; import javax.ws.rs.core.Response; import org.keycloak.authentication.AuthenticationFlowError; import org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator; import org.keycloak.events.Details; import org.keycloak.models.ModelDuplicateException; import org.keycloak.models.UserModel; import org.keycloak.services.messages.Messages; /** * @author sid **/ public class MobileAuthenticator extends UsernamePasswordForm implements Authenticator { @Override public boolean validateUserAndPassword(AuthenticationFlowContext context, MultivaluedMap inputData) { String username = inputData.getFirst(AuthenticationManager.FORM_USERNAME); if (username == null) { context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, Messages.INVALID_USER); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); return false; } // remove leading and trailing whitespace username = username.trim(); context.getEvent().detail(Details.USERNAME, username); context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME, username); UserModel user = null; try { List users = context.getSession().users().searchForUserByUserAttribute("mobile", username, context.getRealm()); System.out.println(users.get(0).getUsername()); if (users != null &amp;#38;&amp;#38; users.size() == 1) { user = users.get(0); } } catch (ModelDuplicateException mde) { if (mde.getDuplicateFieldName() != null &amp;#38;&amp;#38; mde.getDuplicateFieldName().equals(UserModel.EMAIL)) { setDuplicateUserChallenge(context, Errors.EMAIL_IN_USE, Messages.EMAIL_EXISTS, AuthenticationFlowError.INVALID_USER); } else { setDuplicateUserChallenge(context, Errors.USERNAME_IN_USE, Messages.USERNAME_EXISTS, AuthenticationFlowError.INVALID_USER); } return false; } if (invalidUser(context, user)) { return false; } if (!validatePassword(context, user, inputData)) { return false; } if (!enabledUser(context, user)) { return false; } String rememberMe = inputData.getFirst("rememberMe"); boolean remember = rememberMe != null &amp;#38;&amp;#38; rememberMe.equalsIgnoreCase("on"); if (remember) { context.getAuthenticationSession().setAuthNote(Details.REMEMBER_ME, "true"); context.getEvent().detail(Details.REMEMBER_ME, "true"); } else { context.getAuthenticationSession().removeAuthNote(Details.REMEMBER_ME); } context.setUser(user); return true; } }&lt;/pre&gt; &lt;h2&gt;The MobileAuthenticationFactory class&lt;/h2&gt; &lt;p&gt;Next, we create &lt;code&gt;MobileAuthenticationFactory.java&lt;/code&gt;, which instantiates the authenticator:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import org.keycloak.Config; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordFormFactory; import org.keycloak.models.KeycloakSession; /** * @author sid **/ public class MobileAuthenticationFactory extends UsernamePasswordFormFactory { public static final String PROVIDER_ID = "mobile-authenticator"; public static final MobileAuthenticator SINGLETON = new MobileAuthenticator(); @Override public Authenticator create(KeycloakSession session) { return SINGLETON; } @Override public void init(Config.Scope scope) { } @Override public String getId() { return PROVIDER_ID; } @Override public String getDisplayType() { return "Mobile Based User Form"; } @Override public String getHelpText() { return "Validates a mobile and password from login form."; } } &lt;/pre&gt; &lt;h2&gt;Organize and compile the Keycloak custom authenticator&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll use Maven to organize the mobile authentication project and compile our two new classes.&lt;/p&gt; &lt;h3&gt;Set up the project&lt;/h3&gt; &lt;p&gt;Execute the following command to create a project using Maven:&lt;/p&gt; &lt;pre&gt;mvn archetype:generate -DgroupId=com.sid.keycloakauthenticator -DartifactId=keycloak-authenticator -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false &lt;/pre&gt; &lt;p&gt;Place both of the classes that we&amp;#8217;ve just created in the &lt;code&gt;src/main/java/com/sid/keycloakauthenticator&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Now, create a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; at &lt;code&gt;src/main/resources/META-INF/services&lt;/code&gt;. Add an entry for the new &lt;code&gt;AuthenticationFactory&lt;/code&gt;: &lt;code&gt;com.sid.keycloakauthenticator.MobileAuthenticationFactory&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Resolve the project dependencies&lt;/h3&gt; &lt;p&gt;The Keycloak authentication module is a private SPI, so you are required to use the &lt;code&gt;MANIFEST.MF&lt;/code&gt; to resolve dependencies. Make the following entry in the &lt;code&gt;MANIFEST.MF&lt;/code&gt; at the line &lt;code&gt;src/main/resources/META-INF&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;Dependencies: org.keycloak.keycloak-server-spi-private, org.keycloak.keycloak-services, org.keycloak.keycloak-core, org.keycloak.keycloak-server-spi &lt;/pre&gt; &lt;p&gt;You can now edit the Maven &lt;code&gt;pom.xml&lt;/code&gt; to add the following dependencies:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi-private&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.logging&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jboss-logging&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.4.0.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-services&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;h3&gt;Build and deploy the project&lt;/h3&gt; &lt;p&gt;Execute the following command to build the project:&lt;/p&gt; &lt;pre&gt;mvn clean install &lt;/pre&gt; &lt;p&gt;This command generates output in the &lt;code&gt;keycloak-authenticator-1.0-SNAPSHOT.jar&lt;/code&gt; target folder. Keycloak ships bundled with &lt;a target="_blank" rel="nofollow" href="https://www.wildfly.org/"&gt;WildFly&lt;/a&gt;, so you can use the &lt;code&gt;jboss-cli&lt;/code&gt; interface and the following command to deploy the JAR:&lt;/p&gt; &lt;pre&gt;deploy /path/to/keycloak-authenticator-1.0-SNAPSHOT.jar &lt;/pre&gt; &lt;h3&gt;Configure the custom authentication flow&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve successfully deployed the authenticator JAR, you will configure the authentication flow. Here&amp;#8217;s how to configure a custom flow in Keycloak:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in into Keycloak management console, select the realm where you want to configure the custom mobile authenticator, and click on &lt;b&gt;Authentication&lt;/b&gt; in the left-side panel&lt;/li&gt; &lt;li&gt;In the &lt;b&gt;Flow&lt;/b&gt; tab, select &lt;strong&gt;Browser&lt;/strong&gt; from the drop-down list.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy&lt;/strong&gt; button and name the flow; for example, MobileFlow.&lt;/li&gt; &lt;li&gt;Under &lt;strong&gt;MobileFlow Forms&lt;/strong&gt;, click the &lt;b&gt;Actions&lt;/b&gt; hyperlink to add executions.&lt;/li&gt; &lt;li&gt;Save the flow by selecting &lt;strong&gt;Mobile Based User Form&lt;/strong&gt; from the provider list.&lt;/li&gt; &lt;li&gt;Delete the &lt;strong&gt;Username Password Form&lt;/strong&gt; and the &lt;strong&gt;OTP Form&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;That&amp;#8217;s all there is to setting up mobile-based authentication with Keycloak. Note that for the authentication to be successful, you must ensure that every user has a unique mobile number assigned in their attributes.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#038;title=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/" data-a2a-title="Use mobile numbers for user authentication in Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;Use mobile numbers for user authentication in Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gwSgmlh7G8c" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is Keycloak, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;Use mobile numbers for user authentication in Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">693617</post-id><dc:creator>Siddhartha De</dc:creator><dc:date>2020-10-23T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/</feedburner:origLink></entry><entry><title>Red Hat talks and workshops at NodeConf Remote 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WVd6ozNJhTM/" /><category term="Event-Driven" /><category term="JavaScript" /><category term="Kubernetes" /><category term="Node.js" /><category term="Serverless" /><category term="CloudEvents" /><category term="JavaScript Kubernetes" /><category term="NodeConfRemote" /><category term="openshift" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=805307</id><updated>2020-10-23T07:00:34Z</updated><published>2020-10-23T07:00:34Z</published><content type="html">&lt;p&gt;Red Hat is heading to &lt;a target="_blank" rel="nofollow" href="https://www.nodeconfremote.com/"&gt;NodeConf Remote 2020&lt;/a&gt; with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape.&lt;/p&gt; &lt;p&gt;Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and get a look at our latest workflows for building cloud-native &lt;a href="https://developers.redhat.com/topics/javascript"&gt;JavaScript&lt;/a&gt; solutions on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. Our open source experts can show you how to integrate JavaScript and &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; with other technologies like authentication, distributed data caching and streaming, or business automation.&lt;/p&gt; &lt;h2&gt;Talks&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re offering three talks at NodeConf Remote on topics such as &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt; data in &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; environments, the Node.js ecosystem, and lessons from real-world Node.js deployments. Here is more information on each.&lt;/p&gt; &lt;h3&gt;Serverless with a chance of cloud events&lt;/h3&gt; &lt;p&gt;By: Luke Holmquist (&lt;a href="https://twitter.com/sienaluke" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@sienaluke&lt;/a&gt;), Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;In this new world of serverless functions, events and their data are the driving factors in triggering these functions. However, event-driven data can come from anywhere and the problem is that most platforms have their own format for how the data is structured.&lt;/p&gt; &lt;p&gt;The lack of a common way to describe events means that as developers, we constantly have to re-learn how to consume these events. But all hope is not lost. This is where CloudEvents can help.&lt;/p&gt; &lt;p&gt;CloudEvents is a specification from the CNCF for describing event data in a common way to help with cross-service and cross-platform communication. In this talk, we show how to use the CloudEvents Javascript SDK to receive and send properly formatted events.&lt;/p&gt; &lt;h3&gt;Chronicles of the Node.js ecosystem&lt;/h3&gt; &lt;p&gt;By: Bethany Griggs, Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;The sheer vastness of the Node.js module ecosystem poses challenges for consumers, authors, and maintainers. How do consumers know which of the one million modules to rely on for their production deployments? How do module authors handle their hobby projects evolving into a widespread, critical dependency? What happens to abandoned modules? How can a module author test the impact of their changes on dependent applications? Bethany will highlight these problems, and also showcase the work that the Node.js Package Maintenance team is doing to try and help solve these problems.&lt;/p&gt; &lt;h3&gt;Real-world Node.js success stories&lt;/h3&gt; &lt;p&gt;By: Michael Dawson, Node.js lead for Red Hat and IBM&lt;/p&gt; &lt;p&gt;We all know and love to develop with Node.js, but how and where is it delivering real value in the business world? How can we share what we&amp;#8217;ve learned from these deployments? Join Michael to hear about real-world success stories where Node.js is being used at both large and small scale to deliver value and get the job done; what we&amp;#8217;re doing to capture and share some of the lessons learned.&lt;/p&gt; &lt;h2&gt;Workshops&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re also offering a couple of workshops, one on using Node-RED to build AI-infused web applications, and the other digging into building and deploying Node.js applications on Kubernetes.&lt;/p&gt; &lt;h3&gt;Building cloud-native AI-infused web applications with Node-RED&lt;/h3&gt; &lt;p&gt;By: Nick O’Leary, Node-RED Project Lead and John Walicki, IBM Developer Advocate&lt;br /&gt; Wednesday, 4 November, 12:00-13:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;In this workshop, participants will learn how to use Node-RED and TensorFlow to create a photo booth web application infused with AI. The workshop walks through getting started with Node-RED, creating the web application, and then containerizing it so that it is ready to be deployed into the cloud or onto &lt;a href="https://developers.redhat.com/topics/edge-computing"&gt;edge devices&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Kubernetes for JS developers&lt;/h3&gt; &lt;p&gt;By: Joel Lord (&lt;a href="https://twitter.com/joel__lord" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@joel__lord&lt;/a&gt;), OpenShift Developer Advocate, Red Hat&lt;br /&gt; Thursday, 5 November, 14:00 &amp;#8211; 15:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;Learn to build and deploy cloud-native Node.js applications on Kubernetes through a series of hands-on lab examples. By the end of this workshop, you’ll be deploying, scaling, and automating JS-based distributed solutions using containers, Kubernetes, and other popular open source tools for distributed computing.&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Learn more about what Red Hat and IBM are up to on the Node.js front on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Developer &amp;#8211; &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;https://developers.redhat.com/blog/category/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;IBM Developer &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://developer.ibm.com/languages/node-js/"&gt;https://developer.ibm.com/languages/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Nodeshift &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://nodeshift.dev/"&gt;https://nodeshift.dev/ &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Red Hat is a proud sponsor of NodeConf Remote 2020. We hope to see you there virtually!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#038;title=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/" data-a2a-title="Red Hat talks and workshops at NodeConf Remote 2020"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/"&gt;Red Hat talks and workshops at NodeConf Remote 2020&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WVd6ozNJhTM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat is heading to NodeConf Remote 2020 with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape. Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/"&gt;Red Hat talks and workshops at NodeConf Remote 2020&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">805307</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2020-10-23T07:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/</feedburner:origLink></entry><entry><title>This week in JBoss - 23rd October 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/F9dy_Wrvqv8/weekly-2020-10-23.html" /><category term="codeready" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="micrometer" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="mutiny" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><author><name>Paul Robinson</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_23rd_october_2020</id><updated>2020-10-23T00:00:00Z</updated><published>2020-10-23T00:00:00Z</published><content type="html">&lt;article class="" data-tags="news, weekly_update, weekly_editorial, kafka, quarkus, infinispan, keycloak, openshift, micrometer, microprofile, mutiny, codeready"&gt; &lt;h1&gt;This week in JBoss - 23rd October 2020&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_micrometer_is_recommended_for_metrics_with_quarkus_1_9"&gt;Micrometer is recommended for metrics with Quarkus 1.9&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://quarkus.io/blog/micrometer-metrics/"&gt;this post&lt;/a&gt;, Ken explains why the Quarkus team are now reccomending the use of the Micrometer Quarkus extension over the previous Eclipse MicroProfile Metrics extension.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kafka_how_to_fail_gracefully"&gt;Kafka - How to fail gracefully&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Failures are inevitable. There is nothing we can do about that, and that also applies to Kafka applications. Your application may contain a faulty component misbehaving once in a while, or unable to process a specific Kafka record. In &lt;a href="https://quarkus.io/blog/kafka-failure-strategy/"&gt;this post&lt;/a&gt;, Clement explains how to manage these failures.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_use_mobile_numbers_for_user_authentication_in_keycloak"&gt;Use mobile numbers for user authentication in Keycloak&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;this post&lt;/a&gt; Siddhartha De explains how to extend Keycloak to use mobile-based authentication. The post explains the need for mobile-authentication and shows, hands on, how to use the Keycloak service provider interface to create this extension.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_securely_connect_quarkus_and_red_hat_data_grid_on_red_hat_openshift"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Continuing on the theme of security, James Falkner explains (&lt;a href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;here&lt;/a&gt;) how to secure applications deployed on Red Hat OpenShift that use the &lt;a href="https://quarkus.io/guides/infinispan-client"&gt;Quarkus Data Grid Extension&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_creating_a_payments_architecture"&gt;Creating a Payments Architecture&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Eric continues his blog series looking at how Cloud technologies are changing the way we architect and deliver software, in particular how these technologies will apply to the Payment Services industry. This week Eric describes a &lt;a href="https://www.schabell.org/2020/10/payments-architecture-financial-calculations-example.html"&gt;Financial Calculations Example&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_mutiny_how_does_retry_retries"&gt;Mutiny - How does retry…​ retries?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Clement was recently helping a community Quarkus user understand how to retry asynchronous operations with Mutiny. In doing so, he realised it was not all that simple to understand, and so he created &lt;a href="https://quarkus.io/blog/uni-retry/"&gt;this blog post&lt;/a&gt; so that the whole community could benefit from his explanation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_codeready_containers_building_a_cloud_native_human_resources_process"&gt;CodeReady Containers - Building a Cloud-Native Human Resources Process&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://www.schabell.org/2020/10/codeready-containers-building-cloud-native-hr-process.html"&gt;this blog post&lt;/a&gt; Eric talks you through how to install process automation developer tooling into a running Openshift Container platform. You can also refer to one of &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;Eric’s previous posts&lt;/a&gt; for details on how to easily get Openshift Container Platform running on your local machine.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_new_releases"&gt;New Releases&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;a href="https://quarkus.io/"&gt;Quarkus team&lt;/a&gt; have announced the release of &lt;a href="https://quarkus.io/blog/quarkus-1-9-0-final-released/"&gt;Quarkus 1.9&lt;/a&gt; and &lt;a href="https://quarkus.io/blog/intellij-quarkus-tools-1.2.0/"&gt;Quarkus Tools for IntelliJ 1.2.0&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/paul-robinson.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Paul Robinson&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/F9dy_Wrvqv8" height="1" width="1" alt=""/&gt;</content><summary>This week in JBoss - 23rd October 2020 Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects. Micrometer is recommended for metrics with Quarkus 1.9 In this post, Ken explains why the Quarkus team are now reccomending the use of the Micrometer Quarkus extension over the previous Eclipse MicroProfile Metrics extension. Kaf...</summary><dc:creator>Paul Robinson</dc:creator><dc:date>2020-10-23T00:00:00Z</dc:date><feedburner:origLink>https://www.jboss.org/posts/weekly-2020-10-23.html</feedburner:origLink></entry><entry><title>Persistent storage in action: Understanding Red Hat OpenShift’s persistent volume framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TQNL8YO2D0o/" /><category term="Containers" /><category term="DevOps" /><category term="Kubernetes" /><category term="openshift" /><category term="persistent storage" /><category term="persistent volume" /><category term="storage architecture" /><author><name>Bryant Son</name></author><id>https://developers.redhat.com/blog/?p=749197</id><updated>2020-10-22T07:00:05Z</updated><published>2020-10-22T07:00:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; is an enterprise-ready &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; platform that provides a number of different models you can use to deploy an application. &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/openshift-4/"&gt;OpenShift 4.x&lt;/a&gt; uses &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operators&lt;/a&gt; to deploy &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Kubernetes-native&lt;/a&gt; applications. It also supports &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/applications/application_life_cycle_management/odc-working-with-helm-charts-using-developer-perspective.html"&gt;Helm&lt;/a&gt; and traditional template-based deployments. Whatever deployment method you choose, it will be deployed as a wrapper to one or more existing OpenShift resources. Examples include &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/build_openshift_io/buildconfig-build-openshift-io-v1.html"&gt;BuildConfig&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/apps_openshift_io/deploymentconfig-apps-openshift-io-v1.html"&gt;DeploymentConfig&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/image_openshift_io/imagestream-image-openshift-io-v1.html"&gt;ImageStream&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, I introduce you to OpenShift&amp;#8217;s Kubernetes-based persistent volume framework for persistent cluster storage. You will learn how to use OpenShift&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/core/persistentvolume-core-v1.html"&gt;PersistentVolume&lt;/a&gt; (PV) and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/core/persistentvolumeclaim-core-v1.html"&gt;PersistentVolumeClaim&lt;/a&gt; (PVC) objects to provision and request storage resources.&lt;/p&gt; &lt;h2&gt;Defining persistence&lt;/h2&gt; &lt;p&gt;In computer programming, a &lt;em&gt;variable&lt;/em&gt; is a storage address (identified by a memory address) that is paired with an associated symbolic name. Each variable contains a known or unknown quantity of information that represents a value. A variable can temporarily hold a data value, but variables are typically stored only while running in memory, so the data will be lost when the application terminates.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Persistence&lt;/em&gt; occurs when a data value &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://dictionary.englishtest.info/browse/persist"&gt;continues steadfastly or firmly in some state&lt;/a&gt;&amp;#8221; (definition from Dictionary.com). In contrast to values that persist, some applications programmatically access temporary variable values, which prioritize speed over longevity. These temporary values are considered &lt;em&gt;ephemeral&lt;/em&gt; when the data lasts for only a short time.&lt;/p&gt; &lt;p&gt;For example, imagine your favorite game, such as Angry Birds. You would need to use persistent storage if you wanted to save certain game data to reload every time that you played. You might use ephemeral memory to store the programmatic values representing the scores for your current mission.&lt;/p&gt; &lt;h2&gt;Understanding storage architecture&lt;/h2&gt; &lt;p&gt;Now, let&amp;#8217;s discuss the concepts of persistent storage and ephemeral storage in an OpenShift cluster. The first thing to understand is how persistent storage differs from ephemeral storage. OpenShift treats &lt;code&gt;PersistentVolume&lt;/code&gt; and &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; objects as resources: Like OpenShift APIs, you can use YAML or JSON configuration files to manage them.&lt;/p&gt; &lt;p&gt;In Figure 1, the left side of the diagram illustrates an application that is deployed to an OpenShift project namespace without defining persistent storage. In this example, the data is temporarily stored in Pod 1 and Pod 2 using ephemeral storage. The stored data will be lost when the pods are deleted. The right side illustrates an application deployed to an OpenShift namespace with persistent data storage. In this case, an administrator has provisioned persistent storage in the cluster, and a developer has issued a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; to request that storage.&lt;/p&gt; &lt;p&gt;The PVC gives Pod 1 and Pod 2 each a &lt;em&gt;volume reference&lt;/em&gt; to the persistent storage. The data storage will be referenced when you deploy the application using a &lt;code&gt;DeploymentConfig&lt;/code&gt; or &lt;code&gt;Deployment&lt;/code&gt; object, and the data will persist even after one or both of the pods is destroyed.&lt;/p&gt; &lt;div id="attachment_751957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751957" class="wp-image-751957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x576.jpeg" alt="A diagram comparing ephemeral storage and persistent storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751957" class="wp-caption-text"&gt;Figure 1: Comparing persistent storage and ephemeral storage.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Persistent storage types&lt;/h2&gt; &lt;p&gt;As an OpenShift architect, you decide what type of persistent storage to provide to an application&amp;#8217;s developers. The three popular storage types are file storage, block storage, and object storage.&lt;/p&gt; &lt;h3&gt;Network File System&lt;/h3&gt; &lt;p&gt;The most frequently used type of storage in the persistent volume framework is &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/persistent_storage/persistent_storage_nfs.html"&gt;Network File System&lt;/a&gt; (NFS), or simply &lt;em&gt;file storage&lt;/em&gt;. NFS is a traditional network storage type, providing a path to storage connected over a standard ethernet network. It is relatively inexpensive and is able to store compatible data types. For example, you can store media files such as JPEG and MP3, as well as MySQL or MySQL data. As noted in Figure 2, NFS works best for small and simple file storage or databases.&lt;/p&gt; &lt;p&gt;However, NFS is relatively slow and not the best option for complex applications requiring fast operations. Additionally, NFS expands only by scaling out; it does not scale up, which further restricts its performance. &lt;a target="_blank" rel="nofollow" href="https://www.gluster.org/"&gt;GlusterFS&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/provisioners.html#deploying-the-aws-efs-provisioner"&gt;Amazon Web Services Elastic File System&lt;/a&gt; (AWS EFS) are examples of NFS.&lt;/p&gt; &lt;div id="attachment_751947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751947" class="wp-image-751947 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of Network File System." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751947" class="wp-caption-text"&gt;Figure 2: Network File System&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Block storage&lt;/h3&gt; &lt;p&gt;Block storage uses a storage area network (SAN) to deploy and operate on a block of storage spread across a network. SAN-enabled block storage offers faster retrieval and operation times and more efficient operation as compared to NFS. It is ideal for production-quality, structured data for databases such as MySQL and PostgreSQL.&lt;/p&gt; &lt;p&gt;On the downside, block storage is slightly more expensive than NFS, and it has a limited capability for handling metadata. Examples of block storage are &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/persistent_storage/persistent_storage_aws.html"&gt;AWS Elastic Block Store&lt;/a&gt; (AWS EBS), as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_751937" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751937" class="wp-image-751937 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of block storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751937" class="wp-caption-text"&gt;Figure 3: Block storage&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Object storage&lt;/h3&gt; &lt;p&gt;Object storage&amp;#8217;s popularity has grown exponentially due to the demand for efficient transactions on unstructured files such as photos and videos. It is designed with a flat structure, where the files are broken into pieces and spread across the hardware. Object storage uses HTTP to manipulate and retrieve data. It is highly efficient for unstructured files such as media files and static files, and it uses a pay-as-you-go cost model, which makes it affordable and cost-effective.&lt;/p&gt; &lt;p&gt;On the downside, you cannot use object storage with read-write-many data, so it is not suitable for a database. As shown in Figure 4, &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_aws.html"&gt;Amazon Simple Storage Service&lt;/a&gt; (AWS S3) are examples of object storage.&lt;/p&gt; &lt;div id="attachment_751927" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751927" class="wp-image-751927 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of object storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751927" class="wp-caption-text"&gt;Figure 4: Object storage&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/data-storage/file-block-object-storage"&gt;File storage, block storage, or object storage?&lt;/a&gt;&amp;#8221; for a complete introduction to these storage types.&lt;/p&gt; &lt;h2&gt;Demo: Persistent volume storage in a MySQL database&lt;/h2&gt; &lt;p&gt;With those concepts out of the way, it&amp;#8217;s time for a demonstration. In the next sections, I will demonstrate the usefulness of OpenShift&amp;#8217;s persistent volume framework by deploying a MySQL database, first without and then with persistent volume storage.&lt;/p&gt; &lt;p&gt;For this demonstration, I assume the following about your development environment:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You have at least developer access to a standard OpenShift 3 or higher cluster. Ideally, you should have admin access. If you don&amp;#8217;t have admin access, then you can skip Step 1 and use your own namespace instead.&lt;/li&gt; &lt;li&gt;Your &lt;code&gt;ImageStream&lt;/code&gt; is correctly configured with the standard MySQL container image.&lt;/li&gt; &lt;li&gt;You have the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/welcome/index.html"&gt;OpenShift command-line interface&lt;/a&gt; (&lt;code&gt;oc&lt;/code&gt;) installed, and you know how to use it.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Set up the demo&lt;/h2&gt; &lt;p&gt;The first thing we&amp;#8217;ll do is create a new OpenShift project under its own namespace. You can skip this step if you are assigned to a default namespace. You will be able to use your assigned namespace, but you won&amp;#8217;t be able to create a special project for this demo.&lt;/p&gt; &lt;h3&gt;Create the OpenShift project&lt;/h3&gt; &lt;p&gt;Log in to your OpenShift cluster using the OpenShift CLI (&lt;code&gt;oc&lt;/code&gt;) and use the &lt;code&gt;oc new-project&lt;/code&gt; command to create a new project. As shown in Figure 5, I recommend using the name &amp;#8220;&lt;code&gt;pvc-demo&lt;/code&gt;.&amp;#8221;&lt;/p&gt; &lt;div id="attachment_752087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752087" class="wp-image-752087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x152.png" alt="Use the OpenShift 'oc new-project' command to create the pvc-demo project." width="640" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x152.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-768x114.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752087" class="wp-caption-text"&gt;Figure 5: Create a new OpenShift project named pvc-demo.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify your project defaults&lt;/h3&gt; &lt;p&gt;By default, your OpenShift project uses the &lt;code&gt;mysql&lt;/code&gt; &lt;code&gt;ImageStream&lt;/code&gt; in the &lt;code&gt;openshift&lt;/code&gt; namespace. Run the following command to verify the default (also shown in Figure 6):&lt;/p&gt; &lt;pre&gt;oc get is -n openshift | grep mysql&lt;/pre&gt; &lt;p&gt;Then run the following:&lt;/p&gt; &lt;pre&gt;oc get -o yaml is/mysql -n openshift&lt;/pre&gt; &lt;div id="attachment_752097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752097" class="wp-image-752097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x456.png" alt="Be sure that the mySQL ImageStream is checked as the project default in your OpenShift namespace." width="640" height="285" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x456.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-300x133.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-768x342.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752097" class="wp-caption-text"&gt;Figure 6: Verify your OpenShift project defaults.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Deploy a new MySQL application with ImageStream&lt;/h3&gt; &lt;p&gt;Use the OpenShift &lt;code&gt;oc new-app&lt;/code&gt; command to deploy a new MySQL application with &lt;code&gt;ImageStream&lt;/code&gt;. Note that for this phase of the demo, we are configuring MySQL to use ephemeral storage.&lt;/p&gt; &lt;p&gt;At a minimum, you will need to configure the MySQL username, password, and database name using these three &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/using_images/db_images/mysql.html#mysql-environment-variables/"&gt;environment variables&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;oc new-app -i mysql -e MYSQL_USER=tester -e MYSQL_PASSWORD=Pass1234 -e MYSQL_DATABASE=testdb&lt;/pre&gt; &lt;p&gt;You can change the values for your own project, but note that when MySQL is installed, it initially sets &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; as the default database. The MySQL application deployment will fail if any of these environment variables are missing.&lt;/p&gt; &lt;p&gt;When the MySQL application deployment completes, load the environment variables in each pod. Figure 7 shows the MySQL application deployment with &lt;code&gt;ImageStream&lt;/code&gt; and the &lt;code&gt;MYSQL_USER&lt;/code&gt;, &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;, and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; variables.&lt;/p&gt; &lt;div id="attachment_752107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752107" class="wp-image-752107 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x261.png" alt="A new MySQL application deployment with ImageStream using the three required environment variables." width="640" height="163" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x261.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-768x195.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752107" class="wp-caption-text"&gt;Figure 7: Deploy a new MySQL application with ImageStream.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify that the MySQL pod is running&lt;/h3&gt; &lt;p&gt;Before we move on, let&amp;#8217;s check that our MySQL application is running successfully. First, run &lt;code&gt;oc get all&lt;/code&gt; to verify that the pod&amp;#8217;s status is &lt;code&gt;Running&lt;/code&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_752137" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752137" class="wp-image-752137 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x169.png" alt="Run the 'oc get all' command to verify that the pod's status is shown as 'running'." width="640" height="106" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x169.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-768x127.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752137" class="wp-caption-text"&gt;Figure 8: Verify that the MySQL application pod is successfully running.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Another option is to use the OpenShift web console to check the pod&amp;#8217;s status. The pod shown in Figure 9 looks healthy.&lt;/p&gt; &lt;div id="attachment_752147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752147" class="wp-image-752147 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-1024x495.png" alt="Check the MySQL pod's health status in the OpenShift web console." width="640" height="309" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-1024x495.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-768x371.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752147" class="wp-caption-text"&gt;Figure 9: Use the OpenShift web console to check the MySQL pod&amp;#8217;s health status.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you open the terminal inside the web console, you can click the name of the pod to inspect its status, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_752157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752157" class="wp-image-752157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-1024x497.png" alt="Use the web terminal to inspect the pod's status." width="640" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-1024x497.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-768x373.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752157" class="wp-caption-text"&gt;Figure 10: Use the web terminal to inspect the status of the pod.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;From inside the pod, you can click &lt;b&gt;Terminal&lt;/b&gt; to interact directly with the pod, as shown in Figure 11:&lt;/p&gt; &lt;div id="attachment_752167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752167" class="wp-image-752167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-1024x489.png" alt="Accessing the OpenShift terminal and interacting directly from inside the MySQL pod." width="640" height="306" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-1024x489.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-768x366.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752167" class="wp-caption-text"&gt;Figure 11: Use the OpenShift terminal to interact directly with the MySQL pod.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For this demo, we will use the &lt;code&gt;oc&lt;/code&gt; CLI to verify and inspect the pod. You can run the &lt;code&gt;oc printenv | grep MYSQL&lt;/code&gt; command to verify that the environment variables that we specified when we created the pod are shown.&lt;/p&gt; &lt;h2&gt;Step 2: Create the MySQL data with ephemeral storage&lt;/h2&gt; &lt;p&gt;Use &lt;code&gt;oc get pods&lt;/code&gt; to view the pod, then run the shell command inside the pod. Next, enter &lt;code&gt;oc rsh pod&lt;/code&gt; and replace the &lt;code&gt;POD_NAME&lt;/code&gt; variable with the name of the pod that you want to interact with:&lt;/p&gt; &lt;pre&gt;oc rsh pod/POD_NAME &lt;/pre&gt; &lt;p&gt;Once you are inside the pod, use &lt;code&gt;printenv | grep&lt;/code&gt; to verify that the environment variable values are correctly populated, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_752177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752177" class="wp-image-752177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-1024x206.png" alt="Run the 'oc rsh' command to interact with the pod, and verify the emvironment variables." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-1024x206.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-768x155.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752177" class="wp-caption-text"&gt;Figure 12: Run &lt;code&gt;oc rsh&lt;/code&gt; to interact with the pod, and verify the environment variables.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create sample MySQL queries&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll create a file with sample MySQL queries, which will populate the MySQL data for the demo. As shown in Figure 13, I created a sample SQL query file named &lt;code&gt;sample_query.sql&lt;/code&gt; and saved it in my VI text editor.&lt;/p&gt; &lt;div id="attachment_752177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752177" class="wp-image-752177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/9-1024x230.png" alt="Create a file with sample MySQL queries to populate the data." width="640" height="129" /&gt;&lt;p id="caption-attachment-752177" class="wp-caption-text"&gt;Figure 13: Create a file with sample MySQL queries to populate the data.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 14 shows the sample SQL queries that I will use for this demo. If you are already familiar with MySQL, feel free to change the queries; just note that your database name must match what you defined with the &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; variable.&lt;/p&gt; &lt;div id="attachment_752207" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752207" class="wp-image-752207 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-1024x328.png" alt="Using sample SQL queries saved in /var/lib/mysql." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-768x246.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752207" class="wp-caption-text"&gt;Figure 14: Using sample SQL queries saved in &lt;code&gt;/var/lib/mysql&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Be sure to save this content into a separate text editor; you will need it later in the article when you reiterate the steps of deleting a pod and re-creating your MySQL data. Also, note that by default, MySQL saves the data into a path called &lt;code&gt;/var/lib/mysql&lt;/code&gt;. We&amp;#8217;ll use this path as the reference for our &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; when we redeploy the application later.&lt;/p&gt; &lt;h3&gt;Run the MySQL queries&lt;/h3&gt; &lt;p&gt;Use the following command to log in to MySQL:&lt;/p&gt; &lt;pre&gt;mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$HOSTNAME $MYSQL_DATABASE &lt;/pre&gt; &lt;p&gt;With the exception of &lt;code&gt;$HOSTNAME&lt;/code&gt;, the properties starting with the &lt;code&gt;$&lt;/code&gt; symbol refer to the environment variables that you specified when you deployed the sample application using the OpenShift CLI &lt;code&gt;oc new-app&lt;/code&gt; command. The &lt;code&gt;$HOSTNAME&lt;/code&gt; environment variable refers to the MySQL hostname.&lt;/p&gt; &lt;p&gt;As shown in Figure 15, execute the MySQL &lt;code&gt;source&lt;/code&gt; command to run your MySQL queries from the sample SQL file that you&amp;#8217;ve just created:&lt;/p&gt; &lt;pre&gt;source sample_queries.sql&lt;/pre&gt; &lt;div id="attachment_752217" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752217" class="wp-image-752217 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-1024x347.png" alt="Execute the MySQL source command to run MySQL queries from the sample file." width="640" height="217" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-1024x347.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-300x102.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-768x260.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752217" class="wp-caption-text"&gt;Figure 15: Execute the MySQL &lt;code&gt;source&lt;/code&gt; command to run MySQL queries from the sample file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, run the MySQL &lt;code&gt;show databases&lt;/code&gt; command to verify that each MySQL database was successfully created. Use the &lt;code&gt;use testdb&lt;/code&gt; command to check for the existence of the data and then validate it, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_752227" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752227" class="wp-image-752227 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-1024x424.png" alt="Run the MySQL 'show databases' command to verify that each MySQL database was successfully created." width="640" height="265" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-1024x424.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-768x318.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752227" class="wp-caption-text"&gt;Figure 16: Check that your MySQL databases were successfully created.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Delete the pod&lt;/h3&gt; &lt;p&gt;Now, we&amp;#8217;ll delete the pod and see what happens to the data stored using ephemeral data storage. To exit from the pod, type &lt;code&gt;exit&lt;/code&gt; twice. Then, re-enter the pod and use the OpenShift CLI &lt;code&gt;oc delete pod POD_NAME&lt;/code&gt; command, as shown in Figure 17.&lt;/p&gt; &lt;div id="attachment_752237" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752237" class="wp-image-752237 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-1024x146.png" alt="Use the 'oc delete pod POD_NAME' command to delete the pod." width="640" height="91" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-1024x146.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-300x43.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-768x110.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752237" class="wp-caption-text"&gt;Figure 17: Use the &lt;code&gt;oc delete pod POD_NAME&lt;/code&gt; command to delete the pod.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We used a &lt;code&gt;DeploymentConfig&lt;/code&gt; with &lt;code&gt;ReplicaSet&lt;/code&gt;, so a new instance spins up to replace the one that we&amp;#8217;ve just deleted. Wait a short time, then execute the OpenShift &lt;code&gt;oc get pods&lt;/code&gt; command. You should see that a new pod is running. Connect to the new pod with the &lt;code&gt;oc rsh&lt;/code&gt; command. For my example, the command is &lt;code&gt;oc rsh pod/mysql pnpq4&lt;/code&gt;. When you log in to MySQL, check for the created database table. Unfortunately, the table is empty, as shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_752247" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752247" class="wp-image-752247 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-1024x453.png" alt="The created database table is empty." width="640" height="283" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-1024x453.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-300x133.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-768x340.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752247" class="wp-caption-text"&gt;Figure 18: Check for the created database table, which is empty.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Because we configured the pod to use ephemeral storage, we&amp;#8217;ve lost all of our data.&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll deploy the application with a persistent volume claim (PVC).&lt;/p&gt; &lt;h2&gt;Step 3: Create a MySQL application with persistent volume storage&lt;/h2&gt; &lt;p&gt;As I explained at the beginning of this article, we can use a YAML file to define a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; (PVC) for our MySQL application. To start, create a new file named &lt;code&gt;sample-pvc.yaml&lt;/code&gt;, as shown in Figure 19. (You can name the file whatever you want, as long as the file extension is the same.)&lt;/p&gt; &lt;div id="attachment_752267" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752267" class="wp-image-752267 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-1024x222.png" alt="Creating a YAML file to define the PVC for the MySQL application." width="640" height="139" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-1024x222.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-768x167.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752267" class="wp-caption-text"&gt;Figure 19: Create a YAML file to define the PVC for the MySQL application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, run the following to create the PVC:&lt;/p&gt; &lt;pre&gt;oc apply -f sample-pvc.yaml &lt;/pre&gt; &lt;p&gt;Enter the &lt;code&gt;oc get pvc&lt;/code&gt; command to verify that you&amp;#8217;ve just created a PVC definition, as shown in Figure 20.&lt;/p&gt; &lt;div id="attachment_752277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752277" class="wp-image-752277 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-1024x95.png" alt="Execute 'oc get pvc' to verify that you created a PVC definition." width="640" height="59" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-1024x95.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-768x71.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752277" class="wp-caption-text"&gt;Figure 20: Execute the &lt;code&gt;oc get pvc&lt;/code&gt; command to verify that you created a PVC definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We will use this new persistent volume claim soon to modify the MySQL application&amp;#8217;s &lt;code&gt;DeploymentConfig&lt;/code&gt;. But first, let&amp;#8217;s make a slight improvement to the application.&lt;/p&gt; &lt;h3&gt;Create an OpenShift Secret&lt;/h3&gt; &lt;p&gt;You might remember that when we created the MySQL application, we defined the core environment variables (&lt;code&gt;MYSQL_USER&lt;/code&gt;, &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;, and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt;) in a plain text file. Storing secret or sensitive data as plain text values is a security risk, so let&amp;#8217;s fix that now.&lt;/p&gt; &lt;p&gt;As an alternative to plain text, we can use &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/dev_guide/secrets.html"&gt;OpenShift secrets&lt;/a&gt; to store our MySQL environment values. Secrets use &lt;a target="_blank" rel="nofollow" href="https://www.base64decode.org/"&gt;Base64&lt;/a&gt;, which is a highly secure form of encryption.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Another option would be to store the MySQL values using an optimally secure solution such as &lt;a target="_blank" rel="nofollow" href="https://www.vaultproject.io/"&gt;Vault&lt;/a&gt;. I won&amp;#8217;t describe that option in this article.&lt;/p&gt; &lt;p&gt;The first step to storing the MySQL environment values in a secret is to create a new file with key-value pairs. Then, use the following command to create an OpenShift secret to store the MySQL credential data on the file containing key-value pairs:&lt;/p&gt; &lt;pre&gt;oc create secret generic mysql-sec --from-env-file=mysql-cred.env &lt;/pre&gt; &lt;p&gt;Note that in my example, &lt;code&gt;mysql-sec&lt;/code&gt; is the OpenShift secret name and &lt;code&gt;mysql-cred.env&lt;/code&gt; is the file that contains the MySQL key-value pairs.&lt;/p&gt; &lt;p&gt;Run the &lt;code&gt;oc get secret&lt;/code&gt; and &lt;code&gt;oc get -o yaml secret/mysql-sec&lt;/code&gt; commands to verify that the OpenShift secret was successfully created, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_752297" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752297" class="wp-image-752297 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-1024x521.png" alt="Run the 'oc get secret' and 'oc get -o yaml secret/mysql-sec' commands." width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-768x391.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752297" class="wp-caption-text"&gt;Figure 21: Store encrypted environment values in an OpenShift secret and ensure that it is created.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Modify the DeploymentConfig&lt;/h3&gt; &lt;p&gt;Now that we&amp;#8217;ve added a secret, we are ready to redeploy the MySQL application with persistent volume storage. One way to redeploy the MySQL application is to modify the application&amp;#8217;s &lt;code&gt;DeploymentConfig&lt;/code&gt; file. Be aware, however, that the &lt;code&gt;DeploymentConfig&lt;/code&gt; file requires a specific format. An easier option is to use the OpenShift CLI&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/cli_reference/basic_cli_operations.html#patch"&gt;oc patch&lt;/a&gt; command.&lt;/p&gt; &lt;p&gt;Start by running the &lt;code&gt;oc get dc&lt;/code&gt; and &lt;code&gt;oc edit dc/mysql&lt;/code&gt; commands, as shown in Figure 22.&lt;/p&gt; &lt;div id="attachment_752307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752307" class="wp-image-752307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-1024x233.png" alt="Use the 'oc get dc' and 'oc edit dc/mysql' commands to redeploy the DeploymentConfig file." width="640" height="146" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-1024x233.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-768x175.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752307" class="wp-caption-text"&gt;Figure 22: Use the &lt;code&gt;oc get dc&lt;/code&gt; and &lt;code&gt;oc edit dc/mysql&lt;/code&gt; commands to redeploy the &lt;code&gt;DeploymentConfig&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, replace the direct reference to MySQL&amp;#8217;s environment variable values (under &lt;code&gt;spec.template.spec.containers.env&lt;/code&gt;) with the new secret. Update the value to &lt;code&gt;valueFrom&lt;/code&gt; and use the new &lt;code&gt;secretKeyRef&lt;/code&gt;, as shown in Figure 23. (See the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/dev_guide/secrets.html"&gt;OpenShift secrets&lt;/a&gt; documentation for further reference.)&lt;/p&gt; &lt;div id="attachment_752317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752317" class="wp-image-752317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-1024x411.png" alt="Replace the reference to MySQL environment variables with the new OpenShift secret." width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-1024x411.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-768x308.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752317" class="wp-caption-text"&gt;Figure 23: Replace the reference to MySQL environment variables with the new OpenShift secret.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Implement the persistent volume claim&lt;/h3&gt; &lt;p&gt;Finally, we&amp;#8217;ve come to our glorious moment: We will make two changes to implement our persistent volume claim.&lt;/p&gt; &lt;p&gt;First, under &lt;code&gt;spec.template.spec.containers&lt;/code&gt;, add a new line after &lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt;. Enter &lt;code&gt;volumes:&lt;/code&gt; and a reference to the persistent volume claim, for instance &lt;code&gt;mysql-volume&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Next, introduce a new line after &lt;code&gt;terminationMessagePolicy&lt;/code&gt;. Enter &lt;code&gt;volumeMounts:&lt;/code&gt; and add a &lt;code&gt;mountPath&lt;/code&gt; with the value set to &lt;code&gt;/var/lib/mysql&lt;/code&gt;. Enter &lt;code&gt;mysql-volume&lt;/code&gt;, which is the volume name that you created in the previous step.&lt;/p&gt; &lt;p&gt;Figure 24 shows these updates. Note that &lt;code&gt;/var/lib/mysql&lt;/code&gt; is the default path that MySQL uses to store its SQL data.&lt;/p&gt; &lt;div id="attachment_752327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752327" class="wp-image-752327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-1024x739.png" alt="Configure volumes for the PVC and volume mounts." width="640" height="462" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-1024x739.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-300x217.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-768x554.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752327" class="wp-caption-text"&gt;Figure 24: Implement the PVC by configuring volumes for the PVC and volume mounts.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the pod&lt;/h3&gt; &lt;p&gt;Once the new pod is running, run &lt;code&gt;get pods&lt;/code&gt; to see the new pod in its running state.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;rsh pod/POD_NAME&lt;/code&gt; command again to &lt;code&gt;ssh&lt;/code&gt; into the pod, then enter &lt;code&gt;printenv | grep MYSQL&lt;/code&gt;. As shown in Figure 25, you should see that the environment variables were successfully picked up from the secret.&lt;/p&gt; &lt;div id="attachment_752347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752347" class="wp-image-752347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-1024x594.png" alt="Check that the environment values from the OpenShift secret were successfully stored." width="640" height="371" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-1024x594.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-768x445.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752347" class="wp-caption-text"&gt;Figure 25: On the new pod, check that the environment values from the OpenShift secret are successfully stored.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create and populate a sample MySQL file&lt;/h3&gt; &lt;p&gt;Now, repeat the sequence from Step 2 to create the sample MySQL file again, as shown in Figure 26.&lt;/p&gt; &lt;div id="attachment_752357" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752357" class="wp-image-752357 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-1024x372.png" alt="Create and populate a second sample MySQL file." width="640" height="233" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-1024x372.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-300x109.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-768x279.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752357" class="wp-caption-text"&gt;Figure 26: Create and populate a new sample MySQL file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Log in to the MySQL application and repeat the process for recreating the MySQL data with the &lt;code&gt;source&lt;/code&gt; command. This time, because we have persistent data storage, we won&amp;#8217;t lose the data.&lt;/p&gt; &lt;div id="attachment_752367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752367" class="wp-image-752367 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-1024x615.png" alt="Recreate the MySQL data with persistent data storage." width="640" height="384" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-1024x615.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-300x180.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-768x461.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752367" class="wp-caption-text"&gt;Figure 27: On the MySQL application, recreate the MySQL data with persistent data storage.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify the MySQL queries&lt;/h3&gt; &lt;p&gt;In the MySQL shell, use the &lt;code&gt;show databases&lt;/code&gt;, &lt;code&gt;show tables&lt;/code&gt;, and &lt;code&gt;SELECT&lt;/code&gt; commands to verify that the MySQL queries work. As shown in Figure 28, you should see that MySQL data was successfully recreated.&lt;/p&gt; &lt;div id="attachment_752377" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752377" class="wp-image-752377 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-1024x616.png" alt="Verify that the MySQL queries work and the data exists." width="640" height="385" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-1024x616.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-300x181.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-768x462.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752377" class="wp-caption-text"&gt;Figure 28: Verify that the MySQL queries work, and the data exists.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Test your application&amp;#8217;s data persistence&lt;/h2&gt; &lt;p&gt;With the persistent volume for storage, we should be assured that our data is secure. To test the application&amp;#8217;s data persistence, exit from the pod and delete it, as shown in Figure 29.&lt;/p&gt; &lt;div id="attachment_752387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752387" class="wp-image-752387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-1024x154.png" alt="Exit the pod and delete it." width="640" height="96" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-1024x154.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-300x45.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-768x115.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752387" class="wp-caption-text"&gt;Figure 29: Exit the pod and delete it.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When you reconnect to the new pod and check the MySQL database, verify that the data is still there. As shown in Figure 30, you should see that the MySQL data persists, even after we&amp;#8217;ve deleted the pod.&lt;/p&gt; &lt;div id="attachment_752397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752397" class="wp-image-752397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-1024x640.png" alt="Verify once more that the MySQL data persists, even after the pod was deleted." width="640" height="400" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-1024x640.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-300x188.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-768x480.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752397" class="wp-caption-text"&gt;Figure 30: Verify that the MySQL data persists, even after the pod was deleted.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned the basics of persistent storage and the different storage types that you can use. You also saw a demonstration of OpenShift&amp;#8217;s persistent volume storage in action.&lt;/p&gt; &lt;p&gt;I hope that this article has helped you to understand OpenShift&amp;#8217;s persistent volume storage framework and how to use &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; objects for persistent storage in your OpenShift clusters. Please leave a comment if you have questions about the demonstration in this article.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#038;title=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" data-a2a-url="https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/" data-a2a-title="Persistent storage in action: Understanding Red Hat OpenShift’s persistent volume framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/"&gt;Persistent storage in action: Understanding Red Hat OpenShift&amp;#8217;s persistent volume framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TQNL8YO2D0o" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat OpenShift is an enterprise-ready Kubernetes platform that provides a number of different models you can use to deploy an application. OpenShift 4.x uses Operators to deploy Kubernetes-native applications. It also supports Helm and traditional template-based deployments. Whatever deployment method you choose, it will be deployed as a wrapper to one or more existing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/"&gt;Persistent storage in action: Understanding Red Hat OpenShift&amp;#8217;s persistent volume framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">749197</post-id><dc:creator>Bryant Son</dc:creator><dc:date>2020-10-22T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/</feedburner:origLink></entry><entry><title>CodeReady Containers - Building a Cloud-Native Human Resources Process</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0LhLJmGLaLU/codeready-containers-building-cloud-native-hr-process.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_building_a_cloud_native_human_resources_process</id><updated>2020-10-26T11:14:01Z</updated><published>2020-10-21T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-J_MqhyqHCZ0/X5FqBLUR58I/AAAAAAAAxmI/F0e1koyMKpgCmWRNRv2P5Gxdru54yw82QCNcBGAsYHQ/s2048/kira-auf-der-heide-8mj-o2H5PKE-unsplash.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="human resources process" border="0" data-original-height="1365" data-original-width="2048" height="213" src="https://1.bp.blogspot.com/-J_MqhyqHCZ0/X5FqBLUR58I/AAAAAAAAxmI/F0e1koyMKpgCmWRNRv2P5Gxdru54yw82QCNcBGAsYHQ/w320-h213/kira-auf-der-heide-8mj-o2H5PKE-unsplash.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As a cloud-native developer you've &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt; development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;This article targets getting you started on your new &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt; by putting the latest process automation developer tooling at your disposal together with a real project for you to deploy and explore.&amp;nbsp; Even better, if you need more help getting started, we'll provide a free online workshop where you can build this project yourself.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;This articles outlines getting started with the&amp;nbsp;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/3893483255214616703#"&gt;HR Employee Rewards project&lt;/a&gt;&amp;nbsp;on the above installation as default, though you can point this installation to any existing OpenShift Container Platform (pass an IP address). Let's get started right now exploring the new developer tooling for process design, user tasks, forms, rules, and business logic in just a few simple steps.&lt;/div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;Process automation developer tooling&lt;/h3&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/s2048/crc-rhpam-architecture.png" style="clear: right; color: #4d469c; float: right; margin-bottom: 1em; margin-left: 1em; text-decoration-line: none;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1152" data-original-width="2048" height="180" src="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/w320-h180/crc-rhpam-architecture.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This is how it's going to work, first we're installing the &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;Red Hat Process Automation Manager on an OpenShift Container Platform&lt;/a&gt; using the latest provided container catalog image. Next, we're using that tooling API to import the HR employee rewards project.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This means upon logging in, you'll find a project ready to go and it delivers on the promise of a fully functioning developer process automation tooling containerized on your OpenShift Container Platform.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 data-sourcepos="1:1-3:130" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;Install on CodeReady Containers&lt;/h3&gt;&lt;div&gt;&lt;div&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster.&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-67tQkyyK36I/X5Fo0Ht0XoI/AAAAAAAAxl8/do3z_epdZNM5XUbxEdvPR3joz0D8NyjeACNcBGAsYHQ/s1545/process-designer-ocp.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="rewards process" border="0" data-original-height="777" data-original-width="1545" height="161" src="https://1.bp.blogspot.com/-67tQkyyK36I/X5Fo0Ht0XoI/AAAAAAAAxl8/do3z_epdZNM5XUbxEdvPR3joz0D8NyjeACNcBGAsYHQ/w320-h161/process-designer-ocp.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ol data-sourcepos="15:1-16:0" dir="auto"&gt;&lt;li data-sourcepos="15:1-16:0"&gt;Ensure you have a CodeReady Containers installation:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="17:3-21:0" dir="auto"&gt;&lt;li data-sourcepos="17:3-18:0"&gt;&lt;p data-sourcepos="17:5-17:137"&gt;your own Code Ready Containers installation, if using this you just need to set the variables to point to it in init.{sh|bat} script.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="19:3-21:0"&gt;&lt;p data-sourcepos="19:5-19:94"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="22:1-25:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="22:1-23:0"&gt;&lt;p data-sourcepos="22:4-22:136"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rewards-demo/-/archive/master/rhcs-rewards-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="24:1-25:0"&gt;&lt;p data-sourcepos="24:4-24:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges:&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext" v-pre="true"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address to HOST_IP variable found at the top of the init.{sh|bat} files:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without any arguments and it uses the hostname:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-sourcepos="37:1-37:151" dir="auto"&gt;Log in to the HR Employee Rewards project to start exploring an online employee rewards application (the address will be generated by the init script):&lt;/p&gt;&lt;ul data-sourcepos="39:3-40:0" dir="auto"&gt;&lt;li data-sourcepos="39:3-40:0"&gt;CodeReady Container example: &lt;a href="https://rhcs-rewards-demo-appdev-in-cloud.apps-crc.testing" rel="nofollow noreferrer noopener" target="_blank"&gt;https://rhcs-rewards-demo-appdev-in-cloud.apps-crc.testing&lt;/a&gt; ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;p data-sourcepos="41:1-41:156" dir="auto"&gt;Want to build the Rewards demo from scratch? Try this hands-on &lt;a href="https://bpmworkshop.gitlab.io/rhpam-rewards-workshop" rel="nofollow noreferrer noopener" target="_blank"&gt;online workshop&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/993ZpP28jA0" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0LhLJmGLaLU" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you've installed an OpenShift Container Platform development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-21T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/993ZpP28jA0/codeready-containers-building-cloud-native-hr-process.html</feedburner:origLink></entry><entry><title>Get started with Node.js 14 on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BgdS-YXKE4o/" /><category term="JavaScript" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Node.js" /><category term="node.js 14" /><category term="nullish coalescing" /><category term="openshift" /><category term="optional chaining" /><category term="V8 JavaScript" /><author><name>Alexandros Alykiotis</name></author><id>https://developers.redhat.com/blog/?p=785577</id><updated>2020-10-20T07:00:01Z</updated><published>2020-10-20T07:00:01Z</published><content type="html">&lt;p&gt;In April, the Node.js development team released &lt;a href="https://nodejs.org/en/blog/release/v14.0.0/"&gt;Node.js 14&lt;/a&gt;. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020.&lt;/p&gt; &lt;p&gt;&lt;img class="alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/New_OpenShift_Featured_Image-300x168.png" alt="The Red Hat OpenShift logo." width="271" height="152" /&gt;&lt;/p&gt; &lt;p&gt;Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I&amp;#8217;ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you how to deploy Node.js 14 on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. See the end of the article for a list of resources for learning more about improvements and new features in Node.js 14.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; team creates and maintains Source-to-Image (S2I) container images for Node.js. They have released an S2I image for Node.js 14.&lt;/p&gt; &lt;h2&gt;Optional chaining in Node.js 14&lt;/h2&gt; &lt;p&gt;JavaScript&amp;#8217;s optional chaining operator (&lt;code&gt;?.&lt;/code&gt;) lets you read the value of a property located deep within a chain of connected objects. With this feature, you do not need to validate each reference in the chain explicitly. Here&amp;#8217;s an example of optional chaining in Node.js 14:&lt;/p&gt; &lt;pre&gt;const adventurer = { name: 'Alice', cat: { name: 'Dinah' } }; console.log(adventurer.dog?.name); // undefined (no error) &lt;/pre&gt; &lt;p&gt;In previous Node.js versions, we might have used the logical AND (&lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt;) operator to work around this issue, like this:&lt;/p&gt; &lt;pre&gt;console.log(adventurer.dog &amp;#38;&amp;#38; adventurer.dog.name); &lt;/pre&gt; &lt;p&gt;If the operand on the left side of the &lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt; operator is invalid, then the operand on the right will not be evaluated. Eventually, JavaScript will return an &lt;em&gt;undefined&lt;/em&gt; instead of an error.&lt;/p&gt; &lt;h2&gt;The nullish coalescing operator&lt;/h2&gt; &lt;p&gt;Nullish coalescing (&lt;code&gt;??&lt;/code&gt;) is a logical operator that returns the operand on its right when the operand on its left is null or undefined. Otherwise, it returns its left-hand-side operand:&lt;/p&gt; &lt;pre&gt;null ?? "n/a" // "n/a" undefined ?? "n/a" // "n/a" false ?? true // false 0 ?? 100 // 0 "" ?? "n/a" // "" NaN ?? 0 // NaN &lt;/pre&gt; &lt;p&gt;All of the operands shown in this code snippet are &lt;em&gt;falsy&lt;/em&gt; values, meaning that they evaluate to false when forced into a boolean value. If we had used the more familiar logical OR operator (&lt;code&gt;||&lt;/code&gt;), the evaluation of the previous expressions would be different:&lt;/p&gt; &lt;pre&gt;false || true // true 0 || 100 // 100 "" || "n/a" // "n/a" NaN || 0 // 0 &lt;/pre&gt; &lt;p&gt;When providing a fallback value for a nullable value, we recommend using &lt;code&gt;??&lt;/code&gt; rather than &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Two ways to deploy Node.js 14 on OpenShift&lt;/h2&gt; &lt;p&gt;If you are familiar with the process of using an S2I image, you already know what to do. This discussion is for developers who are new to using S2I images.&lt;/p&gt; &lt;p&gt;There are at least two ways to quickly deploy an application using the new Node.js 14 image. One option is to use the &lt;code&gt;oc new-app command&lt;/code&gt; with a Git repo:&lt;/p&gt; &lt;pre&gt;oc new-app registry.access.redhat.com/rhel8-beta/nodejs-14:latest~https://github.com/nodeshift-starters/nodejs-rest-http oc expose svc/nodejs-rest-http &lt;/pre&gt; &lt;p&gt;Alternatively, you can use the &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/nodeshift"&gt;Nodeshift module&lt;/a&gt; to deploy a local directory:&lt;/p&gt; &lt;pre&gt;npx nodeshift --dockerImage=registry.access.redhat.com/rhel8-beta/nodejs-14 --expose &lt;/pre&gt; &lt;h2&gt;Get started with Node.js&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve introduced a couple of the JavaScript language features now available in Node.js 14. I also showed you two simple ways to get started with using Node.js 14 on OpenShift. To &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;learn more about using Node.js&lt;/a&gt;, check out Lucas Holmquist&amp;#8217;s &amp;#8220;Modern web applications on OpenShift&amp;#8221; article series:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;Modern web applications on OpenShift: Part 1 — Web apps in two commands&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;Modern web applications on OpenShift: Part 2 — Using chained builds&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/"&gt;Modern web applications on OpenShift: Part 3 — OpenShift as a development environment&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e"&gt;Node.js 14 official announcement&lt;/a&gt; for even more about improvements and features in Node.js 14.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#038;title=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/" data-a2a-title="Get started with Node.js 14 on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/"&gt;Get started with Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BgdS-YXKE4o" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In April, the Node.js development team released Node.js 14. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020. Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I&amp;#8217;ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/"&gt;Get started with Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">785577</post-id><dc:creator>Alexandros Alykiotis</dc:creator><dc:date>2020-10-20T07:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nWz7T8hBLYE/" /><category term="CI/CD" /><category term="Containers" /><category term="DevOps" /><category term="Kubernetes" /><category term="developer survey" /><category term="Kubernetes developer" /><category term="openshift" /><category term="openshift developer" /><author><name>Serena Chechile Nichols</name></author><id>https://developers.redhat.com/blog/?p=795747</id><updated>2020-10-16T07:00:39Z</updated><published>2020-10-16T07:00:39Z</published><content type="html">&lt;p&gt;We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. An important part of that effort is the annual &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;OpenShift Developer Survey&lt;/a&gt;, which we&amp;#8217;ve just released for 2020.&lt;/p&gt; &lt;p&gt;Keep reading to learn more about the survey, including highlights of the 2019 survey results and what to expect from the survey this year. We also invite you to participate in our OpenShift developer experience office hours and one-to-one feedback sessions for our developer community and customers.&lt;/p&gt; &lt;p&gt;&lt;span id="more-795747"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey&lt;/h2&gt; &lt;p&gt;The annual OpenShift Developer Survey is a critical tool for sharing your experiences as an OpenShift developer. Here’s some of what we learned from developers responding to the 2019 survey:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; was the clear leader for languages and tools used for application development on OpenShift.&lt;/li&gt; &lt;li&gt;Most respondents named Jenkins as their &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; tool of choice.&lt;/li&gt; &lt;li&gt;73% of respondents said that they used source-to-image (S2I) to package applications into a container image (a 10% jump from 2018).&lt;/li&gt; &lt;li&gt;Most respondents expressed overall satisfaction with their OpenShift experience, with room for improvement.&lt;/li&gt; &lt;li&gt;Documentation and help were still top pain points for developers.&lt;/li&gt; &lt;li&gt;Asked what version of OpenShift they used: &lt;ul&gt; &lt;li&gt;19% of respondents had used OpenShift 4.x (only OpenShift 4.1 and 4.2 were released when the survey started).&lt;/li&gt; &lt;li&gt;58% of respondents said that OpenShift 3.11 was the newest version that they had used.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Survey respondents included developers who interacted with OpenShift or a representative such as their manager or team lead. Red Hat representatives were invited to respond on behalf of their developer clients and customers.&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey in 2020&lt;/h2&gt; &lt;p&gt;We use the OpenShift Developer Survey to understand better how developers work with OpenShift—what works and what doesn&amp;#8217;t—as well as the technologies that you rely on the most. Getting a breadth of responses helps us compare data and focus on the technologies and improvements that are key for our developer community and customers.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;2020 OpenShift Developer Survey&lt;/a&gt; is open now and continues through November 22, 2020. It takes about seven minutes to complete. We hope that you will participate in the survey and share it with your team. Also, look for a follow-up article in December, where we&amp;#8217;ll report on the survey results.&lt;/p&gt; &lt;h2&gt;New office hours for the OpenShift developer experience&lt;/h2&gt; &lt;p&gt;Our OpenShift developer experience office hours are now weekly. During office hours, we alternate between talking about the future and getting feedback about what is happening right now. Developer advocates demonstrate tools in the OpenShift ecosystem and discuss their coding challenges and mishaps, as well as how they worked through them.&lt;/p&gt; &lt;p&gt;Our weekly OpenShift developer experience office hours are featured on &lt;a target="_blank" rel="nofollow" href="http://openshift.tv"&gt;openshift.tv&lt;/a&gt;, streaming on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/streaming/twitch?hsLang=en-us"&gt;Twitch&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/rhopenshift"&gt;YouTube&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.facebook.com/openshift/"&gt;Facebook Live&lt;/a&gt;. You can also check the &lt;a target="_blank" rel="nofollow" href="https://groups.google.com/forum/#!forum/openshift-dev-users"&gt;openshift-dev-users mailing list&lt;/a&gt; or the &lt;a target="_blank" rel="nofollow" href="https://calendar.google.com/calendar/u/0/embed?src=redhatstreaming@gmail.com"&gt;openshift.tv schedule&lt;/a&gt; for office hours. Or, reach out to the team anytime through any of the channels listed on the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/console"&gt;OpenShift Console project homepage&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you haven’t yet experienced it, be sure to check out &lt;a href="https://developers.redhat.com/blog/2020/07/16/whats-new-in-the-openshift-4-5-console-developer-experience/"&gt;What’s new in the OpenShift 4.5 console developer experience&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Register for a remote feedback session&lt;/h2&gt; &lt;p&gt;As a developer who uses OpenShift, we are very interested in your perspective. We&amp;#8217;re currently inviting developers to participate in remote feedback sessions, where we discuss your technology pain points, validate use cases, and collaborate on future experiences. We&amp;#8217;re also offering customer empathy sessions, where you can let us know what isn&amp;#8217;t working for you.&lt;/p&gt; &lt;p&gt;As always, these sessions are a great opportunity to impact the future of the developer experience on OpenShift. To set up a session, please &lt;a target="_blank" rel="nofollow" href="https://forms.gle/dv5x8iQRjg7VvCw19"&gt;fill out this request form&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re serious about valuing your feedback, and we hope that you will take the opportunity to help shape the developer experience on OpenShift. The annual OpenShift Developer Survey is open until November 22, we&amp;#8217;re now hosting weekly office hours, and we&amp;#8217;re currently scheduling one-to-one feedback sessions. Get in touch and help us make the OpenShift developer experience better for you!&lt;/p&gt; &lt;p&gt;Take the &lt;a target="_blank" rel="nofollow" href="https://redhatvoc.co1.qualtrics.com/jfe/form/SV_cTvjNzMTmsFHILH?blog"&gt;OpenShift Developer Survey&lt;/a&gt; now.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#038;title=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" data-a2a-url="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/" data-a2a-title="Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/"&gt;Let&amp;#8217;s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nWz7T8hBLYE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for Red Hat OpenShift. An important part of that effort is the annual OpenShift Developer Survey, which we&amp;#8217;ve just released for 2020. Keep reading to learn more about the survey, including highlights of the 2019 [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/"&gt;Let&amp;#8217;s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">795747</post-id><dc:creator>Serena Chechile Nichols</dc:creator><dc:date>2020-10-16T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/</feedburner:origLink></entry></feed>
