<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Open Liberty 20.0.0.11 brings Kerberos authentication and Thanos support in Grafana dashboards</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SP_8v_rfpdk/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="grafana" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kerberos authentication" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Open Liberty" scheme="searchisko:content:tags" /><category term="OpenLiberty" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Thanos" scheme="searchisko:content:tags" /><author><name>Austin Bailey</name></author><id>searchisko:content:id:jbossorg_blog-open_liberty_20_0_0_11_brings_kerberos_authentication_and_thanos_support_in_grafana_dashboards</id><updated>2020-10-30T07:00:58Z</updated><published>2020-10-30T07:00:58Z</published><content type="html">&lt;p&gt;This article is a quick look at two exciting updates in the new Open Liberty 20.0.0.11 release. First, you can now use the Kerberos authentication protocol to secure Java Database Connectivity (JDBC) data sources. I&amp;#8217;ll introduce the new &lt;code&gt;kerberos&lt;/code&gt; configuration element in Open Liberty&amp;#8217;s &lt;code&gt;server.xml&lt;/code&gt; and show you how to use the Kerberos protocol to secure a data source.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve also updated Open Liberty&amp;#8217;s Grafana dashboard, which you can now use to visualize MicroProfile Metrics data from Thanos data sources. This new functionality benefits developers working in &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; environments such as &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, where it is possible to use Thanos to query and store metrics data from multiple clusters. Keep reading to learn more about both of these updates in Open Liberty 20.0.0.11.&lt;/p&gt; &lt;h2&gt;Run your applications using Open Liberty 20.0.0.11&lt;/h2&gt; &lt;p&gt;Use the following coordinates to install Open Liberty 20.0.0.10 with &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/maven-intro.html"&gt;Maven&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.11&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;For &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/gradle-intro.html"&gt;Gradle&lt;/a&gt;, use:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.11,)' } &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using Docker, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;FROM open-liberty &lt;/pre&gt; &lt;h2&gt;Kerberos authentication for JDBC data sources&lt;/h2&gt; &lt;p&gt;Kerberos is a network authentication protocol that lets a client and server authenticate by communicating with a key distribution center (KDC). Starting with Open Liberty 20.0.0.11, you may use Kerberos authentication for JDBC data sources that are backed by one of the following databases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;IBM DB2&lt;/li&gt; &lt;li&gt;Oracle Database&lt;/li&gt; &lt;li&gt;Microsoft SQLServer&lt;/li&gt; &lt;li&gt;PostgreSQL&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Open Liberty&amp;#8217;s Kerberos authentication builds on top of the JDK&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.security.auth/com/sun/security/auth/module/Krb5LoginModule.html"&gt;Kerberos Login Module&lt;/a&gt; (&lt;code&gt;Krb5LoginModule&lt;/code&gt;) and the &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/index.html"&gt;Java Generic Secure Services API&lt;/a&gt;. The Kerberos Login Module, in turn, builds on top of the Kerberos operating system libraries for the specific system in use.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;kerberos&lt;/code&gt; &lt;code&gt;server.xml&lt;/code&gt;configuration elementÂ provides systemwide configuration options for the Open Liberty server. For example:&lt;/p&gt; &lt;pre&gt; &amp;#60;kerberos keytab="${server.config.dir}/security/krb5.keytab" configFile="${server.config.dir}/security/krb5.conf"/&amp;#62; &lt;/pre&gt; &lt;p&gt;Here is an example of how to use the Kerberos protocol to secure a JDBC data source:&lt;/p&gt; &lt;pre&gt; &amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;jdbc-4.2&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;!-- optional config: This is only needed if you need to customize the location of keytab or krb5.conf --&amp;#62; &amp;#60;kerberos keytab="${server.config.dir}/security/krb5.keytab" configFile="${server.config.dir}/security/krb5.conf"/&amp;#62; &amp;#60;authData id="myKerberosAuth" krb5Principal="krbUser"/&amp;#62; &amp;#60;library id="db2DriverLib"&amp;#62; &amp;#60;fileset dir="${server.config.dir}/db2"/&amp;#62; &amp;#60;/library&amp;#62; &amp;#60;dataSource jndiName="jdbc/krb/basic" containerAuthDataRef="myKerberosAuth"&amp;#62; &amp;#60;jdbcDriver libraryRef="db2DriverLib"/&amp;#62; &amp;#60;properties.db2.jcc databaseName="${DB2_DBNAME}" serverName="${DB2_HOSTNAME}" portNumber="${DB2_PORT}"/&amp;#62; &amp;#60;/dataSource&amp;#62; &lt;/pre&gt; &lt;p&gt;Before this release, it was technically possible to use Kerberos authentication with JDBC data sources, but the configuration was complex and undocumented. The Open Liberty server also lacked connection pooling support when using Kerberos authentication for data sources.&lt;/p&gt; &lt;h2&gt;The Grafana dashboard now supports Thanos&lt;/h2&gt; &lt;p&gt;With Open Liberty 20.0.0.11, you can now use the Open Liberty Grafana dashboard to visualize data from a Thanos data source. The Grafana dashboard provides a range of time-series visualizations of MicroProfile Metrics data, including performance metrics for CPU and servlet operations, connection pooling, and garbage collection. The Grafana dashboard is powered by a Prometheus data source, configured to ingest data from the &lt;code&gt;/metrics&lt;/code&gt; endpoint of one or more Open Liberty servers. You can use the dashboard to view performance metrics in near real-time.&lt;/p&gt; &lt;p&gt;Open Liberty previously supported visualizing metrics data only in cases where Prometheus was the data source. However, Kubernetes environments such as OpenShift use Thanos to query and store metrics data from multiple clusters. In the new Open Liberty Grafana dashboard, shown in Figure 1, Kubernetes and OpenShift users can set Thanos as the data source for displaying metrics data.&lt;/p&gt; &lt;div id="attachment_808737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/grafana.png"&gt;&lt;img aria-describedby="caption-attachment-808737" class="wp-image-808737 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/grafana-1024x541.png" alt="The updated Grafana dashboard showing CPU processing time and system load." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/grafana-1024x541.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/grafana-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/grafana-768x406.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-808737" class="wp-caption-text"&gt;Figure 1: The new Open Liberty 20.0.0.11 Grafana dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Using Thanos with the new Grafana dashboard&lt;/h2&gt; &lt;p&gt;Learn more about what you can do with the new Open Liberty 20.0.0.11 Grafana dashboard:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Visit Open Liberty Operator&amp;#8217;s GitHub repository for a guide to &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics/"&gt;installing the new Open Liberty Grafana dashboard&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;See the Prometheus homepage for more about &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/prometheus/latest/querying/basics/"&gt;creating custom visualizations with Prometheus&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;See the OpenShift blog for a look at &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/federated-prometheus-with-thanos-receive"&gt;monitoring multiple OpenShift clusters with Thanos&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Try Open Liberty 20.0.0.11 in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;Open Liberty is part of Red Hat Runtimes and is available to &lt;a target="_blank" rel="nofollow" href="//access.redhat.com/products/red-hat-runtimesâ"&gt;Red Hat Runtimes subscribers&lt;/a&gt;. To learn more about deploying Open Liberty applications to &lt;a target="_blank" rel="nofollow" href="//developers.redhat.com/products/openshift/overviewâ"&gt;Red Hat OpenShift&lt;/a&gt;, see our Open Liberty guide, &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="//openliberty.io/guides/cloud-openshift.htmlâ"&gt;Deploying microservices to OpenShift&lt;/a&gt;&lt;/i&gt;. Open Liberty 20.0.0.11 is available through Maven, Gradle, Docker, and as a downloadable archive.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#38;linkname=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fopen-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards%2F&amp;#038;title=Open%20Liberty%2020.0.0.11%20brings%20Kerberos%20authentication%20and%20Thanos%20support%20in%20Grafana%20dashboards" data-a2a-url="https://developers.redhat.com/blog/2020/10/30/open-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards/" data-a2a-title="Open Liberty 20.0.0.11 brings Kerberos authentication and Thanos support in Grafana dashboards"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/30/open-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards/"&gt;Open Liberty 20.0.0.11 brings Kerberos authentication and Thanos support in Grafana dashboards&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SP_8v_rfpdk" height="1" width="1" alt=""/&gt;</content><summary>This article is a quick look at two exciting updates in the new Open Liberty 20.0.0.11 release. First, you can now use the Kerberos authentication protocol to secure Java Database Connectivity (JDBC) data sources. Iâll introduce the new kerberos configuration element in Open Libertyâs server.xml and show you how to use the Kerberos protocol to secure a data source. Weâve also updated Open Libertyâ...</summary><dc:creator>Austin Bailey</dc:creator><dc:date>2020-10-30T07:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/30/open-liberty-20-0-0-11-brings-kerberos-authentication-and-thanos-support-in-grafana-dashboards/</feedburner:origLink></entry><entry><title>Whatâs new in Fabric8 Kubernetes Java client 4.12.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mkL8_zc_Sv8/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="fabric8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="tekton pipelines" scheme="searchisko:content:tags" /><author><name>Rohan Kumar</name></author><id>searchisko:content:id:jbossorg_blog-what_s_new_in_fabric8_kubernetes_java_client_4_12_0</id><updated>2020-10-30T07:00:55Z</updated><published>2020-10-30T07:00:55Z</published><content type="html">&lt;p&gt;The recent &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Java client&lt;/a&gt; &lt;a href="https://github.com/fabric8io/kubernetes-client/releases/tag/v4.12.0"&gt;4.12.0&lt;/a&gt; release includes many new features and bug fixes. This article introduces the major features we&amp;#8217;ve added between the &lt;a href="https://github.com/fabric8io/kubernetes-client/releases/tag/v4.11.0"&gt;4.11.0&lt;/a&gt; and &lt;a href="https://github.com/fabric8io/kubernetes-client/releases/tag/v4.12.0"&gt;4.12.0&lt;/a&gt; releases.&lt;/p&gt; &lt;p&gt;I will show you how to get started with the new &lt;code&gt;VolumeSnapshot&lt;/code&gt; extension, &lt;code&gt;CertificateSigningRequests&lt;/code&gt;, and Tekton triggers in the Fabric8 Tekton client (to name just a few). I&amp;#8217;ll also point out several minor changes that break backward compatibility with older releases. Knowing about these changes will help you avoid problems when you upgrade to the latest version of Fabric8&amp;#8217;s &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; client for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How to get the new Fabric8 Java client&lt;/h2&gt; &lt;p&gt;You will find the most current Fabric8 Java client release on &lt;a target="_blank" rel="nofollow" href="https://search.maven.org/artifact/io.fabric8/kubernetes-client/4.12.0/jar"&gt;Maven Central&lt;/a&gt;. To start using the new Java client, add it as a dependency in your Maven &lt;code&gt;pom.xml&lt;/code&gt;. For Kubernetes, the dependency is:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.fabric8&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;kubernetes-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.12.0&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;For OpenShift, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.fabric8&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openshift-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.12.0&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;h2&gt;Breaking changes in this release&lt;/h2&gt; &lt;p&gt;We have moved several classes for this release, so upgrading to the new version of the Fabric8 Kubernetes Java client might not be completely smooth. The changes are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We moved the &lt;code&gt;CustomResourceDefinition&lt;/code&gt; to &lt;code&gt;io.fabric8.kubernetes.api.model.apiextensions.v1&lt;/code&gt; and &lt;code&gt;io.fabric8.kubernetes.api.model.apiextensions.v1beta1&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We moved &lt;code&gt;SubjectAccessReview&lt;/code&gt;, &lt;code&gt;SelfSubjectAccessReview&lt;/code&gt;, &lt;code&gt;LocalSubjectAccessReview&lt;/code&gt;, and &lt;code&gt;SelfSubjectRulesReview&lt;/code&gt; to &lt;code&gt;io.fabric8.kubernetes.api.model.authorization.v1&lt;/code&gt; and &lt;code&gt;io.fabric8.kubernetes.api.model.authorization.v1beta1&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;io.fabric8.tekton.pipeline.v1beta1.WorkspacePipelineDeclaration&lt;/code&gt; is now &lt;code&gt;io.fabric8.tekton.pipeline.v1beta1.PipelineWorkspaceDeclaration&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We introduced a new interface, &lt;code&gt;WatchAndWaitable&lt;/code&gt;, which is used by &lt;code&gt;WatchListDeletable&lt;/code&gt; and other interfaces. This change should not affect you if you are using the Fabric8 Kubernetes Java client&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://javadoc.io/doc/io.fabric8/kubernetes-client/latest/index.html"&gt;domain-specific language (DSL)&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The new VolumeSnapshot extension&lt;/h2&gt; &lt;p&gt;You might know about the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client/tree/master/extensions"&gt;Fabric8 Kubernetes Java client extensions&lt;/a&gt; for &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;Tekton&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/service-mesh"&gt;Istio&lt;/a&gt;, and Service Catalog. In this release, we&amp;#8217;ve added a new &lt;a target="_blank" rel="nofollow" href="https://github.com/container-storage-interface/spec"&gt;Container Storage Interface&lt;/a&gt; (CSI) &lt;code&gt;VolumeSnapshot&lt;/code&gt; extension. &lt;code&gt;VolumeSnapshot&lt;/code&gt;s are in the &lt;code&gt;snapshot.storage.k8s.io/v1beta1&lt;/code&gt; directory. To start using the new extension, add the following dependency to your Maven &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.fabric8&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;volumesnapshot-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.12.0&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;Once you&amp;#8217;ve added the dependency, you can start using the &lt;code&gt;VolumeSnapshotClient&lt;/code&gt;. Here&amp;#8217;s an example of how to create a &lt;code&gt;VolumeSnapshot&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;try (VolumeSnapshotClient client = new DefaultVolumeSnapshotClient()) { System.out.println("Creating a volume snapshot"); client.volumeSnapshots().inNamespace("default").createNew() .withNewMetadata() .withName("my-snapshot") .endMetadata() .withNewSpec() .withNewSource() .withNewPersistentVolumeClaimName("my-pvc") .endSource() .endSpec() .done(); } &lt;/pre&gt; &lt;h2&gt;Spin up a single pod with &lt;code&gt;client.run()&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Just like you would with &lt;code&gt;kubectl run&lt;/code&gt;, you can quickly spin up a pod with the Fabric8 Kubernetes Java client. You only need to provide a name and image:&lt;/p&gt; &lt;pre&gt;try (KubernetesClient client = new DefaultKubernetesClient()) { client.run().inNamespace("default").withName("hello-openshift") .withImage("openshift/hello-openshift:latest") .done(); } &lt;/pre&gt; &lt;h2&gt;Authentication API support&lt;/h2&gt; &lt;p&gt;A new authentication API lets you use the Fabric8 Kubernetes Java client to query a Kubernetes cluster. You should be able to use the API for all operations equivalent to &lt;code&gt;kubectl auth can-i&lt;/code&gt;. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;try (KubernetesClient client = new DefaultKubernetesClient()) { SelfSubjectAccessReview ssar = new SelfSubjectAccessReviewBuilder() .withNewSpec() .withNewResourceAttributes() .withGroup("apps") .withResource("deployments") .withVerb("create") .withNamespace("dev") .endResourceAttributes() .endSpec() .build(); ssar = client.authorization().v1().selfSubjectAccessReview().create(ssar); System.out.println("Allowed: "+ ssar.getStatus().getAllowed()); } &lt;/pre&gt; &lt;h2&gt;OpenShift 4 resources&lt;/h2&gt; &lt;p&gt;The Fabric8 Kubernetes Java client now supports all of the new OpenShift 4 resources in its OpenShift model. Additional resources added in &lt;code&gt;operators.coreos.com&lt;/code&gt;, &lt;code&gt;operators.openshift.io&lt;/code&gt;, &lt;code&gt;console.openshift.io&lt;/code&gt;, and &lt;code&gt;monitoring.coreos.com&lt;/code&gt; are also available within the OpenShift model. Here is an example of using &lt;code&gt;PrometheusRule&lt;/code&gt; to monitor a &lt;code&gt;Prometheus&lt;/code&gt; instance:&lt;/p&gt; &lt;pre&gt;try (OpenShiftClient client = new DefaultOpenShiftClient()) { PrometheusRule prometheusRule = new PrometheusRuleBuilder() .withNewMetadata().withName("foo").endMetadata() .withNewSpec() .addNewGroup() .withName("./example-rules") .addNewRule() .withAlert("ExampleAlert") .withNewExpr().withStrVal("vector(1)").endExpr() .endRule() .endGroup() .endSpec() .build(); client.monitoring().prometheusRules().inNamespace("rokumar").createOrReplace(prometheusRule); System.out.println("Created"); PrometheusRuleList prometheusRuleList = client.monitoring().prometheusRules().inNamespace("rokumar").list(); System.out.println(prometheusRuleList.getItems().size() + " items found"); } &lt;/pre&gt; &lt;h2&gt;Certificate signing requests&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve added a new entry point, &lt;code&gt;certificateSigningRequests()&lt;/code&gt;, in the main &lt;code&gt;KubernetesClient&lt;/code&gt; interface. This means you can use &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/"&gt;CertificateSigningRequest resources&lt;/a&gt; in all of your applications developed with Fabric8:&lt;/p&gt; &lt;pre&gt;try (KubernetesClient client = new DefaultKubernetesClient()) { CertificateSigningRequest csr = new CertificateSigningRequestBuilder() .withNewMetadata().withName("test-k8s-csr").endMetadata() .withNewSpec() .addNewGroup("system:authenticated") .withRequest("&amp;#60;your-req&amp;#62;") .addNewUsage("client auth") .endSpec() .build(); client.certificateSigningRequests().create(csr); } &lt;/pre&gt; &lt;h2&gt;Custom resource definitions&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve moved the &lt;code&gt;apiextensions/v1&lt;/code&gt; &lt;code&gt;CustomResourceDefinition&lt;/code&gt; (CRD) to the &lt;code&gt;io.fabric8.kubernetes.api.model.apiextensions.v1beta1&lt;/code&gt; and &lt;code&gt;io.fabric8.kubernetes.api.model.apiextensions.v1&lt;/code&gt; packages. You can now use &lt;code&gt;CustomResourceDefinition&lt;/code&gt; objects inside &lt;code&gt;apiextensions()&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt;try (KubernetesClient client = new DefaultKubernetesClient()) { client.apiextensions().v1() .customResourceDefinitions() .list() .getItems().forEach(crd -&amp;#62; System.out.println(crd.getMetadata().getName())); } &lt;/pre&gt; &lt;h2&gt;Creating bootstrap project templates&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve provided a new, built-in way to create a project with all of the role bindings you need. It works like OpenShift&amp;#8217;s &lt;code&gt;oc adm create-bootstrap-project-template&lt;/code&gt; command. Specify the parameters that the template requires in the DSL method. The method then creates the &lt;code&gt;Project&lt;/code&gt; and related &lt;code&gt;RoleBindings&lt;/code&gt; for you:&lt;/p&gt; &lt;pre&gt;try (OpenShiftClient client = new DefaultOpenShiftClient()) { client.projects().createProjectAndRoleBindings("default", "Rohan Kumar", "default", "developer", "developer"); } &lt;/pre&gt; &lt;h2&gt;Tekton model 0.15.1&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve updated the Tekton model to version 0.15.1 so that you can take advantage of all the newest upstream features and enhancements for Tekton. This example creates a simple &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;TaskRun&lt;/code&gt; to echo &amp;#8220;hello world&amp;#8221; in a pod. Instead of &lt;code&gt;YAML&lt;/code&gt;, we use the &lt;a target="_blank" rel="nofollow" href="https://search.maven.org/artifact/io.fabric8/tekton-client/4.12.0/bundle"&gt;Fabric8 TektonClient&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;try (TektonClient tkn = new DefaultTektonClient()) { // Create Task tkn.v1beta1().tasks().inNamespace(NAMESPACE).createOrReplaceWithNew() .withNewMetadata().withName("echo-hello-world").endMetadata() .withNewSpec() .addNewStep() .withName("echo") .withImage("alpine:3.12") .withCommand("echo") .withArgs("Hello World") .endStep() .endSpec() .done(); // Create TaskRun tkn.v1beta1().taskRuns().inNamespace(NAMESPACE).createOrReplaceWithNew() .withNewMetadata().withName("echo-hello-world-task-run").endMetadata() .withNewSpec() .withNewTaskRef() .withName("echo-hello-world") .endTaskRef() .endSpec() .done(); } &lt;/pre&gt; &lt;p&gt;When you run this code, you will see the &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;TaskRun&lt;/code&gt; being created. The &lt;code&gt;TaskRun&lt;/code&gt;, in turn, creates a pod, which prints the &amp;#8220;Hello World&amp;#8221; message:&lt;/p&gt; &lt;pre&gt;tekton-java-client-demo : $ tkn taskrun list NAME STARTED DURATION STATUS echo-hello-world-task-run 2 minutes ago 19 seconds Succeeded tekton-java-client-demo : $ kubectl get pods NAME READY STATUS RESTARTS AGE echo-hello-world-task-run-pod-4gczw 0/1 Completed 0 2m17s tekton-java-client-demo : $ kubectl logs pod/echo-hello-world-task-run-pod-4gczw Hello World &lt;/pre&gt; &lt;h2&gt;Tekton triggers in the Fabric8 Tekton client&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://search.maven.org/artifact/io.fabric8/tekton-client/4.12.0/bundle"&gt;Fabric8 Tekton client&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://search.maven.org/artifact/io.fabric8/tekton-model-v1beta1/4.12.0/bundle"&gt;model&lt;/a&gt; now support &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers"&gt;Tekton triggers&lt;/a&gt;. You can use triggers to automate the creation of Tekton pipelines. All you have to do is embed your triggers in the Tekton continuous deployment (CD) pipeline. Here is an example of using the Fabric8 Tekton client to create a &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/3a2ecf8b3ef143a81d6908d055bef4f3251ed01d/examples/triggertemplates/triggertemplate.yaml#L1-L38"&gt;Tekton trigger template&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;try (TektonClient tkn = new DefaultTektonClient()) { tkn.v1alpha1().triggerTemplates().inNamespace(NAMESPACE).createOrReplaceWithNew() .withNewMetadata().withName("pipeline-template").endMetadata() .withNewSpec() .addNewParam() .withName("gitrepositoryurl") .withDescription("The git repository url") .endParam() .addNewParam() .withName("gitrevision") .withDescription("The git revision") .endParam() .addNewParam() .withName("message") .withDescription("The message to print") .withDefault("This is default message") .endParam() .addNewParam() .withName("contenttype") .withDescription(" The Content-Type of the event") .endParam() .withResourcetemplates(Collections.singletonList(new PipelineRunBuilder() .withNewMetadata().withGenerateName("simple-pipeline-run-").endMetadata() .withNewSpec() .withNewPipelineRef().withName("simple-pipeline").endPipelineRef() .addNewParam() .withName("message") .withValue(new ArrayOrString("$(tt.params.message)")) .endParam() .addNewParam() .withName("contenttype") .withValue(new ArrayOrString("$(tt.params.contenttype)")) .endParam() .addNewResource() .withName("git-source") .withNewResourceSpec() .withType("git") .addNewParam() .withName("revision") .withValue("$(tt.params.gitrevision)") .endParam() .addNewParam() .withName("url") .withValue("$(tt.params.gitrepositoryurl)") .endParam() .endResourceSpec() .endResource() .endSpec() .build())) .endSpec() .done(); } &lt;/pre&gt; &lt;h2&gt;Automatically refresh OpenID Connect tokens&lt;/h2&gt; &lt;p&gt;If your Kubernetes provider uses &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens"&gt;OpenID Connect tokens&lt;/a&gt; (like &lt;a target="_blank" rel="nofollow" href="https://www.ibm.com/cloud"&gt;IBM Cloud&lt;/a&gt;), you don&amp;#8217;t need to worry about your tokens expiring. The new Fabric8 Kubernetes Java client automatically refreshes your tokens by contacting the OpenID Connect provider, which is listed in the &lt;code&gt;~/.kube/config&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Support for Knative 0.17.2 and Knative Eventing Contrib&lt;/h2&gt; &lt;p&gt;For this release, we&amp;#8217;ve updated the &lt;a target="_blank" rel="nofollow" href="https://knative.dev/"&gt;Knative&lt;/a&gt; model to the latest version. We also added new support for the additional resources from &lt;a target="_blank" rel="nofollow" href="https://github.com/knative/eventing-contrib"&gt;Knative Eventing Contrib&lt;/a&gt;, which involves &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/eventing/sources/"&gt;sources&lt;/a&gt; and channel implementations that integrate with Apache CouchDB, Apache Kafka, Amazon Simple Queue Service (AWS SQS), GitHub, GitLab, and so on.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example of creating an &lt;code&gt;AwsSqsSource&lt;/code&gt; using &lt;code&gt;KnativeClient&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;try (KnativeClient client = new DefaultKnativeClient()) { AwsSqsSource awsSqsSource = new AwsSqsSourceBuilder() .withNewMetadata().withName("awssqs-sample-source").endMetadata() .withNewSpec() .withNewAwsCredsSecret("credentials", "aws-credentials", true) .withQueueUrl("QUEUE_URL") .withSink(new ObjectReferenceBuilder() .withApiVersion("messaging.knative.dev/v1alpha1") .withKind("Channel") .withName("awssqs-test") .build()) .endSpec() .build(); client.awsSqsSources().inNamespace("default").createOrReplace(awsSqsSource); } &lt;/pre&gt; &lt;h2&gt;Get involved!&lt;/h2&gt; &lt;p&gt;There are a few ways to get involved with the development of the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8 Kubernetes Java client&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client/issues"&gt;GitHub issues&lt;/a&gt; to let us know when features don&amp;#8217;t work as expected.&lt;/li&gt; &lt;li&gt;Send &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client/pulls"&gt;pull requests&lt;/a&gt; for bug fixes and enhancements.&lt;/li&gt; &lt;li&gt;Chat with us on the Fabric8 Kubernetes Java client &lt;a target="_blank" rel="nofollow" href="https://gitter.im/fabric8io/kubernetes-client"&gt;Gitter channel&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Follow us on &lt;a target="_blank" rel="nofollow" href="https://twitter.com/fabric8io/"&gt;Twitter&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#38;linkname=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F30%2Fwhats-new-in-fabric8-kubernetes-java-client-4-12-0%2F&amp;#038;title=What%E2%80%99s%20new%20in%20Fabric8%20Kubernetes%20Java%20client%204.12.0" data-a2a-url="https://developers.redhat.com/blog/2020/10/30/whats-new-in-fabric8-kubernetes-java-client-4-12-0/" data-a2a-title="Whatâs new in Fabric8 Kubernetes Java client 4.12.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/30/whats-new-in-fabric8-kubernetes-java-client-4-12-0/"&gt;What&amp;#8217;s new in Fabric8 Kubernetes Java client 4.12.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mkL8_zc_Sv8" height="1" width="1" alt=""/&gt;</content><summary>The recent Fabric8 Kubernetes Java client 4.12.0 release includes many new features and bug fixes. This article introduces the major features weâve added between the 4.11.0 and 4.12.0 releases. I will show you how to get started with the new VolumeSnapshot extension, CertificateSigningRequests, and Tekton triggers in the Fabric8 Tekton client (to name just a few). Iâll also point out several minor...</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2020-10-30T07:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/30/whats-new-in-fabric8-kubernetes-java-client-4-12-0/</feedburner:origLink></entry><entry><title>Collect JDK Flight Recorder events at runtime with JMC Agent</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JHXybdDTNGo/" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JDK Flight Recorder" scheme="searchisko:content:tags" /><category term="JRockit" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="RHEL 7" scheme="searchisko:content:tags" /><category term="rhel 8" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>mtorre</name></author><id>searchisko:content:id:jbossorg_blog-collect_jdk_flight_recorder_events_at_runtime_with_jmc_agent</id><updated>2020-10-29T07:00:11Z</updated><published>2020-10-29T07:00:11Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/"&gt;JDK Flight Recorder&lt;/a&gt;, or JFR, is an event-based production environment profiler available from &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;OpenJDK 8u272&lt;/a&gt; forward. Being a HotSpot-native feature, JDK Flight Recorder performs with extremely low overhead in terms of how it uses both space and time.&lt;/p&gt; &lt;p&gt;While JDK Flight Recorder collects basic &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; runtime information by default, it is also possible to use JFR&amp;#8217;s Event API to collect custom events. Developers who want to collect application-level events must actively define and instantiate them in their application source code.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll show you how to use JMC Agent and the JMC Agent Plugin to instrument your application classes with event-emitting code. When you use JMC Agent with the JDK Flight Recorder Event API, you do not need to shut down the JVM and recompile the application code.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: We include an overview of the JDK Flight Recorder toolchain in this article, but we&amp;#8217;ll focus on introducing JMC Agent and the JMC Agent Plugin. To learn more about JDK Flight Recorder, see our previous article, &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u/"&gt;Get started with JDK Flight Recorder in OpenJDK 8u&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Overview of the JDK Flight Recorder toolchain&lt;/h2&gt; &lt;p&gt;JMC Agent is a subcomponent of the &lt;a target="_blank" rel="nofollow" href="http://jdk.java.net/jmc/"&gt;JDK Mission Control&lt;/a&gt; (JMC) project. JDK Mission Control focuses on interacting with JDK Flight Recorder and analyzing the recordings that it dumps. Although we mainly cover JMC Agent and the JMC Agent Plugin, an overview of the toolchain will be helpful.&lt;/p&gt; &lt;h3&gt;JDK Flight Recorder&lt;/h3&gt; &lt;p&gt;JDK Flight Recorder was originally a JRockit JVM feature. It captures key JVM statistics events and records them in a flight recording file for offline analysis. In 2018, Oracle open-sourced this feature under the name JDK Flight Recorder and integrated it into OpenJDK 11. JFR was also backported to OpenJDK 8.&lt;/p&gt; &lt;p&gt;Developers use JDK Flight Recorder to profile JVMs in production environments. JFR records events in compact binary forms. At a glance, it stores these events first in an in-memory buffer. Periodically, it flushes the buffer to the file system or another store. JFR is meant to be an &amp;#8220;alway on&amp;#8221; production time profiler and has an overhead of less than 2% for most use cases.&lt;/p&gt; &lt;h3&gt;JDK Mission Control&lt;/h3&gt; &lt;p&gt;Having a flight recording in a binary format is not useful by itself. OpenJDK provides tooling to access these recordings and decode their content. However, &lt;a target="_blank" rel="nofollow" href="https://openjdk.java.net/projects/jmc/"&gt;JDK Mission Control&lt;/a&gt; is the most powerful and flexible way to study flight recordings.&lt;/p&gt; &lt;p&gt;JDK Mission Control is a GUI tool specifically designed to analyze JFR recordings. Together with JDK Flight Recorder, JMC gives developers an in-depth view of the application&amp;#8217;s runtime characteristics. You can use this view to identify performance bottlenecks and fine-tune the JVM. JMC also has the ability to connect to a locally running JVM, to take new recordings, and to control ongoing recordings.&lt;/p&gt; &lt;p&gt;JMC is an &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/community/rcpos.php"&gt;Eclipse Rich Client Platform&lt;/a&gt; application. It can be extended with various plugins. It also offers a powerful standalone API for reading and analyzing JFR recordings independently from the GUI application.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: JDK Mission Control is available in Fedora and &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux (RHEL) 7&lt;/a&gt; via &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; (RHSCL), in &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.2_release_notes/rhel-8_2_1_release#new_features"&gt;RHEL 8 via the modules&lt;/a&gt;, and for Windows users from the &lt;a href="https://developers.redhat.com/products/openjdk/download"&gt;OpenJDK developer portal&lt;/a&gt;. You can also obtain JDK Mission Control via a downstream distribution like &lt;a target="_blank" rel="nofollow" href="https://adoptopenjdk.net/jmc"&gt;AdoptOpenJDK&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;JMC Agent&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://wiki.openjdk.java.net/display/jmc/The+JMC+Agent"&gt;JMC Agent&lt;/a&gt; is a subproject of JMC. You can use this bytecode transformer to add JFR instrumentation declaratively to running applications. When you use JMC Agent, you do not need to program the JFR instrumentation in the source code.&lt;/p&gt; &lt;p&gt;Because the agent operates in the same address space as the JVM, it is extremely versatile. You can load it at the start of the application or sideload it dynamically at any time. A running JMC agent exposes an MBean controller for further configuration via Remote Java Management Extensions (JMX).&lt;/p&gt; &lt;h3&gt;The JMC Agent Plugin&lt;/h3&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/jmc-agent-plugin"&gt;JMC Agent Plugin&lt;/a&gt; is an ongoing effort that integrates JMC Agent features into JDK Mission Control. It is currently being developed as an external plugin in a separate project. Eventually, it will be rehomed as a submodule of JMC. Developers can use the JMC Agent Plugin to manage the JMC Agent lifecycle and control an agent&amp;#8217;s behaviors.&lt;/p&gt; &lt;p&gt;While the JMC Agent Plugin is in an early development stage, essential features are already usable. In the following sections, you will learn more about JMC Agent and the JMC Agent Plugin, including instructions for building an agent plugin that is usable in JDK Mission Control.&lt;/p&gt; &lt;h2&gt;Introduction to JMC Agent&lt;/h2&gt; &lt;p&gt;The most common way to produce events and commit them to JDK Flight Recorder is to use the standard &lt;code&gt;jdk.jfr.*&lt;/code&gt; API, which was introduced in JDK 9. Developers who wish to use the &lt;code&gt;jdk.jfr.*&lt;/code&gt; API to create events and operate on their instances must manually extend from a &lt;code&gt;jdk.jfr.Event&lt;/code&gt;. An alternative, available from JMC Agent, is to use declarative and hot-swappable configurations. JDK Flight Recorder treats all events the same way, regardless of whether JMC Agent or the standard API produces them.&lt;/p&gt; &lt;h3&gt;Creating and operating on event instances with JMC Agent&lt;/h3&gt; &lt;p&gt;JMC Agent uses the &lt;a target="_blank" rel="nofollow" href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html"&gt;Java Instrumentation API&lt;/a&gt; to register a &lt;code&gt;ClassFileTransformer&lt;/code&gt; immediately after starting. When a class loader initiates class loading, the agent &lt;code&gt;ClassFileTransformer&lt;/code&gt; transforms the class bytecode by injecting event-committing bytecode, which is generated according to the configuration supplied.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s also possible to revert or update instrumentation by retransforming and reloading the class, as long as the agent can obtain a reference to target classes.&lt;/p&gt; &lt;p&gt;We prioritized the following requirements when we designed JMC Agent:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Declarative: You can use XML configuration to define inject events.&lt;/li&gt; &lt;li&gt;Unobtrusive: You do not need to change the source code to implement JMC Agent.&lt;/li&gt; &lt;li&gt;Minimal footprint: You do not need to use reflection; you only issue event-related function calls.&lt;/li&gt; &lt;li&gt;Painless: You never have to shut down the JVM.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;(see below).&lt;br /&gt; Together, these features help to ensure that JMC Agent is safe to use and free of side-effects. It is perfect for production use when the source is not available, or it is not possible to shut down services or maintenance immediately. JMC Agent is especially applicable for situations that require creating custom instrumentation for the application.&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll look at how to use JMC Agent and the JMC Agent Plugin.&lt;/p&gt; &lt;h2&gt;Configuring the information to be recorded in events&lt;/h2&gt; &lt;p&gt;JMC Agent instrumentation applies to one or more functions. You can enable or disable the following information in the XML configuration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Function runtime characteristics: Start time, end time, and duration.&lt;/li&gt; &lt;li&gt;Function input and output: Parameters, return values, and exceptions (if any).&lt;/li&gt; &lt;li&gt;Event metadata: Label, description, thread ID, and call stack.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For expression evaluation, you can also use JMC Agent to enable or disable a limited subset of primary expressions. JMC Agent accepts all Java primary expressions except those containing method invocations, array accesses, or array or instance creation. This design is intended to enforce evaluation safety by static checking and to guarantee a constant-time overhead.&lt;/p&gt; &lt;h3&gt;The agent configuration file&lt;/h3&gt; &lt;p&gt;An &lt;i&gt;agent configuration file&lt;/i&gt; is an XML representation controlling how a JMC Agent instruments application bytecode:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The document root is a &lt;code&gt;&amp;#60;jfragent&amp;#62;&lt;/code&gt; element. As of current implementation, JMC Agent requires no namespace. A &lt;code&gt;&amp;#60;jfragent&amp;#62;&lt;/code&gt; element has no inner text and optionally encloses the &lt;code&gt;&amp;#60;config&amp;#62;&lt;/code&gt; and &lt;code&gt;&amp;#60;events&amp;#62;&lt;/code&gt; elements.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;&amp;#60;config&amp;#62;&lt;/code&gt;Â element contains global options to be applied across all events. Currently, the options are &lt;code&gt;&amp;#60;classprefix&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;allowconverter&amp;#62;&lt;/code&gt;, and &lt;code&gt;&amp;#60;allowtostring&amp;#62;&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;&amp;#60;events&amp;#62;&lt;/code&gt; elements enclose any number of &lt;code&gt;&amp;#60;event&amp;#62;&lt;/code&gt; elements, often called &lt;i&gt;probes&lt;/i&gt;. Each &lt;code&gt;&amp;#60;event&amp;#62;&lt;/code&gt; element contributes to a specific instrumentation point identified by &lt;code&gt;&amp;#60;class&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;method&amp;#62;&lt;/code&gt;, and the method &lt;code&gt;&amp;#60;descriptor&amp;#62;&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;&amp;#60;parameter&amp;#62;&lt;/code&gt; and &lt;code&gt;&amp;#60;field&amp;#62;&lt;/code&gt; elements record the values of the given parameters and expression accordingly.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the JMC Agent repository for an example that demonstrates &lt;a target="_blank" rel="nofollow" href="https://github.com/openjdk/jmc/blob/master/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml"&gt;common usages of the Java Fight Recorder Template&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Limitations of JMC Agent&lt;/h3&gt; &lt;p&gt;JMC Agent is in an early stage of development. At the time of this writing, we are seeking to resolve the following constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;JMC Agent is unable to work with synthetic classes.&lt;/li&gt; &lt;li&gt;It is also unable to access nestmates&amp;#8217; private fields.&lt;/li&gt; &lt;li&gt;Newly uploaded configurations only work with classes defined with &lt;code&gt;SystemClassLoader&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;JMC Agent currently uses &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/jdk/internal/misc/Unsafe.java"&gt;jdk.internal.misc.Unsafe&lt;/a&gt;,&lt;/code&gt;so you must open the module via &amp;#8211;add-opens (see below).&lt;/li&gt; &lt;li&gt;JMC Agent is currently not integrated with JDK Mission Control.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Instrumenting synthetic classes is arguably a &lt;i&gt;non-goal&lt;/i&gt;.Â  It is often hard to determine the exact names of the generated classes, making them hard to work with. In most cases, it does not make sense to instrument generated code.&lt;/p&gt; &lt;h2&gt;Introduction to the JMC Agent Plugin&lt;/h2&gt; &lt;p&gt;Thankfully, the JMC team developed JMC on the extensible and modular Eclipse Rich Client Platform. Therefore, instead of creating new client software, the JMC Agent Plugin adds agent-related functionality to JDK Mission Control.&lt;/p&gt; &lt;p&gt;In a nutshell, the JMC Agent Plugin is to JMC Agent what JDK Mission Control is to JDK Flight Recorder. That is, it controls JMC agents. While still under active development, the JMC Agent Plugin already helps navigate the JMC Agent lifecycle. You can use the plugin to start JMC Agent in a local JVM and then connect to it via the JMX API. Once connected, you can apply new or modified configurations. The JMC Agent Plugin also displays live information about the resulting transformations. You can also manage predefined configurations with the preset manager and create or edit them with a set of wizards.&lt;/p&gt; &lt;h3&gt;Live configurations&lt;/h3&gt; &lt;p&gt;The Live Configuration page was one of the first features that we added to the JMC Agent Plugin. You can use it to see the configuration currently applied to a JMC agent in a tabular format. As shown in Figure 1, the Live Config screen&amp;#8217;s left side lists all of the events instrumented by your JMC Agent instance. The right side contains each event&amp;#8217;s definition.&lt;/p&gt; &lt;div id="attachment_762737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/live-config-page.png"&gt;&lt;img aria-describedby="caption-attachment-762737" class="wp-image-762737" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/live-config-page-300x177.png" alt="The Live Config screen shows all of the events instrumented by a JMC Agent instance and each event's definition." width="640" height="378" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/live-config-page-300x177.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/live-config-page-768x454.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/live-config-page.png 924w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-762737" class="wp-caption-text"&gt;Figure 1: The JMC Agent Plugin&amp;#8217;s Live Configuration page.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: We will eventually support saving live configurations directly into the preset manager so that you can use them later.&lt;/p&gt; &lt;h3&gt;Editing wizards and the preset manager&lt;/h3&gt; &lt;p&gt;Editing an XML configuration file is difficult for beginners and tedious for experienced developers, as well as being error-prone. JMC Agent Plugin introduces editing wizards to save you the hassle. Together with the preset manager, editing wizards streamline creating, modifying, and managing local configuration templates, also known as &lt;i&gt;presets&lt;/i&gt;. Presets are especially useful when you don&amp;#8217;t need all of the configuration or event options that creating a full XML configuration would entail. Figure 2 shows the JMC Agent Plugin&amp;#8217;s preset editing wizards in the preset manager screen.&lt;/p&gt; &lt;div id="attachment_762747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/preset-and-event-wizards.png"&gt;&lt;img aria-describedby="caption-attachment-762747" class="wp-image-762747" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/preset-and-event-wizards-286x300.png" alt="The preset manager includes editing wizards for creating, modifying, and managing local configuration templates." width="640" height="671" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/preset-and-event-wizards-286x300.png 286w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/preset-and-event-wizards-768x805.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/preset-and-event-wizards.png 969w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-762747" class="wp-caption-text"&gt;Figure 2: Use the present manager&amp;#8217;s editing wizards to create, modify, and manage event configurations.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As an alternative to editing presets with wizards, you can use the built-in XML source editor to edit raw configuration files manually. While we don&amp;#8217;t have them yet, we&amp;#8217;ll eventually add inline error and warning indications to the XML source editor.&lt;/p&gt; &lt;p&gt;You&amp;#8217;ve been introduced to JMC Agent and the JMC Agent Plugin. We&amp;#8217;ll conclude with quick instructions for building and running these tools in your applications. Be sure to check out the demonstration video at the end of the article, as well.&lt;/p&gt; &lt;h2&gt;Build and run JMC Agent&lt;/h2&gt; &lt;p&gt;To build and run JMC Agent, you will need JDK 7 or later. To start, clone the JMC source tree from its GitHub repository:&lt;/p&gt; &lt;pre&gt;$ git clone &lt;a target="_blank" rel="nofollow" href="https://github.com/openjdk/jmc.git"&gt;https://github.com/openjdk/jmc.git&lt;/a&gt;&lt;/pre&gt; &lt;p&gt;Then, use Maven in the agent folder:&lt;/p&gt; &lt;pre&gt;$ mvn clean package&lt;/pre&gt; &lt;p&gt;After the build succeeds, you will find the agent JAR under the &lt;code&gt;target&lt;/code&gt; directory:&lt;/p&gt; &lt;pre&gt;$ ls target/org.openjdk.jmc.agent-*.jar&lt;/pre&gt; &lt;p&gt;To run your application with the agent statically attached, use the &lt;code&gt;-javaagent&lt;/code&gt; option to specify the agent&amp;#8217;s JAR path and optional configuration path:&lt;/p&gt; &lt;pre&gt;$ java -XX:+FlightRecordeÂ  -javaagent:&amp;#60;path-to-agent-jar&amp;#62;[=&amp;#60;path-to-agent-config&amp;#62;]Â  &amp;#60;rest-of-your-app-cmd&amp;#62; &lt;/pre&gt; &lt;h2&gt;Export the Unsafe class in JDK 9 and above&lt;/h2&gt; &lt;p&gt;When using JDK 9 and above, remember to export the &lt;code&gt;Unsafe&lt;/code&gt; class with the &lt;code&gt;--add-opens&lt;/code&gt; option for the agent to use:&lt;/p&gt; &lt;pre&gt;--add-opens java.base/jdk.internal.misc=ALL-UNNAMED&lt;/pre&gt; &lt;p&gt;For instance, to run the sample program that is included with JMC Agent, you would enter:&lt;/p&gt; &lt;pre&gt;$ java --add-opens java.base/jdk.internal.misc=ALL-UNNAMED -XX:+FlightRecorder -javaagent:target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar=target/test-classes/org/openjdk/jmc/agent/test/jfrprobes_template.xml -cp target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target/test-classes/ org.openjdk.jmc.agent.test.InstrumentMe &lt;/pre&gt; &lt;h2&gt;Build JMC with the JMC Agent Plugin enabled&lt;/h2&gt; &lt;p&gt;Until the JMC Agent Plugin is packaged with JDK Mission Control, you&amp;#8217;ll have to build it yourself. Before you attempt to follow these instructions, make sure that you have JDK 8 and Maven installed on your system.&lt;/p&gt; &lt;p&gt;First, clone the JMC source tree, if you haven&amp;#8217;t already done so:&lt;/p&gt; &lt;pre&gt;$ git clone &lt;a target="_blank" rel="nofollow" href="https://github.com/openjdk/jmc.git"&gt;https://github.com/openjdk/jmc.git&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Then, clone the JMC Agent Plugin source tree:&lt;/p&gt; &lt;pre&gt;$ git clone &lt;a target="_blank" rel="nofollow" href="https://github.com/rh-jmc-team/jmc-agent-plugin.git"&gt;https://github.com/rh-jmc-team/jmc-agent-plugin.git&lt;/a&gt; &lt;/pre&gt; &lt;p&gt;Copy the &lt;code&gt;agent plugin&lt;/code&gt; and feature folds from the JMC Agent Plugin source tree to JMC:&lt;/p&gt; &lt;pre&gt;$ cp -r jmc-agent-plugin/org.openjdk.jmc* jmc/application&lt;/pre&gt; &lt;p&gt;Apply the patch to JMC&amp;#8217;s root directory:&lt;/p&gt; &lt;pre&gt;$ cd jmc $ patch -p0 &amp;#60; ../jmc-agent-plugin/scripts/diff.patch &lt;/pre&gt; &lt;p&gt;Get third-party dependencies into a local &lt;code&gt;p2&lt;/code&gt; repository and make it available on &lt;code&gt;localhost&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cd jmc/third-party &amp;#38;&amp;#38; mvn p2:site &amp;#38;&amp;#38; mvn jetty:run&lt;/pre&gt; &lt;p&gt;Finally, in another terminal, compile and package JMC:&lt;/p&gt; &lt;pre&gt;$ cd jmc/core &amp;#38;&amp;#38; mvn install &amp;#38;&amp;#38; cd .. &amp;#38;&amp;#38; mvn package&lt;/pre&gt; &lt;h2&gt;Do more with JMC Agent: Video presentation and demo&lt;/h2&gt; &lt;p&gt;This article is based on &lt;a target="_blank" rel="nofollow" href="https://drive.google.com/file/d/1UEniwKtVI7Fh5lwj9QVmSr8kusaQ6mN-/view?usp=sharing"&gt;an internal presentation that we made to the Red Hat JDK Mission Control team&lt;/a&gt;. The demonstration starts at 8:50 minutes and was recently updated to reflect the latest development progress. You will find the demonstration code on the GitHub repository for the &lt;a target="_blank" rel="nofollow" href="https://github.com/tabjy/dining-philosophers-demo"&gt;Dining philosophers demo&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;JDK Flight Recorder is meant to be a production-time profiler. In this context, JMC Agent is a powerful addition to the JFR toolchain. As a developer, JMC Agent lets you instrument your runtime applications without needing to shut down the JVM. You do not need to refactor and recompile your code to redeploy the application.&lt;/p&gt; &lt;p&gt;There are, of course, alternatives to using JMC Agent. For example, &lt;a target="_blank" rel="nofollow" href="https://byteman.jboss.org/"&gt;Byteman&lt;/a&gt; is a powerful tool that you can configure to inject similar instrumentation into a running application. However, JMC Agent&amp;#8217;s dedication to JFR event instrumentation makes it more suitable and easier to use for problems that require custom JFR events. Although it is a work in progress, adding the JMC Agent Plugin to JDK Mission Control further elevates the ease-of-use factor in this toolchain.&lt;/p&gt; &lt;p&gt;Both JMC Agent and the JMC Agent Plugin are currently under development, with new features being planned and implemented constantly. If you would like to contribute to this project or have ideas, suggestions, or feedback, you can join the discussion on the &lt;a target="_blank" rel="nofollow" href="https://mail.openjdk.java.net/mailman/listinfo/jmc-dev"&gt;JMC-dev mailing list&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#38;linkname=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fcollect-jdk-flight-recorder-events-at-runtime-with-jmc-agent%2F&amp;#038;title=Collect%20JDK%20Flight%20Recorder%20events%20at%20runtime%20with%20JMC%20Agent" data-a2a-url="https://developers.redhat.com/blog/2020/10/29/collect-jdk-flight-recorder-events-at-runtime-with-jmc-agent/" data-a2a-title="Collect JDK Flight Recorder events at runtime with JMC Agent"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/29/collect-jdk-flight-recorder-events-at-runtime-with-jmc-agent/"&gt;Collect JDK Flight Recorder events at runtime with JMC Agent&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JHXybdDTNGo" height="1" width="1" alt=""/&gt;</content><summary>JDK Flight Recorder, or JFR, is an event-based production environment profiler available from OpenJDK 8u272 forward. Being a HotSpot-native feature, JDK Flight Recorder performs with extremely low overhead in terms of how it uses both space and time. While JDK Flight Recorder collects basic Java runtime information by default, it is also possible to use JFRâs Event API to collect custom events. De...</summary><dc:creator>mtorre</dc:creator><dc:date>2020-10-29T07:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/29/collect-jdk-flight-recorder-events-at-runtime-with-jmc-agent/</feedburner:origLink></entry><entry><title>New custom metrics and air gapped installation in Red Hat 3scale API Management 2.9</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tYewe2Moegw/" /><category term="api gateway" scheme="searchisko:content:tags" /><category term="API-Management" scheme="searchisko:content:tags" /><category term="cloud integration" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="OpenShift Operator" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Satya Jayanti</name></author><id>searchisko:content:id:jbossorg_blog-new_custom_metrics_and_air_gapped_installation_in_red_hat_3scale_api_management_2_9</id><updated>2020-10-29T07:00:00Z</updated><published>2020-10-29T07:00:00Z</published><content type="html">&lt;p&gt;We continue to update the &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/integration"&gt;Red Hat Integration&lt;/a&gt; product portfolio to provide a better operational and development experience for modern &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;cloud&lt;/a&gt;&amp;#8211; and &lt;a href="https://developers.redhat.com/topics/containers"&gt;container&lt;/a&gt;-native applications. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_integration/2020-q3/html/release_notes_for_red_hat_integration_2020-q3/"&gt;Red Hat Integration 2020-Q3 release&lt;/a&gt; includes &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/release_notes_for_red_hat_3scale_api_management_2.9_on-premises/index"&gt;Red Hat 3scale API Management 2.9&lt;/a&gt;, which provides new features and capabilities for 3scale. Among other features, we have updated the &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;3scale API Management&lt;/a&gt; and Gateway Operators.&lt;/p&gt; &lt;p&gt;This article introduces the Red Hat 3scale API Management 2.9 release highlights, including air-gapped installation for 3scale on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; and new APIcast policies for custom metrics and upstream mutual Transport Layer Security (TLS).&lt;/p&gt; &lt;p&gt;&lt;span id="more-802667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the end of the article for registration information for the Red Hat-sponsored &lt;a target="_blank" rel="nofollow" href="https://www.apidays.co/london"&gt;APIDays LIVE London: The Road to Embedded Finance, Banking, and Insurance with APIs&lt;/a&gt;. Registration is free and includes two recorded Red Hat sessions.&lt;/p&gt; &lt;h2&gt;Air gapped installation on OpenShift&lt;/h2&gt; &lt;p&gt;The 3scale &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator&lt;/a&gt; now fully supports air gapped installation for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/installing_3scale/index#installing-configuring-threescale-operator-using-olm"&gt;3scale API Management on OpenShift&lt;/a&gt;. &lt;i&gt;Air gapped&lt;/i&gt; or restricted networks are isolated from the Internet and physically isolated from any other network. Secure environments such as government agencies and financial institutions typically require an air gapped installation for Red Hat Integration on OpenShift. This type of installation differs from a regular installation in three ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;OpenShift software channels and repositories are not available from Red Hatâs content distribution network.&lt;/li&gt; &lt;li&gt;You cannot pull OpenShift images directly from Red Hatâs container registry.&lt;/li&gt; &lt;li&gt;You cannot connect to the Maven mirrors hosted by Red Hat.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To allow for installation on restricted networks, a 3scale Operator must list all container images that the Operator requires in the &lt;code&gt;relatedImages&lt;/code&gt; parameter of its &lt;code&gt;ClusterServiceVersion&lt;/code&gt; (CSV) object. The Operator uses a digest (Secure Hash Algorithm) and not a tag to reference the specified images.&lt;/p&gt; &lt;h2&gt;APIcast Gateway&amp;#8217;s new Custom Metrics policy&lt;/h2&gt; &lt;p&gt;APIcast Gateway&amp;#8217;s new &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/administering_the_api_gateway/index#custom-metrics"&gt;Custom Metrics policy&lt;/a&gt; lets you add metrics beyond hits. You can use this policy to add metrics on upstream response code or headers after a response is received from the back-end API.&lt;/p&gt; &lt;p&gt;Use cases include tracking HTTP 2xx responses or HTTP 4xx or 5xx responses from the back end. You would use the HTTP 2xx custom metric for application plan rate limits or pricing rules where you only wanted to track successful response codes. You would use a 4xx or 5xx custom metric to report multiple error codes from an upstream API in the &lt;b&gt;Analytics&lt;/b&gt; section of your 3scale admin portal. Another common use case is a custom metric based on the &lt;code&gt;content-length&lt;/code&gt; header response sent from the back-end API. You could use this metric for application plans to track the payload size rather than hits based on rate limits or billing.&lt;/p&gt; &lt;p&gt;Custom metrics are based on the back-end API&amp;#8217;s response, so consider these factors when implementing the new policy:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Before you can use a custom metric, you must create the metric definition using the Admin Portal or Admin API.&lt;/li&gt; &lt;li&gt;When authentication happens before a request is sent to the upstream API, you must make a second call to the back-end API Manager to report the new metrics.&lt;/li&gt; &lt;li&gt;The Custom Metrics policy does not work with the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/apicast_policies#batcher"&gt;3scale Batcher&lt;/a&gt; policy.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Watch the video&lt;/h2&gt; &lt;p&gt;See a quick, live demonstration of creating custom metrics with the new APIcast Custom Metrics policy.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/QOV4OFTTnTo?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;More new features in 3scale Management API 2.9&lt;/h2&gt; &lt;p&gt;Additional new features in the 3scale Management API 2.9 release include the new &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/administering_the_api_gateway/index#upstream-mtls"&gt;Upstream Mutual TLS policy&lt;/a&gt;, a new configuration for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/admin_portal_guide/index#yaml_configuration_for_currencies"&gt;billing currencies&lt;/a&gt;, and analytics data for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/admin_portal_guide/index#checking_analytics_for_backends"&gt;API back ends&lt;/a&gt;. See the release documentation for other &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/release_notes_for_red_hat_3scale_api_management_2.9_on-premises/index#minor_features"&gt;minor feature updates&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The 3scale Management API 2.9 release also features the new 3scale Operator, which brings &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html-single/release_notes_for_red_hat_3scale_api_management_2.9_on-premises/index#technology_preview_features"&gt;new functionality&lt;/a&gt; for backup-and-restore, custom resources, and metering and monitoring resources with Prometheus and Grafana. The 3scale Management API 2.9 release supports the OpenAPI 3.0 specification on ActiveDocs.&lt;/p&gt; &lt;h2&gt;APIDays London: Watch now&lt;/h2&gt; &lt;p&gt;APIDays is the leading industry technology and business series of conferences for APIs and the programmable economy. On October 27 and 28, 2020, Red Hat sponsored &lt;a target="_blank" rel="nofollow" href="https://www.apidays.co/london"&gt;APIDays LIVE London: The Road to Embedded Finance, Banking, and Insurance with APIs&lt;/a&gt;.â This virtual event hosts technical and business leaders from retail and investment banking, insurance, and finance, explaining how they are using APIs to create new business value.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.apidays.co/london/"&gt;Registration is free&lt;/a&gt; to view the recorded sessions from APIDays LIVE London, including the two Red Hat sessions this year:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Tuesday, October 27, 2020, at 12:30 PM GMT&lt;/strong&gt;: &lt;em&gt;Why your digital identity is critical in the post-COVID world&lt;/em&gt;, by EMEA Senior Consultant Luca Ferrari.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Wednesday, October 28, 2020, at 10:50 AM GMT&lt;/b&gt;: &lt;i&gt;A cloud-native approach for open banking in action&lt;/i&gt;, by FSI Marketing Manager Rafael Marins.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both sessions are recorded and can be viewed by &lt;a target="_blank" rel="nofollow" href="https://www.apidays.co/london/"&gt;registering on the APIDays London event page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#38;linkname=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F29%2Fnew-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9%2F&amp;#038;title=New%20custom%20metrics%20and%20air%20gapped%20installation%20in%20Red%20Hat%203scale%20API%20Management%202.9" data-a2a-url="https://developers.redhat.com/blog/2020/10/29/new-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9/" data-a2a-title="New custom metrics and air gapped installation in Red Hat 3scale API Management 2.9"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/29/new-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9/"&gt;New custom metrics and air gapped installation in Red Hat 3scale API Management 2.9&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tYewe2Moegw" height="1" width="1" alt=""/&gt;</content><summary>We continue to update the Red Hat Integration product portfolio to provide a better operational and development experience for modern cloudâ and container-native applications. The Red Hat Integration 2020-Q3 release includes Red Hat 3scale API Management 2.9, which provides new features and capabilities for 3scale. Among other features, we have updated the 3scale API Management and Gateway Operato...</summary><dc:creator>Satya Jayanti</dc:creator><dc:date>2020-10-29T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/29/new-custom-metrics-and-air-gapped-installation-in-red-hat-3scale-api-management-2-9/</feedburner:origLink></entry><entry><title>CodeReady Containers - Exploring a Node.js Front End with Decision Management Back End</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YapLVUh6zrw/codeready-containers-exploring-nodejs-with-decision-manager.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_exploring_a_node_js_front_end_with_decision_management_back_end</id><updated>2020-10-29T13:45:07Z</updated><published>2020-10-29T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" trbidi="on"&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-PmtM37sJalM/X5k6Q_f_JqI/AAAAAAAAxm8/ME1-YOf8WZcAuk58v1CgTGOJ_YlhWTXzACNcBGAsYHQ/s2048/the-new-york-public-library-w8uU35aGU6A-unsplash.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="decision management" border="0" data-original-height="2048" data-original-width="1970" height="320" src="https://1.bp.blogspot.com/-PmtM37sJalM/X5k6Q_f_JqI/AAAAAAAAxm8/ME1-YOf8WZcAuk58v1CgTGOJ_YlhWTXzACNcBGAsYHQ/w308-h320/the-new-york-public-library-w8uU35aGU6A-unsplash.jpg" width="308" /&gt;&lt;/a&gt;&lt;/div&gt;As a cloud-native developer you've&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" style="color: #4d469c; text-decoration-line: none;" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt;&amp;nbsp;development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;This article targets getting you started on your new&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" style="color: #4d469c; text-decoration-line: none;" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt;&amp;nbsp;by putting the latest process automation developer tooling at your disposal together with a real project for you to deploy and explore.&amp;nbsp; Even better, if you need more help getting started, we'll provide a free online workshop where you can build this project yourself.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;Let's get started right now exploring the development, deployment, and running of a Node front end working together with a decision management back end. This scenario is wrapped up in a &lt;a href="https://gitlab.com/redhatdemocentral/crc-quick-loan-bank-demo" target="_blank"&gt;Quick Loan Bank story&lt;/a&gt; where you're providing a loan application platform for the bank.&lt;/div&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;a name="more"&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130" style="margin: 0px; position: relative;"&gt;Decision management developer tooling&lt;/h3&gt;&lt;/div&gt;&lt;div dir="ltr" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" trbidi="on"&gt;&lt;p data-sourcepos="3:1-6:73" dir="auto"&gt;This demo project showcases the tooling available in Red Hat Decision Manager implementing complex decision logic which can be exposed as a decision service.&amp;nbsp;&lt;/p&gt;&lt;p data-sourcepos="3:1-6:73" dir="auto"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-__OYqqJ8ZSQ/X5k8t-W54BI/AAAAAAAAxnM/Wya9Yd2brkAMPtXwSsI3debvnOoy0gd9wCNcBGAsYHQ/s2576/crc-quick-loan-bank-demo.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="quick loan bank demo" border="0" data-original-height="1220" data-original-width="2576" height="152" src="https://1.bp.blogspot.com/-__OYqqJ8ZSQ/X5k8t-W54BI/AAAAAAAAxnM/Wya9Yd2brkAMPtXwSsI3debvnOoy0gd9wCNcBGAsYHQ/w320-h152/crc-quick-loan-bank-demo.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The &lt;a href="https://gitlab.com/redhatdemocentral/crc-quick-loan-bank-demo" target="_blank"&gt;Quick Loan Bank in this demo&lt;/a&gt; uses technical rules, decision tables, guided rules with a Domain Specific Language, and Excel decision tables to define its loan calculation and approval system. You will be given examples of calling the rules as if using them from an application through the RestAPI that is exposed by the server.&amp;nbsp;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p data-sourcepos="3:1-6:73" dir="auto"&gt;Furthermore, this demo provides a Node.js client application written in AngularJS and PatternFly that showcases how web applications can consume decision services deployed on the decision server.&lt;/p&gt;&lt;p data-sourcepos="13:1-15:23" dir="auto"&gt;This demo installs the Red Hat Decision Manager and a Node.js front end application on OpenShift Container Platform on your local machine. It's leveraging CodeReady Containers and delivers a fully functioning container-native development experience.&lt;/p&gt;&lt;/div&gt;&lt;div dir="ltr" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" trbidi="on"&gt;&lt;h3 data-sourcepos="1:1-3:130" style="margin: 0px; position: relative;"&gt;Install on CodeReady Containers&lt;/h3&gt;&lt;div&gt;&lt;p data-sourcepos="20:1-21:82" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform (OCP); use your own existing installation or to install on CodeReady Containers which provides you with a local OCP cluster.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-vNos9E-a7vg/X5k5sZEPcvI/AAAAAAAAxmg/jCdLuUQrskoOhC0aIWFMTWBMaB09vBpCwCNcBGAsYHQ/s1551/rhdm-build-app.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="decision management" border="0" data-original-height="1054" data-original-width="1551" height="217" src="https://1.bp.blogspot.com/-vNos9E-a7vg/X5k5sZEPcvI/AAAAAAAAxmg/jCdLuUQrskoOhC0aIWFMTWBMaB09vBpCwCNcBGAsYHQ/w320-h217/rhdm-build-app.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;ol data-sourcepos="23:1-24:0" dir="auto"&gt;&lt;li data-sourcepos="23:1-24:0"&gt;Ensure you have a CodeReady Containers installation:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="25:3-28:0" dir="auto"&gt;&lt;li data-sourcepos="25:3-26:0"&gt;&lt;p data-sourcepos="25:5-25:136"&gt;your own CodeReady Containers installation, if using this you just need to set the variables to point to it in init.{sh|bat} script.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="27:3-28:0"&gt;&lt;p data-sourcepos="27:5-27:94"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="29:1-32:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="29:1-30:0"&gt;&lt;p data-sourcepos="29:4-29:150"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/crc-quick-loan-bank-demo/-/archive/master/crc-quick-loan-bank-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="31:1-32:0"&gt;&lt;p data-sourcepos="31:4-31:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges:&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext" v-pre="true"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using the CodeReady Containers installation, just ensure a correctly set cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address for the HOST_IP variable at the top of the init.{sh|bat} files, for example:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now just run the script without arguments and it picks up that hostname as follows:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-sourcepos="44:1-44:140" dir="auto"&gt;Now log in to Red Hat Decision Manager to start developing containerized process automation projects (the address will be generated by OCP):&lt;/p&gt;&lt;ul data-sourcepos="46:3-47:0" dir="auto"&gt;&lt;li data-sourcepos="46:3-47:0"&gt;CodeReady Container example: https://crc-quick-loan-bank-demo-appdev-in-cloud.apps-crc.testing ( u:erics / p:redhatdm1! )&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 data-sourcepos="50:1-52:139" dir="auto"&gt;&lt;a aria-hidden="true" class="anchor" href="#running-the-demo" id="user-content-running-the-demo"&gt;&lt;/a&gt;Testing API access&lt;/h2&gt;&lt;div&gt;Prior to running the Node.js front-end application, let's explore the API and confirm that it's working:&lt;/div&gt;&lt;p data-sourcepos="48:1-48:195" dir="auto"&gt;&lt;/p&gt;&lt;ol data-sourcepos="52:1-126:0" dir="auto"&gt;&lt;li data-sourcepos="52:1-54:0"&gt;&lt;p data-sourcepos="52:4-53:32"&gt;Log in to the decision manager business central dashboard at: &lt;a href="http://insecure-quick-loan-bank-rhdmcentr-appdev-in-cloud.apps-crc.testing" rel="nofollow noreferrer noopener" target="_blank"&gt;http://insecure-quick-loan-bank-rhdmcentr-appdev-in-cloud.apps-crc.testing&lt;/a&gt;with u:erics and p:redhatdm1!&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="55:1-56:0"&gt;&lt;p data-sourcepos="55:4-55:85"&gt;Click on the "loan-application" project to open the Loan Application Demo project.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="57:1-59:0"&gt;&lt;p data-sourcepos="57:4-58:26"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-v0cDdJoHqFs/X5k51AmXHQI/AAAAAAAAxmk/ltTcz3SIjNIDnSGHSXkQUxs-YTBluF_uQCNcBGAsYHQ/s1552/rhdm-ocp.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="decision management" border="0" data-original-height="592" data-original-width="1552" height="122" src="https://1.bp.blogspot.com/-v0cDdJoHqFs/X5k51AmXHQI/AAAAAAAAxmk/ltTcz3SIjNIDnSGHSXkQUxs-YTBluF_uQCNcBGAsYHQ/w320-h122/rhdm-ocp.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;The project has simple data model (Loan &amp;amp; Applicant) and single decision table (loan-application) which contains the loan approval rule set.&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="60:1-61:0"&gt;&lt;p data-sourcepos="60:4-60:106"&gt;Build and deploy version 1.0 of the project. Click on the "Build and Deploy" in the upper right corner.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="62:1-64:0"&gt;&lt;p data-sourcepos="62:4-63:19"&gt;Go to "Menu -&amp;gt; Deploy -&amp;gt; Execution Servers" repository to see the 'loan-application_1.0' KIE Container deployed on the Decision Server.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="65:1-67:0"&gt;&lt;p data-sourcepos="65:4-66:86"&gt;The decision server provides a Swagger UI that documents the full RESTful interface exposed by the server at: &lt;a href="http://insecure-quick-loan-bank-kieserver-appdev-in-cloud.apps-crc.testing/docs" rel="nofollow noreferrer noopener" target="_blank"&gt;http://insecure-quick-loan-bank-kieserver-appdev-in-cloud.apps-crc.testing/docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="68:1-75:0"&gt;&lt;p data-sourcepos="68:4-68:21"&gt;In the Swagger UI:&lt;/p&gt;&lt;ul data-sourcepos="69:4-75:0"&gt;&lt;li data-sourcepos="69:4-69:48"&gt;navigate to "KIE Server and KIE containers"&lt;/li&gt;&lt;li data-sourcepos="70:4-70:65"&gt;expand the "GET" operation for resource "/server/containers"&lt;/li&gt;&lt;li data-sourcepos="71:4-71:26"&gt;click on "Try it out"&lt;/li&gt;&lt;li data-sourcepos="72:4-72:54"&gt;leave the parameters blank and click on "Execute"&lt;/li&gt;&lt;li data-sourcepos="73:4-73:73"&gt;when asked for credentials use: Username: erics, Password: redhatdm!&lt;/li&gt;&lt;li data-sourcepos="74:4-75:0"&gt;observe the response, which lists the KIE Containers deployed on the server and their status (STARTED, STOPPED).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li data-sourcepos="76:1-126:0"&gt;&lt;p data-sourcepos="76:4-76:91"&gt;We can use the Swagger UI to test our Loan Approval Decision Service. In the Swagger UI:&lt;/p&gt;&lt;ul data-sourcepos="77:4-83:128"&gt;&lt;li data-sourcepos="77:4-77:37"&gt;navigate to "KIE session assets"&lt;/li&gt;&lt;li data-sourcepos="78:4-78:81"&gt;expand the "POST" operation for resource "/server/containers/instances/{id}"&lt;/li&gt;&lt;li data-sourcepos="79:4-79:26"&gt;click on "Try it out"&lt;/li&gt;&lt;li data-sourcepos="80:4-80:119"&gt;set the "id" parameter to the name of the KIE Container that hosts our rules, in this case &lt;code&gt;loan-application_1.0&lt;/code&gt;.&lt;/li&gt;&lt;li data-sourcepos="81:4-81:56"&gt;set "Parameter content type" to &lt;code&gt;application/json&lt;/code&gt;.&lt;/li&gt;&lt;li data-sourcepos="82:4-82:54"&gt;set "Response content type" to &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;&lt;li data-sourcepos="83:4-83:128"&gt;use the following request as the "body" parameter. Note that the &lt;code&gt;Loan&lt;/code&gt; object has its &lt;code&gt;approved&lt;/code&gt; attribute set to &lt;code&gt;false&lt;/code&gt;:&lt;/li&gt;&lt;/ul&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext" v-pre="true"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; "lookup": "default-stateless-ksession",&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; "commands": [&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; "insert": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; "object": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; "com.redhat.demo.qlb.loan_application.model.Applicant": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; "creditScore":410,&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC9" lang="plaintext"&gt; "name":"Billy Bob",&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC10" lang="plaintext"&gt; "age":40,&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC11" lang="plaintext"&gt; "yearlyIncome":90000&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC12" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC13" lang="plaintext"&gt; },&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC14" lang="plaintext"&gt; "out-identifier":"applicant"&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC15" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC16" lang="plaintext"&gt; },&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC17" lang="plaintext"&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC18" lang="plaintext"&gt; "insert": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC19" lang="plaintext"&gt; "object": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC20" lang="plaintext"&gt; "com.redhat.demo.qlb.loan_application.model.Loan": {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC21" lang="plaintext"&gt; "amount":250000,&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC22" lang="plaintext"&gt; "duration":10&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC23" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC24" lang="plaintext"&gt; },&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC25" lang="plaintext"&gt; "out-identifier":"loan"&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC26" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC27" lang="plaintext"&gt; },&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC28" lang="plaintext"&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC29" lang="plaintext"&gt; "start-process" : {&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC30" lang="plaintext"&gt; "processId" : "loan-application.loan-application-decision-flow",&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC31" lang="plaintext"&gt; "parameter" : [ ],&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC32" lang="plaintext"&gt; "out-identifier" : null&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC33" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC34" lang="plaintext"&gt; }&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC35" lang="plaintext"&gt; ]&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC36" lang="plaintext"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;ul data-sourcepos="122:4-126:0"&gt;&lt;li data-sourcepos="122:4-126:0"&gt;observe the result. The Quick Loan Bank rules have fired and determined that, based on the credit score of the application, and the amount of the loan, the loan can be approved. The &lt;code&gt;approved&lt;/code&gt; attribute of the &lt;code&gt;Loan&lt;/code&gt; has been set to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 data-sourcepos="127:1-129:139" dir="auto"&gt;&lt;a aria-hidden="true" class="anchor" href="#running-demo-with-frontend-ui" id="user-content-running-demo-with-frontend-ui"&gt;&lt;/a&gt;Exploring the front end UI&lt;/h2&gt;&lt;div&gt;During the automated installation we've deployed this front end project into a container and configured it to access the KIE server back end, so let's give it a go:&lt;/div&gt;&lt;ol data-sourcepos="129:1-159:0" dir="auto"&gt;&lt;li data-sourcepos="129:1-131:0"&gt;&lt;p data-sourcepos="129:4-130:32"&gt;Log in to the decision manager business central dashboard at: &lt;a href="http://insecure-quick-loan-bank-rhdmcentr-appdev-in-cloud.apps-crc.testing" rel="nofollow noreferrer noopener" target="_blank"&gt;http://insecure-quick-loan-bank-rhdmcentr-appdev-in-cloud.apps-crc.testing&lt;/a&gt;with u:erics and p:redhatdm1!&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="132:1-133:0"&gt;&lt;p data-sourcepos="132:4-132:85"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-jqUbYnYAFE0/X5k59w0yFII/AAAAAAAAxms/2F3eMPx8lFA4IpOh4MH0LPMj-AwipxYzACNcBGAsYHQ/s1731/rhdm-ocp-app.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="node front end" border="0" data-original-height="696" data-original-width="1731" height="129" src="https://1.bp.blogspot.com/-jqUbYnYAFE0/X5k59w0yFII/AAAAAAAAxms/2F3eMPx8lFA4IpOh4MH0LPMj-AwipxYzACNcBGAsYHQ/w320-h129/rhdm-ocp-app.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Click on the "loan-application" project to open the Loan Application Demo project.&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="134:1-136:0"&gt;&lt;p data-sourcepos="134:4-135:26"&gt;The project has simple data model (Loan &amp;amp; Applicant) and single decision table (loan-application) which contains the loan approval rule set.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="137:1-138:0"&gt;&lt;p data-sourcepos="137:4-137:106"&gt;Build and deploy version 1.0 of the project. Click on the "Build and Deploy" in the upper right corner.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="139:1-141:0"&gt;&lt;p data-sourcepos="139:4-140:19"&gt;Go to "Menu -&amp;gt; Deploy -&amp;gt; Execution Servers" repository to see the 'loan-application_1.0' KIE Container deployed on the Decision Server.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="142:1-143:0"&gt;&lt;p data-sourcepos="142:4-142:117"&gt;Open the deployed Quick Loan Bank application form: &lt;a href="http://qlb-client-application-appdev-in-cloud.apps-crc.testing" rel="nofollow noreferrer noopener" target="_blank"&gt;http://qlb-client-application-appdev-in-cloud.apps-crc.testing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="144:1-159:0"&gt;&lt;p data-sourcepos="144:4-144:57"&gt;Fill in the form as follows and submit for evaluation:&lt;/p&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext" v-pre="true"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-V0kMcbQ-n6E/X5k6CTxVpUI/AAAAAAAAxmw/hhhA4Wi0tjop-jnutgw230zmZXv_XUjtQCNcBGAsYHQ/s1735/rhdm-ocp-app-reject.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="node front end" border="0" data-original-height="635" data-original-width="1735" height="117" src="https://1.bp.blogspot.com/-V0kMcbQ-n6E/X5k6CTxVpUI/AAAAAAAAxmw/hhhA4Wi0tjop-jnutgw230zmZXv_XUjtQCNcBGAsYHQ/w320-h117/rhdm-ocp-app-reject.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt;Name: Eric D. Schabell&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt;Age: 40&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt;Credit Score: 410&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt;Yearly Income: 90000&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC9" lang="plaintext"&gt;Amount: 250000&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC10" lang="plaintext"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC11" lang="plaintext"&gt;Duration: 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-sourcepos="160:1-161:23" dir="auto"&gt;Try to enter different values to see a loan get disapproved, for example, change above applicant age from 40 to 80 for rejection based on age.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p data-sourcepos="160:1-161:23" dir="auto"&gt;This concludes the tour of our Quick Loan Bank example with a Node.js front end and decision management back end. Looking for more content to get started with Red Hat Decision Manager? Try one of these &lt;a href="https://bpmworkshop.gitlab.io/index-rhdm.html" rel="nofollow noreferrer noopener" target="_blank"&gt;online workshops&lt;/a&gt; to build more projects from scratch.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jpaK-Wivtsw:g2ewkdIHdJc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jpaK-Wivtsw:g2ewkdIHdJc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jpaK-Wivtsw:g2ewkdIHdJc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=jpaK-Wivtsw:g2ewkdIHdJc:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=jpaK-Wivtsw:g2ewkdIHdJc:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/jpaK-Wivtsw" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YapLVUh6zrw" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you'veÂ installed an OpenShift Container PlatformÂ development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-29T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/jpaK-Wivtsw/codeready-containers-exploring-nodejs-with-decision-manager.html</feedburner:origLink></entry><entry><title>Secure your Kubernetes secrets with smart cards and libssh</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xubRt-0X_o4/" /><category term="cryptography" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="hardware token" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="libssh" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="PKCS #11" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>sahana</name></author><id>searchisko:content:id:jbossorg_blog-secure_your_kubernetes_secrets_with_smart_cards_and_libssh</id><updated>2020-10-28T07:00:27Z</updated><published>2020-10-28T07:00:27Z</published><content type="html">&lt;p&gt;In computer security, software implementations of cryptographic algorithms are vulnerable to &lt;em&gt;side-channel attacks&lt;/em&gt;. This type of attack seeks to glean information from the computer system rather than from the program that it is running. As examples, Spectre and Meltdown are both side-channel attacks that target the microarchitecture of modern processors. Microarchitecture attacks are only a subset of all side-channel attacks. There are many others.&lt;/p&gt; &lt;p&gt;An attacker who is able to access unauthorized regions in memory can discover private or sensitive information, including authentication secrets. A question that naturally follows is, &amp;#8220;Where can I safely store my secrets?&amp;#8221;&lt;/p&gt; &lt;p&gt;One way to protect your &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; secrets is to store them in a hardware token. A hardware token physically separates your secret key from the host machine and the applications that it is running. You can use secret keys stored on smart cards or cryptographic tokens to authenticate to server-side applications.&lt;/p&gt; &lt;p&gt;This article introduces Public Key Cryptography Standard #11 (&lt;a target="_blank" rel="nofollow" href="http://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/os/pkcs11-base-v2.40-os.html"&gt;PKCS #11&lt;/a&gt;), which you can use to uniquely identify objects stored in tokens. I show you how to build and use libssh with support for PKCS #11 and how to use &lt;code&gt;curl&lt;/code&gt; to store and retrieve tokens through the secure shell (SSH) protocol.&lt;/p&gt; &lt;h2&gt;The PKCS #11 interface&lt;/h2&gt; &lt;p&gt;PKCS #11 provides an application programming interface (API) for interacting with devices like smart cards, which store private cryptographic information. Such cryptographic devices are known as &lt;i&gt;tokens&lt;/i&gt;. PKCS #11 uses a uniform resource identifier (URI) to uniquely identify objects stored in tokens. The PKCS #11 URI is defined by the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc7512"&gt;RFC 7512: PKCS #11 URI Scheme&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;pkcs11:&lt;strong&gt;token&lt;/strong&gt;=my-token;&lt;strong&gt;object&lt;/strong&gt;=my-object;&lt;strong&gt;type&lt;/strong&gt;=private?&lt;strong&gt;pin-&lt;/strong&gt;&lt;strong&gt;value&lt;/strong&gt;=1234 &lt;/pre&gt; &lt;p&gt;The URI format is defined as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Every PKCS #11 URI begins with the scheme name, &amp;#8220;&lt;i&gt;pkcs11:&amp;#8221;&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;The scheme name is followed by attribute-value pairs, which are separated by a colon.&lt;/li&gt; &lt;li&gt;The parameter &lt;i&gt;token&lt;/i&gt; represents the name of the device or smart card.&lt;/li&gt; &lt;li&gt;The stored-object name in the token is identified by the parameter &lt;i&gt;object&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;The object itself can be of type private, public, certificate, data, or a secret key.&lt;/li&gt; &lt;li&gt;The parameter &lt;i&gt;pin-value&lt;/i&gt; stores the personal identification number that is required to access the private key.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The token description provides authenticating applications with a logical view of the hardware device storing the cryptographic token.&lt;/p&gt; &lt;h2&gt;Smart card support in libssh&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://api.libssh.org/stable/libssh_tutorial.html"&gt;SSH library, or libssh&lt;/a&gt;, is a library-based implementation of the Secure Shell (SSH) protocol. It supports using PKCS #11 URIs to authenticate users to a remote server. Currently, PKCS #11 URI support is only available in the &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/libssh/libssh-mirror"&gt;libssh main branch&lt;/a&gt; and not in Fedora. The next libssh release (0.9.x) will include PKCS #11 URI support, which will then be available in Fedora.&lt;/p&gt; &lt;h2&gt;Build and use libssh with PKCS #11&lt;/h2&gt; &lt;p&gt;The SSH library uses &lt;a target="_blank" rel="nofollow" href="https://www.openssl.org"&gt;OpenSSL&lt;/a&gt; (Secure Socket Layer) as its cryptographic back end. OpenSSL defines an abstract layer called the &lt;i&gt;engine&lt;/i&gt;, which implements cryptographic primitives. It provides cryptographic functionality, called &lt;i&gt;key-loading&lt;/i&gt;, which we use to load private and public keys from smart cards. The &lt;code&gt;engine_pkcs11&lt;/code&gt; module acts as an interface between the PKCS #11 modules and OpenSSL.&lt;/p&gt; &lt;p&gt;To build and use libssh with support for PKCS #11, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Enable the &lt;code&gt;cmake&lt;/code&gt; option: &lt;code&gt;$ cmake -DWITH_PKCS11_URI=ON&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Build with OpenSSL.&lt;/li&gt; &lt;li&gt;Install and configure &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenSC/libp11"&gt;engine_pkcs11&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Plug-in a working smart card or configure &lt;a target="_blank" rel="nofollow" href="https://www.opendnssec.org/softhsm"&gt;SoftHSM&lt;/a&gt;, a cryptographic store that is accessible through PKCS #11.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The legacy functions in libssh are extended to automatically detect if a provided filename is a file path or a PKCS #11 URI. You can replace the paths to files containing keys and certificates with PKCS #11 URIs. If a PKCS #11 URI is detected, the engine is loaded and initialized. The engine loads the private or public key corresponding to the PKCS #11 URI from the PKCS #11 device.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you wish to authenticate using public keys on your own, follow the steps described in the &amp;#8220;Authentication with public keys&amp;#8221; section of the libssh documentation (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://api.libssh.org/stable/libssh_tutor_authentication.html"&gt;Chapter 2: A deeper insight on authentication&lt;/a&gt;&lt;/i&gt;).&lt;/p&gt; &lt;h2&gt;Public-key authentication with PKCS #11 and libssh&lt;/h2&gt; &lt;p&gt;Here is a minimalistic example of public-key authentication using PKCS #11 URIs:&lt;/p&gt; &lt;pre&gt;int authenticate_pkcs11_URI(ssh_session session) { int rc; char priv_uri[1042] = âpkcs11:token=my-token;object=my-object;type=private?pin-value=1234â; rc = ssh_options_set(session, SSH_OPTIONS_IDENTITY, priv_uri); assert_int_equal(rc, SSH_OK) rc = ssh_userauth_publickey_auto(session, NULL, NULL); if (rc == SSH_AUTH_ERROR) { fprintf(stderr, âAuthentication with PKCS #11 URIs failed: %s\nâ, ssh_get_error(session)); return SSH_AUTH_ERROR; } return rc; } &lt;/pre&gt; &lt;p&gt;Instead of specifying the path where the private-key file was stored, all you need to do is to set the PKCS #11 URI using &lt;code&gt;SSH_OPTIONS_IDENTITY&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Using PKCS #11 smart cards with curl&lt;/h2&gt; &lt;p&gt;Applications such as &lt;code&gt;curl&lt;/code&gt; use &lt;code&gt;libssh&lt;/code&gt; as the underlying library to communicate through the SSH protocol. In this example, we use &lt;code&gt;curl&lt;/code&gt; to connect to a Secure File Transfer Protocol (SFTP) server:&lt;/p&gt; &lt;pre&gt;curl -kvu root: sftp://localhost âkey âpkcs11:token=my-token;object=my-object;type=private?pin-value=1234â â testuser &lt;/pre&gt; &lt;p&gt;We could change the above command to use a PKCS #11 URI to test a SSH &lt;code&gt;testuser&lt;/code&gt;&amp;#8216;s access to localhost. Instead of specifying the path to the private key in the &lt;code&gt;--key&lt;/code&gt; attribute,Â  we would specify the corresponding PKCS #11 URI.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article has been a brief introduction to using the PKCS #11 standard and libssh to store and access cryptographic private information in hardware tokens such as smart cards. I will leave you with two additional recommendations.&lt;/p&gt; &lt;p&gt;First, provide a specific PKCS #11 URI that matches only a single slot in the engine. If the engine discovers multiple slots that could potentially contain the private keys referenced by the provided PKCS #11 URI, the engine will not attempt to authenticate. Second, if you are using Elliptic Curve Digital Signature Algorithm (ECDSA) for your PKCS #11 URIs, ensure that you import the public keys along with the private keys to the token. Unlike the more commonly used RSA algorithm (named after its creators, Rivest, Shamir, and Adleman), ECDSA public keys cannot be derived from private keys.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#38;linkname=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F28%2Fsecure-your-kubernetes-secrets-with-smart-cards-and-libssh%2F&amp;#038;title=Secure%20your%20Kubernetes%20secrets%20with%20smart%20cards%20and%20libssh" data-a2a-url="https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/" data-a2a-title="Secure your Kubernetes secrets with smart cards and libssh"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/"&gt;Secure your Kubernetes secrets with smart cards and libssh&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xubRt-0X_o4" height="1" width="1" alt=""/&gt;</content><summary>In computer security, software implementations of cryptographic algorithms are vulnerable to side-channel attacks. This type of attack seeks to glean information from the computer system rather than from the program that it is running. As examples, Spectre and Meltdown are both side-channel attacks that target the microarchitecture of modern processors. Microarchitecture attacks are only a subset ...</summary><dc:creator>sahana</dc:creator><dc:date>2020-10-28T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/28/secure-your-kubernetes-secrets-with-smart-cards-and-libssh/</feedburner:origLink></entry><entry><title>Using Microsoft SQL Server on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lLrt4cq6IpU/" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term="ASP.NET Core" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="SQL Server 2019" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-using_microsoft_sql_server_on_red_hat_openshift</id><updated>2020-10-27T07:00:30Z</updated><published>2020-10-27T07:00:30Z</published><content type="html">&lt;p&gt;In this article, you&amp;#8217;ll learn how to deploy &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/sql-server/what-s-new-in-sql-server-ver15"&gt;Microsoft SQL Server 2019&lt;/a&gt; on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Weâll then use SQL Server from an &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;ASP.NET Core&lt;/a&gt; application that is also deployed on OpenShift. Next, I&amp;#8217;ll show you how to connect to SQL Server while working on the application from your local development machine. And finally, weâll connect to the server using &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/azure-data-studio/what-is?view=sql-server-ver15"&gt;Azure Data Studio&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note that I am using &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;Red Hat CodeReady Containers&lt;/a&gt; to run &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/welcome/index.html"&gt;OpenShift 4.3&lt;/a&gt; locally on my development machine.&lt;/p&gt; &lt;h2&gt;Deploying Microsoft SQL Server&lt;/h2&gt; &lt;p&gt;To start, log in to your OpenShift cluster using the &lt;code&gt;oc login&lt;/code&gt; command. Create a new project by entering:&lt;/p&gt; &lt;pre&gt;$ oc new-project mssqldemo &lt;/pre&gt; &lt;p&gt;Use the following template to facilitate deploying the &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/containers/mssql/rhel/server/5ba50865f5a0de06555a2ee7"&gt;Red Hat Enterprise Linux (RHEL)-based SQL Server image&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/s2i-dotnetcore-persistent-ex/dotnetcore-3.1-mssql/openshift/mssql2019.json template.template.openshift.io/mssql2019 created $ oc process --parameters mssql2019 NAME DESCRIPTION GENERATOR VALUE NAME The name assigned to all of the frontend objects defined in this template. mssql SA_PASSWORD expression aA1[a-zA-Z0-9]{8} ACCEPT_EULA 'Y' to accept the EULA (https://go.microsoft.com/fwlink/?linkid=857698). MSSQL_PID Set to 'Developer'/'Express'/'Standard'/'Enterprise'/'EnterpriseCore'. Developer VOLUME_CAPACITY Volume space available for data, e.g. 512Mi, 8Gi 512Mi &lt;/pre&gt; &lt;p&gt;For this deployment, you can retain the default parameters. Accept the end-user license agreement (EULA) as follows:&lt;/p&gt; &lt;pre&gt;$ oc new-app --template=mssql2019 -p ACCEPT_EULA=Y --&amp;#62; Deploying template "mssqldemo/mssql2019" to project mssqldemo Microsoft SQL Server 2019 --------- Relational database management system developed by Microsoft. * With parameters: * Name=mssql * Administrator Password=aA1qxWYb8ME # generated * Accept the End-User Licensing Agreement=Y * Product ID or Edition=Developer * Persistent Volume Capacity=512Mi --&amp;#62; Creating resources ... secret "mssql-secret" created service "mssql" created deploymentconfig.apps.openshift.io "mssql" created persistentvolumeclaim "mssql-pvc" created --&amp;#62; Success Application is not exposed. You can expose services to the outside world by executing one or more of the commands below: 'oc expose svc/mssql' Run 'oc status' to view your app. &lt;/pre&gt; &lt;p&gt;In addition to deploying SQL Server in a container, the template creates a secret (&lt;code&gt;mssql-secret&lt;/code&gt;), which stores the administrator password. It also creates a persistent volume claim (&lt;code&gt;mssql-pvc&lt;/code&gt;) for storage. Note that the secret includes the SQL Server service name, which facilitates binding to SQL Server later.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;oc status&lt;/code&gt; command or the OpenShift web console to monitor the deployment&amp;#8217;s progress.&lt;/p&gt; &lt;h2&gt;Using SQL Server from .NET Core on OpenShift&lt;/h2&gt; &lt;p&gt;For this demo, weâll use the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex"&gt;s2i-dotnetcore-persistent-ex&lt;/a&gt; example application. This is a create, read, update, and delete (CRUD) application. The &lt;code&gt;dotnetcore-3.1-mssql&lt;/code&gt; branch has support for an in-memory, PostgreSQL, or SQL Server back end.&lt;/p&gt; &lt;p&gt;You can configure the application with environment variables to support the back end that you choose. We&amp;#8217;re using the &lt;code&gt;MSSQL_SA_PASSWORD&lt;/code&gt; and &lt;code&gt;MSSQL_SERVICE_NAME&lt;/code&gt; environment variables for SQL Server. Here are the relevant code snippets:&lt;/p&gt; &lt;pre&gt;// Detect that we should use a SQL Server backend: string saPassword = Configuration.GetValue("MSSQL_SA_PASSWORD"); if (saPassword != null) { dbProvider = DbProvider.Mssql; } ... // Determine the connection string: case DbProvider.Mssql: { string server = Configuration["MSSQL_SERVICE_NAME"] ?? "localhost"; string password = Configuration["MSSQL_SA_PASSWORD"]; string user = "sa"; string dbName = "myContacts"; connectionString = $@"Server={server};Database={dbName};User Id={user};Password={password};"; } ... // Configure EF Core to use SQL Server: case DbProvider.Mssql: Logger.LogInformation("Using Mssql database"); services.AddDbContext(options =&amp;#62; options.UseSqlServer(connectionString)); &lt;/pre&gt; &lt;p&gt;The application that we want to deploy requires .NET Core 3.1. Letâs find out whether this version is available on the OpenShift cluster:&lt;/p&gt; &lt;pre&gt;$ oc get is -n openshift dotnet NAME IMAGE REPOSITORY TAGS UPDATED dotnet default-route-openshift-image-registry.apps-crc.testing/openshift/dotnet 3.0,latest,2.2,2.1 2 months ago &lt;/pre&gt; &lt;p&gt;.NET Core 3.1 is not listed, but we can add it by importing the required &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;Universal Base Image (UBI) 8-based images&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;# note: only needed when .NET Core 3.1 is not available $ oc create -f https://raw.githubusercontent.com/redhat-developer/s2i-dotnetcore/master/dotnet_imagestreams_rhel8.json imagestream.image.openshift.io/dotnet created imagestream.image.openshift.io/dotnet-runtime created &lt;/pre&gt; &lt;p&gt;Now, we&amp;#8217;re ready to deploy the application:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet:3.1~https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex#dotnetcore-3.1-mssql --context-dir app --&amp;#62; Found image 45eae59 (28 hours old) in image stream "mssqldemo/dotnet" under tag "3.1" for "dotnet:3.1" .NET Core 3.1 ------------- Platform for building and running .NET Core 3.1 applications Tags: builder, .net, dotnet, dotnetcore, dotnet-31 * A source build using source code from https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex#dotnetcore-3.1-mssql will be created * The resulting image will be pushed to image stream tag "s2i-dotnetcore-persistent-ex:latest" * Use 'start-build' to trigger a new build * This image will be deployed in deployment config "s2i-dotnetcore-persistent-ex" * Port 8080/tcp will be load balanced by service "s2i-dotnetcore-persistent-ex" * Other containers can access this service through the hostname "s2i-dotnetcore-persistent-ex" --&amp;#62; Creating resources ... imagestream.image.openshift.io "s2i-dotnetcore-persistent-ex" created buildconfig.build.openshift.io "s2i-dotnetcore-persistent-ex" created deploymentconfig.apps.openshift.io "s2i-dotnetcore-persistent-ex" created service "s2i-dotnetcore-persistent-ex" created --&amp;#62; Success Build scheduled, use 'oc logs -f bc/s2i-dotnetcore-persistent-ex' to track its progress. Application is not exposed. You can expose services to the outside world by executing one or more of the commands below: 'oc expose svc/s2i-dotnetcore-persistent-ex' Run 'oc status' to view your app. &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;oc status&lt;/code&gt; command or the OpenShift web console to monitor the deployment&amp;#8217;s progress. Once the application is deployed, expose it externally and capture the URL:&lt;/p&gt; &lt;pre&gt;$ oc expose service s2i-dotnetcore-persistent-ex route.route.openshift.io/s2i-dotnetcore-persistent-ex exposed $ oc get route s2i-dotnetcore-persistent-ex NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD s2i-dotnetcore-persistent-ex s2i-dotnetcore-persistent-ex-mssqldemo.apps-crc.testing s2i-dotnetcore-persistent-ex 8080-tcp None &lt;/pre&gt; &lt;p&gt;When browsing to the URL, note that the application is running from an in-memory database.&lt;/p&gt; &lt;h2&gt;Adding contacts&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll add a few contacts, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_750077" style="width: 502px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-750077" class="wp-image-750077 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3.png" alt="A screenshot of the application dialog to add contacts from the in-memory database." width="492" height="185" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3.png 492w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/in_memory3-300x113.png 300w" sizes="(max-width: 492px) 100vw, 492px" /&gt;&lt;p id="caption-attachment-750077" class="wp-caption-text"&gt;Figure 1: Adding contacts from the application&amp;#8217;s in-memory database.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;code&gt;oc set env&lt;/code&gt; command to configure the application to connect to SQL Server. Then, we&amp;#8217;ll add the data from &lt;code&gt;mssql-secret&lt;/code&gt; to the application&amp;#8217;s deployment configuration:&lt;/p&gt; &lt;pre&gt;$ oc set env --from=secret/mssql-secret dc/s2i-dotnetcore-persistent-ex --prefix=MSSQL_ &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;oc set env&lt;/code&gt; command restarts the application and connects to the Microsoft SQL Server running on OpenShift. Now you can create, remove, and update contacts in the database. Figure 2 shows a list of contacts.&lt;/p&gt; &lt;div id="attachment_750067" style="width: 449px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-750067" class="wp-image-750067 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2.png" alt="A list of contacts in the Microsoft SQL Server database." width="439" height="204" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2.png 439w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/mssql2-300x139.png 300w" sizes="(max-width: 439px) 100vw, 439px" /&gt;&lt;p id="caption-attachment-750067" class="wp-caption-text"&gt;Figure 2: Contacts in the Microsoft SQL Server database.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Connecting from a local .NET application&lt;/h2&gt; &lt;p&gt;It is sometimes useful to connect to SQL Server on OpenShift from a .NET application that is running on your development machine. I&amp;#8217;ll show you how to do that next.&lt;/p&gt; &lt;p&gt;First, letâs get the application source code:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/redhat-developer/s2i-dotnetcore-persistent-ex $ cd s2i-dotnetcore-persistent-ex $ git checkout dotnetcore-3.1-mssql $ cd app &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;oc get pod&lt;/code&gt; command to identify the SQL Server pod. Then, enter the &lt;code&gt;oc port-forward&lt;/code&gt; command to expose SQL Server on the local machine:&lt;/p&gt; &lt;pre&gt;$ oc get pod | grep mssql | grep Running mssql-1-288cm 1/1 Running 0 34m $ oc port-forward mssql-1-288cm 1433:1433 Forwarding from 127.0.0.1:1433 -&amp;#62; 1433 Forwarding from [::1]:1433 -&amp;#62; 1433 &lt;/pre&gt; &lt;p&gt;To connect the application to the database, we set the &lt;code&gt;MSSQL_SA_PASSWORD&lt;/code&gt; environment variable. The password was printed when we deployed the SQL database. If you missed it, try doing a Base64-decode from the &lt;code&gt;oc get secret mssql-secret -o yaml&lt;/code&gt; output.&lt;/p&gt; &lt;p&gt;Letâs run the application with the environment variable set:&lt;/p&gt; &lt;pre&gt;$ MSSQL_SA_PASSWORD=aA1qxWYb8ME dotnet run info: RazorPagesContacts.Startup[0] Using Mssql database info: Microsoft.EntityFrameworkCore.Infrastructure[10403] Entity Framework Core 3.1.0 initialized 'MssqlDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None ... info: Microsoft.EntityFrameworkCore.Migrations[20405] No migrations were applied. The database is already up to date. info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0] User profile is available. Using '/home/redhat-developer/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest. Hosting environment: Production Content root path: /tmp/s2i-dotnetcore-persistent-ex/app Now listening on: http://localhost:5000 Now listening on: https://localhost:5001 Application started. Press Ctrl+C to shut down. &lt;/pre&gt; &lt;p&gt;Browse to the localhost web server to display the contacts that you added earlier.&lt;/p&gt; &lt;p&gt;Note that the demo starts the operation from the command line. You can also set the environment variable as part of the IDE debug configuration and launch the application from your IDE.&lt;/p&gt; &lt;h2&gt;Managing SQL Server&lt;/h2&gt; &lt;p&gt;On a Windows desktop, you can manage SQL Server as you always have, with SQL Server Management Studio. On a Linux or Mac desktop, you can use Azure Data Studio. You can find the installation instructions for Azure Data Studio &lt;a target="_blank" rel="nofollow" href="https://docs.microsoft.com/en-us/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To connect to SQL Server, you need to set up port forwarding, as we did in the previous section. Next, you can open Azure Data Studio and add a connection for the &lt;code&gt;localhost&lt;/code&gt; user &lt;code&gt;sa&lt;/code&gt; and the password from the &lt;code&gt;mssql-secret&lt;/code&gt;, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_750047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login.png"&gt;&lt;img aria-describedby="caption-attachment-750047" class="wp-image-750047" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login-300x282.png" alt="The dialog to add a new connection." width="640" height="602" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login-300x282.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_login.png 742w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-750047" class="wp-caption-text"&gt;Figure 3: Add a connection and secret for a localhost user.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After connecting, you can perform operations from Azure Data Studio. For example, you could execute an SQL query against the Customer database, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_750037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3.png"&gt;&lt;img aria-describedby="caption-attachment-750037" class="wp-image-750037" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3-300x173.png" alt="The dialog to execute a query against the Customer database." width="640" height="369" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3-300x173.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/ads_query3.png 748w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-750037" class="wp-caption-text"&gt;Figure 4: Execute an SQL query against the Customer database.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned how to deploy Microsoft SQL Server on Red Hat OpenShift. I showed you how to use SQL Server from an ASP.NET Core application running on OpenShift and a .NET application running on your development machine. You also saw how to use Azure Data Studio to connect to the SQL Server database on OpenShift. You can try this on your development machine with &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;CodeReady Containers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#38;linkname=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F27%2Fusing-microsoft-sql-server-on-red-hat-openshift%2F&amp;#038;title=Using%20Microsoft%20SQL%20Server%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/" data-a2a-title="Using Microsoft SQL Server on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/"&gt;Using Microsoft SQL Server on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lLrt4cq6IpU" height="1" width="1" alt=""/&gt;</content><summary>In this article, youâll learn how to deploy Microsoft SQL Server 2019 on Red Hat OpenShift. Weâll then use SQL Server from an ASP.NET Core application that is also deployed on OpenShift. Next, Iâll show you how to connect to SQL Server while working on the application from your local development machine. And finally, weâll connect to the server using Azure Data Studio. Note that I am using Red Hat...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-10-27T07:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/27/using-microsoft-sql-server-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/C_EQq6DpgXQ/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Docker containers" scheme="searchisko:content:tags" /><category term="Docker Kubernetes" scheme="searchisko:content:tags" /><category term="Docker OpenShift" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Michael Greenberg</name></author><id>searchisko:content:id:jbossorg_blog-adapting_docker_and_kubernetes_containers_to_run_on_red_hat_openshift_container_platform</id><updated>2020-10-26T07:00:48Z</updated><published>2020-10-26T07:00:48Z</published><content type="html">&lt;p&gt;More and more companies are migrating their applications to the &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (RHOCP). This enterprise-grade container platform is secure and comprehensive, based on industry standards including those related to Docker and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. However, due to the tightened security restrictions, containers that run on Docker and Kubernetes might not run successfully on Red Hat OpenShift without modification.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; is a fully managed Red Hat OpenShift service that takes advantage of enterprise-ready scaling and security. It is directly integrated with Kubernetes and provides several models for application deployment. For example, OpenShift can mitigate the risk that processes running in a container might be given escalated privileges on the host machine, due to security vulnerabilities in the container engine. For this reason, containers are run using an &lt;em&gt;arbitrarily assigned user ID&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;In contrast, in Docker and Kubernetes containers are run either as the user specified by the USER directive in the Dockerfile, or as the root user if a USER directive is not specified. Containerized applications designed to run as the root user might not run as expected on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;span id="more-760987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This article reviews the common issues I found when adapting containers from Docker and Kubernetes to run on Red Hat OpenShift. First, I describe potential areas to address so that containers can run on OpenShift securely without mandating a non-restricted &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html"&gt;Security Context Constraint&lt;/a&gt; (SCC). Then, I provide tips on how to create images that can run both on Kubernetes and OpenShift without modification. In addition, I provide techniques for debugging issues with applications that do not run as expected.&lt;/p&gt; &lt;h2&gt;Group ownership and file permission&lt;/h2&gt; &lt;p&gt;Although OpenShift runs containers using an arbitrarily assigned user ID, the group ID must always be set to the root group (0). Therefore, the directories and files that the processes running in the image need to access should have their group ownership set to the root group. They also need to be read/writable by that group as recommended by the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/openshift_images/create-images.html#images-create-guide-openshift_create-images"&gt;OpenShift Container Platform-specific guidelines&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Adding the following to your Dockerfile sets the directory and file permissions to allow users in the root group to access them with the same authorization as the directory and file owner:&lt;/p&gt; &lt;pre&gt;RUN chgrp -R 0 /some/directory &amp;#38;&amp;#38; \ chmod -R g=u /some/directory&lt;/pre&gt; &lt;h2&gt;Runtime user compatibility with Kubernetes&lt;/h2&gt; &lt;p&gt;For this step, I suggest that you set the runtime user for Kubernetes to a &lt;em&gt;non-root&lt;/em&gt; user for backward compatibility. You can perform this action by adding the following to the Dockerfile and then updating the file and directory permissions accordingly:&lt;/p&gt; &lt;pre&gt;USER 1001 RUN chown -R 1001:0 /some/directory&lt;/pre&gt; &lt;p&gt;The result, the specified user is ignored when the image is run on OpenShift because the user is set to an arbitrary ID. In contrast, when the image runs on Kubernetes, many of the OpenShift restrictions take effect as the container is run as a non-root user.&lt;/p&gt; &lt;p&gt;Good work. Runtime user compatibility helps to ensure that a single Dockerfile can be used to create an image that functions correctly, both on OpenShift and on Kubernetes.&lt;/p&gt; &lt;h2&gt;Executable permissions&lt;/h2&gt; &lt;p&gt;When containers run as the root user on Kubernetes, file permissions are ignored. In contrast, when an arbitrary user ID is used on OpenShift, set the permission bit in order to execute files.&lt;/p&gt; &lt;p&gt;For example, you add the following to set the execute permission bits to run for the owner and for the group:&lt;/p&gt; &lt;pre&gt;RUN chmod 775 /some/directory/script&lt;/pre&gt; &lt;h2&gt;Volume mounts&lt;/h2&gt; &lt;p&gt;In OpenShift, volume mounts are owned by user/group root:root and each is assigned the following permissions:&lt;/p&gt; &lt;pre&gt;drwxrwx---&lt;/pre&gt; &lt;p&gt;Note that Linux commands, such as&lt;code&gt; chown(1)&lt;/code&gt;, &lt;code&gt;chgrp(1)&lt;/code&gt;, &lt;code&gt;chmod(1)&lt;/code&gt;, cannot be performed on the volume mount point itself. However, you can create files or directories within the volume mount as the root group with full access permissions.&lt;/p&gt; &lt;h2&gt;Privileged ports&lt;/h2&gt; &lt;p&gt;TCP/IP port numbers below 1024 are privileged port numbers that enable only the root user to bind to these ports. When running a container on OpenShift, server applications need to be assigned port numbers greater than 1023.&lt;/p&gt; &lt;h2&gt;Applications requiring the user&amp;#8217;s name&lt;/h2&gt; &lt;p&gt;Applications sometimes fail on OpenShift when you attempt to look up the username for the currently running user ID. This problem occurs when there is no &lt;code&gt;/etc/passwd&lt;/code&gt; entry for the arbitrarily assigned user ID. A workaround for this issue is to add an &lt;code&gt;/etc/passwd&lt;/code&gt; entry for the arbitrary assigned user ID when the container starts.&lt;/p&gt; &lt;p&gt;For demonstration purposes, in the same directory as your Dockerfile, you need to create a file named, &lt;code&gt;uid_entrypoint&lt;/code&gt;, with the following contents.&lt;/p&gt; &lt;p&gt;Remember to replace &lt;code&gt;myuser&lt;/code&gt; with the name of the user you choose:&lt;/p&gt; &lt;pre&gt;#!/bin/sh if ! whoami &amp;#38;&amp;#62; /dev/null; then if [ -w /etc/passwd ]; then echo "myuser:x:$(id -u):0:My User:${HOME}:/sbin/nologin" &amp;#62;&amp;#62; /etc/passwd fi fi exec "$@"&lt;/pre&gt; &lt;p&gt;Add the following to the Dockerfile, after replacing &lt;code&gt;runcmd&lt;/code&gt; with the main script or program that runs in the container:&lt;/p&gt; &lt;pre&gt;COPY uid_entrypoint / RUN chmod g=u /etc/passwd &amp;#38;&amp;#38; chmod 775 /uid_entrypoint ENTRYPOINT ["uid_entrypoint"] CMD ["runcmd"]&lt;/pre&gt; &lt;p&gt;Note that, when the container starts running, you need to add a password entry for the specified username, if it does not already exist, and then the main process starts.&lt;/p&gt; &lt;h2&gt;Deployments&lt;/h2&gt; &lt;p&gt;Deployments to OpenShift can sometimes fail due to different behaviors between Kubernetes and OpenShift.&lt;/p&gt; &lt;h3&gt;InitContainers won&amp;#8217;t help resolve permission issues&lt;/h3&gt; &lt;p&gt;When you run in Kubernetes, &lt;code&gt;initContainers&lt;/code&gt; are sometimes used to set the permissions of files and directories used by other containers in the pod. This advantage relies on Kubernetes running &lt;code&gt;initContainers&lt;/code&gt; as the root user and running other containers as the user specified in the Docker directive &lt;code&gt;USER&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you run on OpenShift, both &lt;code&gt;initContainers&lt;/code&gt; and regular containers use the OpenShift-assigned user ID. Therefore, the permissions in &lt;code&gt;initContainers&lt;/code&gt; are exactly the same as the permissions in regular containers running in the same pod.&lt;/p&gt; &lt;h3&gt;SecurityContext directives&lt;/h3&gt; &lt;p&gt;Importantly, because OpenShift assigns an arbitrary user ID and a group ID of &lt;code&gt;zero (0)&lt;/code&gt;, SecurityContext directives, such as &lt;code&gt;runAsUser&lt;/code&gt; and &lt;code&gt;runAsGroup&lt;/code&gt;, must not appear in the deployment specifications (or Helm charts) when you run on OpenShift. Enabling SecurityContext directives causes the deployment to fail.&lt;/p&gt; &lt;h3&gt;Avoid the OpenShift project default&lt;/h3&gt; &lt;p&gt;Applications running in the OpenShift project &lt;em&gt;default&lt;/em&gt; receive permissions similar to the permissions used when running on Kubernetes. OpenShift security restrictions are not applied to this project. Therefore, do not use this namespace for testing containers.&lt;/p&gt; &lt;p&gt;In addition, &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html#role-based-access-to-ssc_configuring-internal-oauth"&gt;IÂ recommend that you do not use&lt;/a&gt; the following OpenShift namespaces for running pods or services: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;kube-system&lt;/code&gt;, &lt;code&gt;kube-public&lt;/code&gt;, &lt;code&gt;openshift-node&lt;/code&gt;, &lt;code&gt;openshift-infra&lt;/code&gt;, &lt;code&gt;openshift&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;How to debug issues&lt;/h2&gt; &lt;p&gt;When migrating an image from Docker or Kubernetes to OpenShift, the image might not run out-of-the-box. For this reason, I recommend that you use the following tools and methods when debugging to find the root cause or the error:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Check for errors logged in the system events for the current namespace by running: &lt;pre&gt;$ oc get events -w&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Check for errors in the pod logs by running: &lt;pre&gt;$ oc logs -f &lt;em&gt;&amp;#60;podname&amp;#62;&lt;/em&gt; --all-containers&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Log into a container in the pod to check the file and permissions and other issues using the command: &lt;pre&gt;$ oc rsh &lt;em&gt;&amp;#60;podname&amp;#62;&lt;/em&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;When the container keeps starting and crashing, in the Dockerfile set: &lt;pre&gt;ENTRYPOINT ["sleep", "100000000"]&lt;/pre&gt; &lt;p&gt;Rerun the pod and log in to determine why issues are occurring.&lt;/li&gt; &lt;li&gt;Install the &lt;code&gt;strace(1)&lt;/code&gt; command in the container and trace the system calls of the running program to see which one fails.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned how to review common issues found when adapting containers from Docker and Kubernetes to OpenShift. I&amp;#8217;ve also demonstrated how you can easily resolve these issues and create images that can be run on Docker, Kubernetes, and OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#38;linkname=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F26%2Fadapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform%2F&amp;#038;title=Adapting%20Docker%20and%20Kubernetes%20containers%20to%20run%20on%20Red%20Hat%20OpenShift%20Container%20Platform" data-a2a-url="https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/" data-a2a-title="Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/"&gt;Adapting Docker and Kubernetes containers to run on Red Hat OpenShift Container Platform&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/C_EQq6DpgXQ" height="1" width="1" alt=""/&gt;</content><summary>More and more companies are migrating their applications to the Red Hat OpenShift Container Platform (RHOCP). This enterprise-grade container platform is secure and comprehensive, based on industry standards including those related to Docker and Kubernetes. However, due to the tightened security restrictions, containers that run on Docker and Kubernetes might not run successfully on Red Hat OpenSh...</summary><dc:creator>Michael Greenberg</dc:creator><dc:date>2020-10-26T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/26/adapting-docker-and-kubernetes-containers-to-run-on-red-hat-openshift-container-platform/</feedburner:origLink></entry><entry><title>Use mobile numbers for user authentication in Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gwSgmlh7G8c/" /><category term="Custom authenticator" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Red Hat SSO" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="User authentication" scheme="searchisko:content:tags" /><author><name>Siddhartha De</name></author><id>searchisko:content:id:jbossorg_blog-use_mobile_numbers_for_user_authentication_in_keycloak</id><updated>2020-10-23T07:00:59Z</updated><published>2020-10-23T07:00:59Z</published><content type="html">&lt;p&gt;I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is &lt;a href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;Keycloak&lt;/a&gt;, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom authentication executor to meet the requirement.&lt;/p&gt; &lt;p&gt;In this article, I show you how to use Keycloak&amp;#8217;s authentication service provider interface (SPI) to write a custom &lt;code&gt;MobileAuthenticator&lt;/code&gt; class and then instantiate it with an &lt;code&gt;AuthenticationFactory&lt;/code&gt;. I also show you how to package and compile the mobile authentication project using Maven and how to create a custom mobile authentication flow for Keycloak.&lt;/p&gt; &lt;p&gt;&lt;span id="more-693617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article assumes that you are familiar with Keycloak, Maven, and &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; is an open source identity and access management (IAM) tool and is the upstream project for &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost/"&gt;Red Hat Single Sign-On&lt;/a&gt; (Red Hat SSO). Many developers use Keycloak or Red Hat SSO for enterprise security in production environments.&lt;/p&gt; &lt;h2&gt;Creating a custom authenticator with Keycloak&lt;/h2&gt; &lt;p&gt;Keycloak provides an &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#_auth_spi"&gt;authentication service provider interface&lt;/a&gt; (SPI) that we&amp;#8217;ll use to write a new, custom authenticator. As &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#packaging-classes-and-deployment"&gt;described in the Keycloak documentation&lt;/a&gt;, we must do the following when we package the custom authenticator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Package the entire implementation into a single JAR file.&lt;/li&gt; &lt;li&gt;Ensure that the JAR contains a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Locate the &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; file in the &lt;code&gt;META-INF/services/&lt;/code&gt; directory.&lt;/li&gt; &lt;li&gt;Ensure that it lists the fully qualified class name for each &lt;code&gt;AuthenticatorFactory&lt;/code&gt; implementation.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The MobileAuthenticator class&lt;/h2&gt; &lt;p&gt;To start, we&amp;#8217;ll create two classes. The first is &lt;code&gt;MobileAuthenticator.java&lt;/code&gt;, which performs the authentication:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import java.util.List; import javax.ws.rs.core.MultivaluedMap; import org.keycloak.authentication.AuthenticationFlowContext; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordForm; import org.keycloak.events.Errors; import org.keycloak.services.managers.AuthenticationManager; import javax.ws.rs.core.Response; import org.keycloak.authentication.AuthenticationFlowError; import org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator; import org.keycloak.events.Details; import org.keycloak.models.ModelDuplicateException; import org.keycloak.models.UserModel; import org.keycloak.services.messages.Messages; /** * @author sid **/ public class MobileAuthenticator extends UsernamePasswordForm implements Authenticator { @Override public boolean validateUserAndPassword(AuthenticationFlowContext context, MultivaluedMap inputData) { String username = inputData.getFirst(AuthenticationManager.FORM_USERNAME); if (username == null) { context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, Messages.INVALID_USER); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); return false; } // remove leading and trailing whitespace username = username.trim(); context.getEvent().detail(Details.USERNAME, username); context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME, username); UserModel user = null; try { List users = context.getSession().users().searchForUserByUserAttribute("mobile", username, context.getRealm()); System.out.println(users.get(0).getUsername()); if (users != null &amp;#38;&amp;#38; users.size() == 1) { user = users.get(0); } } catch (ModelDuplicateException mde) { if (mde.getDuplicateFieldName() != null &amp;#38;&amp;#38; mde.getDuplicateFieldName().equals(UserModel.EMAIL)) { setDuplicateUserChallenge(context, Errors.EMAIL_IN_USE, Messages.EMAIL_EXISTS, AuthenticationFlowError.INVALID_USER); } else { setDuplicateUserChallenge(context, Errors.USERNAME_IN_USE, Messages.USERNAME_EXISTS, AuthenticationFlowError.INVALID_USER); } return false; } if (invalidUser(context, user)) { return false; } if (!validatePassword(context, user, inputData)) { return false; } if (!enabledUser(context, user)) { return false; } String rememberMe = inputData.getFirst("rememberMe"); boolean remember = rememberMe != null &amp;#38;&amp;#38; rememberMe.equalsIgnoreCase("on"); if (remember) { context.getAuthenticationSession().setAuthNote(Details.REMEMBER_ME, "true"); context.getEvent().detail(Details.REMEMBER_ME, "true"); } else { context.getAuthenticationSession().removeAuthNote(Details.REMEMBER_ME); } context.setUser(user); return true; } }&lt;/pre&gt; &lt;h2&gt;The MobileAuthenticationFactory class&lt;/h2&gt; &lt;p&gt;Next, we create &lt;code&gt;MobileAuthenticationFactory.java&lt;/code&gt;, which instantiates the authenticator:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import org.keycloak.Config; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordFormFactory; import org.keycloak.models.KeycloakSession; /** * @author sid **/ public class MobileAuthenticationFactory extends UsernamePasswordFormFactory { public static final String PROVIDER_ID = "mobile-authenticator"; public static final MobileAuthenticator SINGLETON = new MobileAuthenticator(); @Override public Authenticator create(KeycloakSession session) { return SINGLETON; } @Override public void init(Config.Scope scope) { } @Override public String getId() { return PROVIDER_ID; } @Override public String getDisplayType() { return "Mobile Based User Form"; } @Override public String getHelpText() { return "Validates a mobile and password from login form."; } } &lt;/pre&gt; &lt;h2&gt;Organize and compile the Keycloak custom authenticator&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll use Maven to organize the mobile authentication project and compile our two new classes.&lt;/p&gt; &lt;h3&gt;Set up the project&lt;/h3&gt; &lt;p&gt;Execute the following command to create a project using Maven:&lt;/p&gt; &lt;pre&gt;mvn archetype:generate -DgroupId=com.sid.keycloakauthenticator -DartifactId=keycloak-authenticator -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false &lt;/pre&gt; &lt;p&gt;Place both of the classes that we&amp;#8217;ve just created in the &lt;code&gt;src/main/java/com/sid/keycloakauthenticator&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Now, create a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; at &lt;code&gt;src/main/resources/META-INF/services&lt;/code&gt;. Add an entry for the new &lt;code&gt;AuthenticationFactory&lt;/code&gt;: &lt;code&gt;com.sid.keycloakauthenticator.MobileAuthenticationFactory&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Resolve the project dependencies&lt;/h3&gt; &lt;p&gt;The Keycloak authentication module is a private SPI, so you are required to use the &lt;code&gt;MANIFEST.MF&lt;/code&gt; to resolve dependencies. Make the following entry in the &lt;code&gt;MANIFEST.MF&lt;/code&gt; at the line &lt;code&gt;src/main/resources/META-INF&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;Dependencies: org.keycloak.keycloak-server-spi-private, org.keycloak.keycloak-services, org.keycloak.keycloak-core, org.keycloak.keycloak-server-spi &lt;/pre&gt; &lt;p&gt;You can now edit the Maven &lt;code&gt;pom.xml&lt;/code&gt; to add the following dependencies:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi-private&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.logging&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jboss-logging&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.4.0.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-services&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;h3&gt;Build and deploy the project&lt;/h3&gt; &lt;p&gt;Execute the following command to build the project:&lt;/p&gt; &lt;pre&gt;mvn clean install &lt;/pre&gt; &lt;p&gt;This command generates output in the &lt;code&gt;keycloak-authenticator-1.0-SNAPSHOT.jar&lt;/code&gt; target folder. Keycloak ships bundled with &lt;a target="_blank" rel="nofollow" href="https://www.wildfly.org/"&gt;WildFly&lt;/a&gt;, so you can use the &lt;code&gt;jboss-cli&lt;/code&gt; interface and the following command to deploy the JAR:&lt;/p&gt; &lt;pre&gt;deploy /path/to/keycloak-authenticator-1.0-SNAPSHOT.jar &lt;/pre&gt; &lt;h3&gt;Configure the custom authentication flow&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve successfully deployed the authenticator JAR, you will configure the authentication flow. Here&amp;#8217;s how to configure a custom flow in Keycloak:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in into Keycloak management console, select the realm where you want to configure the custom mobile authenticator, and click on &lt;b&gt;Authentication&lt;/b&gt; in the left-side panel&lt;/li&gt; &lt;li&gt;In the &lt;b&gt;Flow&lt;/b&gt; tab, select &lt;strong&gt;Browser&lt;/strong&gt; from the drop-down list.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy&lt;/strong&gt; button and name the flow; for example, MobileFlow.&lt;/li&gt; &lt;li&gt;Under &lt;strong&gt;MobileFlow Forms&lt;/strong&gt;, click the &lt;b&gt;Actions&lt;/b&gt; hyperlink to add executions.&lt;/li&gt; &lt;li&gt;Save the flow by selecting &lt;strong&gt;Mobile Based User Form&lt;/strong&gt; from the provider list.&lt;/li&gt; &lt;li&gt;Delete the &lt;strong&gt;Username Password Form&lt;/strong&gt; and the &lt;strong&gt;OTP Form&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;That&amp;#8217;s all there is to setting up mobile-based authentication with Keycloak. Note that for the authentication to be successful, you must ensure that every user has a unique mobile number assigned in their attributes.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#038;title=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/" data-a2a-title="Use mobile numbers for user authentication in Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;Use mobile numbers for user authentication in Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gwSgmlh7G8c" height="1" width="1" alt=""/&gt;</content><summary>I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is Keycloak, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom authentication executor to meet the requir...</summary><dc:creator>Siddhartha De</dc:creator><dc:date>2020-10-23T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/</feedburner:origLink></entry><entry><title>Red Hat talks and workshops at NodeConf Remote 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WVd6ozNJhTM/" /><category term="CloudEvents" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="JavaScript Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="NodeConfRemote" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Lucas Holmquist</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_talks_and_workshops_at_nodeconf_remote_2020</id><updated>2020-10-23T07:00:34Z</updated><published>2020-10-23T07:00:34Z</published><content type="html">&lt;p&gt;Red Hat is heading to &lt;a target="_blank" rel="nofollow" href="https://www.nodeconfremote.com/"&gt;NodeConf Remote 2020&lt;/a&gt; with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape.&lt;/p&gt; &lt;p&gt;Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and get a look at our latest workflows for building cloud-native &lt;a href="https://developers.redhat.com/topics/javascript"&gt;JavaScript&lt;/a&gt; solutions on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. Our open source experts can show you how to integrate JavaScript and &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; with other technologies like authentication, distributed data caching and streaming, or business automation.&lt;/p&gt; &lt;h2&gt;Talks&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re offering three talks at NodeConf Remote on topics such as &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt; data in &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; environments, the Node.js ecosystem, and lessons from real-world Node.js deployments. Here is more information on each.&lt;/p&gt; &lt;h3&gt;Serverless with a chance of cloud events&lt;/h3&gt; &lt;p&gt;By: Luke Holmquist (&lt;a href="https://twitter.com/sienaluke" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@sienaluke&lt;/a&gt;), Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;In this new world of serverless functions, events and their data are the driving factors in triggering these functions. However, event-driven data can come from anywhere and the problem is that most platforms have their own format for how the data is structured.&lt;/p&gt; &lt;p&gt;The lack of a common way to describe events means that as developers, we constantly have to re-learn how to consume these events. But all hope is not lost. This is where CloudEvents can help.&lt;/p&gt; &lt;p&gt;CloudEvents is a specification from the CNCF for describing event data in a common way to help with cross-service and cross-platform communication. In this talk, we show how to use the CloudEvents Javascript SDK to receive and send properly formatted events.&lt;/p&gt; &lt;h3&gt;Chronicles of the Node.js ecosystem&lt;/h3&gt; &lt;p&gt;By: Bethany Griggs, Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;The sheer vastness of the Node.js module ecosystem poses challenges for consumers, authors, and maintainers. How do consumers know which of the one million modules to rely on for their production deployments? How do module authors handle their hobby projects evolving into a widespread, critical dependency? What happens to abandoned modules? How can a module author test the impact of their changes on dependent applications? Bethany will highlight these problems, and also showcase the work that the Node.js Package Maintenance team is doing to try and help solve these problems.&lt;/p&gt; &lt;h3&gt;Real-world Node.js success stories&lt;/h3&gt; &lt;p&gt;By: Michael Dawson, Node.js lead for Red Hat and IBM&lt;/p&gt; &lt;p&gt;We all know and love to develop with Node.js, but how and where is it delivering real value in the business world? How can we share what we&amp;#8217;ve learned from these deployments? Join Michael to hear about real-world success stories where Node.js is being used at both large and small scale to deliver value and get the job done; what we&amp;#8217;re doing to capture and share some of the lessons learned.&lt;/p&gt; &lt;h2&gt;Workshops&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re also offering a couple of workshops, one on using Node-RED to build AI-infused web applications, and the other digging into building and deploying Node.js applications on Kubernetes.&lt;/p&gt; &lt;h3&gt;Building cloud-native AI-infused web applications with Node-RED&lt;/h3&gt; &lt;p&gt;By: Nick OâLeary, Node-RED Project Lead and John Walicki, IBM Developer Advocate&lt;br /&gt; Wednesday, 4 November, 12:00-13:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;In this workshop, participants will learn how to use Node-RED and TensorFlow to create a photo booth web application infused with AI. The workshop walks through getting started with Node-RED, creating the web application, and then containerizing it so that it is ready to be deployed into the cloud or onto &lt;a href="https://developers.redhat.com/topics/edge-computing"&gt;edge devices&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Kubernetes for JS developers&lt;/h3&gt; &lt;p&gt;By: Joel Lord (&lt;a href="https://twitter.com/joel__lord" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@joel__lord&lt;/a&gt;), OpenShift Developer Advocate, Red Hat&lt;br /&gt; Thursday, 5 November, 14:00 &amp;#8211; 15:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;Learn to build and deploy cloud-native Node.js applications on Kubernetes through a series of hands-on lab examples. By the end of this workshop, youâll be deploying, scaling, and automating JS-based distributed solutions using containers, Kubernetes, and other popular open source tools for distributed computing.&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Learn more about what Red Hat and IBM are up to on the Node.js front on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Developer &amp;#8211; &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;https://developers.redhat.com/blog/category/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;IBM Developer &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://developer.ibm.com/languages/node-js/"&gt;https://developer.ibm.com/languages/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Nodeshift &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://nodeshift.dev/"&gt;https://nodeshift.dev/ &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Red Hat is a proud sponsor of NodeConf Remote 2020. We hope to see you there virtually!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#038;title=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/" data-a2a-title="Red Hat talks and workshops at NodeConf Remote 2020"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/"&gt;Red Hat talks and workshops at NodeConf Remote 2020&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WVd6ozNJhTM" height="1" width="1" alt=""/&gt;</content><summary>Red Hat is heading to NodeConf Remote 2020 with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape. Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and get a look at our latest w...</summary><dc:creator>Lucas Holmquist</dc:creator><dc:date>2020-10-23T07:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/</feedburner:origLink></entry></feed>
