<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Role-based access control behind a proxy in an OAuth access delegation</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EBoiA154BJg/" /><category term="JBoss Web Server" /><category term="Red Hat JBoss Enterprise Application Platform" /><category term="Red Hat SSO" /><category term="Security" /><category term="OAuth" /><category term="reverse proxy" /><author><name>Siddhartha De</name></author><id>https://developers.redhat.com/blog/?p=661777</id><updated>2019-12-27T08:00:46Z</updated><published>2019-12-27T08:00:46Z</published><content type="html">&lt;p&gt;In my previous &lt;a href="https://developers.redhat.com/blog/2018/10/08/configuring-nginx-keycloak-oauth-oidc/"&gt;article,&lt;/a&gt; I demonstrated the complete implementation for enabling OAuth-based authorization in NGINX with &lt;a href="https://www.keycloak.org/index.html"&gt;Keycloak&lt;/a&gt;, where NGINX acts as a relaying party for the authorization code grant. NGNIX can also act as a reverse proxy server for back-end applications (e.g., Tomcat, Open Liberty, WildFly, etc.), which can be hosted on an enterprise application server.&lt;/p&gt; &lt;p&gt;&lt;span id="more-661777"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;At times, back-end applications hosted behind NGINX are required to have role-based access control (RBAC), as RBAC helps to restrict resources based on users’ roles. In OAuth, roles associated with a user are available in the JSON Web Token (JWT), and thus one can capture the claim from the ID or access token, but the same should be shared through the header by NGINX:&lt;/p&gt; &lt;pre&gt;ngx.req.set_header("X-USER", res.id_token.sub) ngx.req.set_header("X-ROLE", res.id_token.role) &lt;/pre&gt; &lt;p&gt;Here, I set the principal based on the subject claim, and the role based on the role claim available in the ID token. Usually, the role claim is not available in the ID token, but it is possible to add this information by configuring the mapper with the associated client in Keycloak.&lt;/p&gt; &lt;p&gt;Because I need to create the principal based on the username captured in the HTTP header, I extended &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; to set the principal in the normal application flow:&lt;/p&gt; &lt;pre&gt;public class ConfigPrincipal extends HttpServletRequestWrapper {    String user;    List&amp;#60;String&amp;#62; roles;    HttpServletRequest realRequest;    public ConfigPrincipal(String user, List&amp;#60;String&amp;#62; roles, HttpServletRequest request) { super(request); this.user = user; this.roles = roles; this.realRequest = request;    }    @Override    public boolean isUserInRole(String role) { if (roles == null) { return this.realRequest.isUserInRole(role); } return roles.contains(role);    }    @Override    public Principal getUserPrincipal() { if (this.user == null) { return realRequest.getUserPrincipal(); } //make an anonymous implementation to just return our user return new Principal() { @Override public String getName() { return user; } }; } public boolean authenticate(){ return true; } }&lt;/pre&gt; &lt;p&gt;Next, I defined a servlet filter attached to the application so that it executes before the application&amp;#8217;s business logic:&lt;/p&gt; &lt;pre&gt; @Override public void doFilter(ServletRequest req, ServletResponse response, FilterChain next) throws IOException, ServletException { HttpServletRequest request = (HttpServletRequest) req; String user = request.getHeader("X-USER"); List&amp;#60;String&amp;#62; roles = new ArrayList&amp;#60;String&amp;#62;(); //Capturing roles from the request header. if (request.getHeader("role") != null) {   String[] substrrole = request.getHeader("X-SSBRoleLevel").split(",");   for (int i = 0; i &amp;#60; substrrole.length; i++) { roles.add(substrrole[i]);   } } System.err.println("sidde roles:" + roles); //call the request wrapper , which overrides getUserPrincipal and is UserInRole next.doFilter(new ConfigPrincipal(user, roles, request), response);    }&lt;/pre&gt; &lt;p&gt;Now, &lt;code&gt;request.getUserPrincipal()&lt;/code&gt; can be executed anywhere in the application to capture the principal, and &lt;code&gt;request.isUserInRole(role)&lt;/code&gt; can be used to capture the associated role to have role-based access control.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#38;linkname=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F27%2Frole-based-access-control-behind-a-proxy-in-an-oauth-access-delegation%2F&amp;#038;title=Role-based%20access%20control%20behind%20a%20proxy%20in%20an%20OAuth%20access%20delegation" data-a2a-url="https://developers.redhat.com/blog/2019/12/27/role-based-access-control-behind-a-proxy-in-an-oauth-access-delegation/" data-a2a-title="Role-based access control behind a proxy in an OAuth access delegation"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/27/role-based-access-control-behind-a-proxy-in-an-oauth-access-delegation/"&gt;Role-based access control behind a proxy in an OAuth access delegation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EBoiA154BJg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In my previous article, I demonstrated the complete implementation for enabling OAuth-based authorization in NGINX with Keycloak, where NGINX acts as a relaying party for the authorization code grant. NGNIX can also act as a reverse proxy server for back-end applications (e.g., Tomcat, Open Liberty, WildFly, etc.), which can be hosted on an enterprise application [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/27/role-based-access-control-behind-a-proxy-in-an-oauth-access-delegation/"&gt;Role-based access control behind a proxy in an OAuth access delegation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">661777</post-id><dc:creator>Siddhartha De</dc:creator><dc:date>2019-12-27T08:00:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/27/role-based-access-control-behind-a-proxy-in-an-oauth-access-delegation/</feedburner:origLink></entry><entry><title>See the magic behind Quarkus, the cloud-native Java framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RJ2Cm0S7CI0/" /><category term="DevNation" /><category term="Events" /><category term="Quarkus" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=626997</id><updated>2019-12-26T08:00:55Z</updated><published>2019-12-26T08:00:55Z</published><content type="html">&lt;p&gt;Our first &lt;a href="https://developers.redhat.com/devnationlive-india/"&gt;DevNation Live regional event was held in Bengaluru, India&lt;/a&gt; in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists.&lt;/p&gt; &lt;p class="selectionShareable"&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt; is revolutionizing the way that we develop &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; applications for the cloud-native era, and this tutorial, presented by &lt;a href="https://developers.redhat.com/blog/author/yanaga/"&gt;Edson Yanaga,&lt;/a&gt; explains why. Yanaga looks at how Quarkus works and the techniques it uses to achieve its dramatic startup speed improvements. He also covers the Quarkus extension API, so you can see how to write your own extensions.&lt;span id="more-626997"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/SQ2wNnM_YwE" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://speakerdeck.com/yanaga/whats-the-magic-behind-quarkus"&gt;See the slides here.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#38;linkname=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F26%2Fsee-the-magic-behind-quarkus-the-cloud-native-java-framework%2F&amp;#038;title=See%20the%20magic%20behind%20Quarkus%2C%20the%20cloud-native%20Java%20framework" data-a2a-url="https://developers.redhat.com/blog/2019/12/26/see-the-magic-behind-quarkus-the-cloud-native-java-framework/" data-a2a-title="See the magic behind Quarkus, the cloud-native Java framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/26/see-the-magic-behind-quarkus-the-cloud-native-java-framework/"&gt;See the magic behind Quarkus, the cloud-native Java framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RJ2Cm0S7CI0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Our first DevNation Live regional event was held in Bengaluru, India in July. This free technology event focused on open source innovations, with sessions presented by elite Red Hat technologists. Quarkus is revolutionizing the way that we develop Java applications for the cloud-native era, and this tutorial, presented by Edson Yanaga, explains why. Yanaga looks at how [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/26/see-the-magic-behind-quarkus-the-cloud-native-java-framework/"&gt;See the magic behind Quarkus, the cloud-native Java framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">626997</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-12-26T08:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/26/see-the-magic-behind-quarkus-the-cloud-native-java-framework/</feedburner:origLink></entry><entry><title>This Week in JBoss (25th December 2019) - Merry Christmas Everybody!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/aHKqcZNoySQ/this-week-in-jboss-25th-december-2019-merry-christmas-everybody" /><category term="christmas" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><author><name>Mark Little</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_25th_december_2019_merry_christmas_everybody</id><updated>2019-12-25T07:18:23Z</updated><published>2019-12-25T07:18:23Z</published><content type="html">&lt;!-- [DocumentBodyStart:3b5c62b4-0125-4f4c-9c94-a06929817787] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Yes it's that time of year again when some of us celebrate the festive season in a range of manners including parties, taking it easy, various pet projects and writing blog entries! Well this year rather than try to summarise the entire 2019 editorial or even give an update since the last one (you can find it all &lt;a class="jive-link-external-small" href="https://planet.jboss.org/" rel="nofollow"&gt;here&lt;/a&gt; anyway), I want to take a different approach. Of course I want to say a big thank you to everyone in our diverse communities; whether you're contributing ideas, feedback, code or bug reports, you are a massive help to us and everyone else in the community and you all deserve a big round of applause. However, whilst this is a good time of year to reflect on what we've all done and plan for the future, it's also an even better time to take a break and spend time with friends and family. Step away from the keyboard for a few days. Stop tracking social media and email. Unwind. Recharge your batteries and do something fun (yes, I know that for many of us, myself included, coding falls into that category so maybe I'll let you off with that!) There'll be plenty of time to reflect on 2019 and look forward to 2020 in the days ahead but for now take a break - your friends, family, pets and even you will benefit from it! All the best and I look forward to talking to you all next year and maybe meeting a few of you too &lt;span aria-label="Happy" class="emoticon_happy emoticon-inline" style="height:16px;width:16px;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:3b5c62b4-0125-4f4c-9c94-a06929817787] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/aHKqcZNoySQ" height="1" width="1" alt=""/&gt;</content><summary>Yes it's that time of year again when some of us celebrate the festive season in a range of manners including parties, taking it easy, various pet projects and writing blog entries! Well this year rather than try to summarise the entire 2019 editorial or even give an update since the last one (you can find it all here anyway), I want to take a different approach. Of course I want to say a big than...</summary><dc:creator>Mark Little</dc:creator><dc:date>2019-12-25T07:18:23Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/12/25/this-week-in-jboss-25th-december-2019-merry-christmas-everybody</feedburner:origLink></entry><entry><title>Infinispan 10.1.0.Final</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PfZkBUPeHog/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_10_1_0_final</id><updated>2019-12-23T21:16:53Z</updated><published>2019-12-23T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Hi there,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;we finish 2019 in style with the Final release of Infinispan 10.1, codenamed &lt;a href="https://www.cervezaturia.es"&gt;"Turia"&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_console"&gt;&lt;a class="anchor" href="#_server_console"&gt;&lt;/a&gt;Server console&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The highlight of this release is the new server console which is now based on &lt;a href="https://www.patternfly.org/v4/"&gt;Patterfly 4&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;. We will soon have a blog post detailing the work that has been done and our future plans. In the meantime, here are a few screenshots:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="//infinispan.org/blog/img/ispn101welcome.png"&gt;&lt;img src="//infinispan.org/blog/thumb/ispn101welcome.png" alt="Welcome Page" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="//infinispan.org/blog/img/ispn101console.png"&gt;&lt;img src="//infinispan.org/blog/thumb/ispn101console.png" alt="Console Caches" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;a class="image" href="//infinispan.org/blog/img/ispn101console2.png"&gt;&lt;img src="//infinispan.org/blog/thumb/ispn101console2.png" alt="Console Cache Stats" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_security"&gt;&lt;a class="anchor" href="#_security"&gt;&lt;/a&gt;Security&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Many changes related to security have happened since 10.0:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Native SSL/TLS provided by &lt;a href="https://github.com/wildfly-security/wildfly-openssl"&gt;WildFly OpenSSL&lt;/a&gt;. The server only ships with native libraries for Linux x86_64, but you can download natives for other platforms and architectures&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Improved usability of the Hot Rod client configuration with better defaults&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Full support for authorization for admin operations via the RESTful endpoint&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Console authentication support&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Kerberos authentication for both Hot Rod (GSSAPI, GS2) and HTTP/Rest (SPNEGO)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Improved LDAP realm configuration with connection tuning and attribute references&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Rewritten client/server security documentation including examples on how to create certificate chains, connecting to various LDAP directories and &lt;a href="https://www.keycloak.org/"&gt;KeyCloak&lt;/a&gt;, etc.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server"&gt;&lt;a class="anchor" href="#_server"&gt;&lt;/a&gt;Server&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A command-line switch to specify an alternate logging configuration file&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query and indexing operations/stats are now exposed over the RESTful API&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tasks and Scripting support&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for binding the endpoints to 0.0.0.0 / ::0 (aka INADDR_ANY)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_non_blocking"&gt;&lt;a class="anchor" href="#_non_blocking"&gt;&lt;/a&gt;Non-blocking&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;More work has landed on the quest to completely remove blocking calls from our internals. The following have been made non-blocking:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;State transfer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The size operation&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache stream ops with primitive types&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Additionally caches now have a reactive Publisher which is intended as a fully non-blocking approach to distributed operations.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_query"&gt;&lt;a class="anchor" href="#_query"&gt;&lt;/a&gt;Query&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The query components have been reorganized so that they are more modular.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_monitoring"&gt;&lt;a class="anchor" href="#_monitoring"&gt;&lt;/a&gt;Monitoring&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The introduction of histogram and timer metrics.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;/metrics&lt;/code&gt; endpoint now includes &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; microprofile metrics&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_stores"&gt;&lt;a class="anchor" href="#_stores"&gt;&lt;/a&gt;Stores&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The REST cache store has been updated to use the v2 RESTful API.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_removals_and_deprecations"&gt;&lt;a class="anchor" href="#_removals_and_deprecations"&gt;&lt;/a&gt;Removals and deprecations&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The old RESTful API (v1) has been partially reinstated until 11.0. Bulk ops are disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Infinispan Lucene Directory has been deprecated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The memcached protocol server has been deprecated. If you were relying on this, come and talk to us about working on a binary protocol implementation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_bug_fixes_clean_ups_and_documentation"&gt;&lt;a class="anchor" href="#_bug_fixes_clean_ups_and_documentation"&gt;&lt;/a&gt;Bug fixes, clean-ups and documentation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Over 160 issues fixed including a lot of documentation updates. See the &lt;a href="https://issues.redhat.com/issues/?filter=12344079"&gt;full list of changes and fixes&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us"&gt;&lt;/a&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PfZkBUPeHog" height="1" width="1" alt=""/&gt;</content><summary>Hi there, we finish 2019 in style with the Final release of Infinispan 10.1, codenamed "Turia". Server console The highlight of this release is the new server console which is now based on Patterfly 4 and React.js. We will soon have a blog post detailing the work that has been done and our future plans. In the meantime, here are a few screenshots: Security Many changes related to security have hap...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2019-12-23T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2019/12/23/infinispan-10/</feedburner:origLink></entry><entry><title>Tracing .NET Core applications</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9QUsfR0Ujls/" /><category term=".NET Core" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=660147</id><updated>2019-12-23T08:00:06Z</updated><published>2019-12-23T08:00:06Z</published><content type="html">&lt;p&gt;In this article, we’ll look at different ways of collecting and inspecting events from the &lt;a href="https://developers.redhat.com/products/dotnet/overview"&gt;.NET Core runtime&lt;/a&gt; and base class library (BCL).&lt;/p&gt; &lt;h2&gt;EventListener&lt;/h2&gt; &lt;p&gt;The &lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener?view=netcore-3.0"&gt;EventListener&lt;/a&gt;&lt;/code&gt; class allows us to get events of the running application. Let’s learn how to use it with an example application. Our application performs an HTTP get and prints the length of the received response.&lt;span id="more-660147"&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;using var httpClient = new HttpClient(); string response = await httpClient.GetStringAsync("http://redhatloves.net/"); Console.WriteLine($"Received response with length {response.Length}"); &lt;/pre&gt; &lt;p&gt;The .NET Core base classes (like &lt;code&gt;HttpClient&lt;/code&gt;) record events using the &lt;code&gt;EventSource&lt;/code&gt; class. Each &lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventsource?view=netcore-3.0"&gt;EventSource&lt;/a&gt;&lt;/code&gt; has a name. &lt;code&gt;EventSources&lt;/code&gt; are created when we are using some functionality. To know what sources are available, we’ll create an &lt;code&gt;EventListener&lt;/code&gt; and override &lt;code&gt;OnEventSourceCreated&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;sealed class EventSourceCreatedListener : EventListener { protected override void OnEventSourceCreated(EventSource eventSource) { base.OnEventSourceCreated(eventSource); Console.WriteLine($"New event source: {eventSource.Name}"); } } &lt;/pre&gt; &lt;p&gt;When we instantiate this class, the base constructor will call &lt;code&gt;OnEventSourceCreated&lt;/code&gt; for all existing sources. When new sources are added (for example, when we first use &lt;code&gt;HttpClient&lt;/code&gt;) &lt;code&gt;OnEventSourceCreated&lt;/code&gt; will be called for them, too.&lt;/p&gt; &lt;p&gt;We add an instance to our application:&lt;/p&gt; &lt;pre&gt;using var eventSourceListener = new EventSourceCreatedListener(); using var httpClient = new HttpClient(); ... &lt;/pre&gt; &lt;p&gt;When we run the application this is this output:&lt;/p&gt; &lt;pre&gt;New event source: Microsoft-Windows-DotNETRuntime New event source: System.Runtime New event source: Microsoft-System-Net-Http New event source: System.Diagnostics.Eventing.FrameworkEventSource New event source: Microsoft-Diagnostics-DiagnosticSource New event source: Microsoft-System-Net-Sockets New event source: Microsoft-System-Net-NameResolution New event source: System.Threading.Tasks.TplEventSource New event source: System.Buffers.ArrayPoolEventSource New event source: Microsoft-System-Net-Security New event source: System.Collections.Concurrent.ConcurrentCollectionsEventSource &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;Microsoft-Windows-DotNETRuntime&lt;/code&gt; and &lt;code&gt;System.Runtime&lt;/code&gt; are present when we create the &lt;code&gt;EventSourceCreatedListener&lt;/code&gt;. The other event sources are created when we use the &lt;code&gt;HttpClient&lt;/code&gt;. There is an event source for HTTP (Microsoft-System-Net-Http), we also see an event source for the name resolution (Microsoft-System-Net-NameResolution), security (Microsoft-System-Net-Security) and sockets (Microsoft-System-Net-Sockets). Let’s print events from the HTTP source to &lt;code&gt;Console&lt;/code&gt; with another listener.&lt;/p&gt; &lt;p&gt;We create an &lt;code&gt;EventListener&lt;/code&gt; that prints events for a specific &lt;code&gt;EventSource&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;sealed class EventSourceListener : EventListener { private readonly string _eventSourceName; private readonly StringBuilder _messageBuilder = new StringBuilder(); public EventSourceListener(string name) { _eventSourceName = name; } protected override void OnEventSourceCreated(EventSource eventSource) { base.OnEventSourceCreated(eventSource); if (eventSource.Name == _eventSourceName) { EnableEvents(eventSource, EventLevel.LogAlways, EventKeywords.All); } } protected override void OnEventWritten(EventWrittenEventArgs eventData) { base.OnEventWritten(eventData); string message; lock (_messageBuilder) { _messageBuilder.Append(""); message = _messageBuilder.ToString(); _messageBuilder.Clear(); } Console.WriteLine(message); } } &lt;/pre&gt; &lt;p&gt;In &lt;code&gt;OnEventSourceCreated&lt;/code&gt; we enable the receiving of events for the specific source. We’re not filtering for a specific log level (EventLevel.LogAlways) or specific keywords (EventKeywords.All). In &lt;code&gt;OnEventWritten&lt;/code&gt; we print the event to the &lt;code&gt;Console&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now we add an instance to our program for the &lt;code&gt;Microsoft-System-Net-Http&lt;/code&gt; EventSource:&lt;/p&gt; &lt;pre&gt;using var httpEventListener = new EventSourceListener("Microsoft-System-Net-Http"); ... &lt;/pre&gt; &lt;p&gt;When we run our program again we get a lot of events from the HTTP &lt;code&gt;EventSource&lt;/code&gt;. For example, we see that our request gets redirected and we see information about the SSL negotiation.&lt;/p&gt; &lt;pre&gt;… Event Microsoft-System-Net-Http - HandlerMessage : 55530882,6044116,0,SendAsyncCore,Received response: StatusCode: 301, ReasonPhrase: 'Moved Permanently' … &amp;#60;- Event Microsoft-System-Net-Http - HandlerMessage : 16294043,41622463,0,TraceConnection,HttpConnection(HttpConnectionPool https://developers.redhat.com:443). SslProtocol:Tls12, NegotiatedApplicationProtocol:, NegotiatedCipherSuite:TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, CipherAlgorithm:Aes256, CipherStrength:256, HashAlgorithm:None, HashStrength:0, KeyExchangeAlgorithm:DiffieHellman, KeyExchangeStrength:0, LocalCertificate:, RemoteCertificate:[Subject] CN=openshift.redhat.com, O=Red Hat, L=Raleigh, S=North Carolina, C=US [Issuer] CN=GeoTrust RSA CA 2018, OU=www.digicert.com, O=DigiCert Inc, C=US … &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;EventSource&lt;/code&gt; named &lt;code&gt;Microsoft-Windows-DotNETRuntime&lt;/code&gt; provides events from the runtime like the Garbage Collector (GC), just in time compiler (JIT) and &lt;code&gt;ThreadPool&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;dotnet-trace&lt;/h2&gt; &lt;p&gt;&lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace"&gt;dotnet-trace&lt;/a&gt;&lt;/code&gt; is a new global tool with .NET Core 3.0. With &lt;code&gt;dotnet-trace&lt;/code&gt; we can create a trace from a running application.&lt;/p&gt; &lt;p&gt;To install dotnet-trace run:&lt;/p&gt; &lt;pre&gt;dotnet tool install --global dotnet-trace &lt;/pre&gt; &lt;p&gt;A trace can be created with the following command:&lt;/p&gt; &lt;pre&gt;dotnet trace collect -p &amp;#60;pid&amp;#62; [--buffersize 256] [-o &amp;#60;outputpath&amp;#62;] [--providers &amp;#60;providerlist&amp;#62;] [--profile &amp;#60;profilename&amp;#62;] [--format NetTrace|Speedscope] &lt;/pre&gt; &lt;p&gt;We need to specify the &lt;code&gt;&amp;#60;pid&amp;#62;&lt;/code&gt; of the program that we want to trace. Optionally, we can specify a buffer size (default: 256MB). The output path is the filename for the trace file. &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; allow us to specify the events we are interested in. A &lt;code&gt;profile&lt;/code&gt; is a pre-defined number of providers. You can see the available profiles using the &lt;code&gt;list-profiles&lt;/code&gt; subcommand:&lt;/p&gt; &lt;pre&gt;$ dotnet trace list-profiles cpu-sampling - Useful for tracking CPU usage and general .NET runtime information. This is the default option if no profile or providers are specified. gc-verbose - Tracks GC collections and samples object allocations. gc-collect - Tracks GC collections only at very low overhead. &lt;/pre&gt; &lt;p&gt;As indicated in the output, if you don’t specify &lt;code&gt;providers&lt;/code&gt; and a &lt;code&gt;profile&lt;/code&gt;, the &lt;code&gt;cpu-samping&lt;/code&gt; profile is used by default.&lt;/p&gt; &lt;p&gt;Multiple providers can be specified using a comma to separate them. By default, events will be captured for any keyword and level verbose. We can change this by appending a &lt;code&gt;:[&amp;#60;keyword_hex_nr&amp;#62;]:&amp;#60;loglevel_nr&amp;#62;]&lt;/code&gt; suffix to the provider name. The &lt;code&gt;keyword_hex_nr&lt;/code&gt; may be omitted to indicate all keywords. For example, to trace the &lt;code&gt;Microsoft-System-Net-Http&lt;/code&gt; &lt;code&gt;EventSource&lt;/code&gt; at &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlevel?view=netcore-3.0"&gt;EventLevel.Informational&lt;/a&gt;, we can specify: &lt;code&gt;--providers Microsoft-System-Net-Http::4&lt;/code&gt;. An asterisk may be used to trace all events (i.e. &lt;code&gt;--providers '*'&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Some providers can be configured with additional key-value pairs. These are added to the provider name &lt;code&gt;:[key1=value1][;key2=value2]&lt;/code&gt;. When the &lt;code&gt;EventSource&lt;/code&gt; has associated &lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventcounter?view=netcore-3.0"&gt;EventCounters&lt;/a&gt;&lt;/code&gt;, the report interval can be set using the &lt;code&gt;EventCounterIntervalSec&lt;/code&gt; key.&lt;/p&gt; &lt;p&gt;The default format (nettrace) is meant for the Windows &lt;a href="https://github.com/microsoft/perfview"&gt;PerfView&lt;/a&gt; tool. If you are doing performance analysis, you can use the &lt;code&gt;speedscope&lt;/code&gt; format which can be opened on any platform using the &lt;a href="https://www.speedscope.app/"&gt;https://www.speedscope.app/&lt;/a&gt; website, or offline using the npm &lt;a href="https://www.npmjs.com/package/speedscope"&gt;speedscopeapp&lt;/a&gt; package. When you are logging in the &lt;code&gt;speedscope&lt;/code&gt; format, the trace is first captured into the &lt;code&gt;nettrace&lt;/code&gt; format and then converted into the &lt;code&gt;speedscope&lt;/code&gt; format. This conversion can also be done on the command line using &lt;code&gt;dotnet trace convert&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, this is how you can trace a .NET Core application named &lt;code&gt;web&lt;/code&gt; for the default profile (cpu-sampling) and output a &lt;code&gt;speedscope&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;$ dotnet trace collect -p $(pidof web) --format speedscope Provider Name Keywords Level Enabled By Microsoft-System-Net-Http 0xFFFFFFFFFFFFFFFF Verbose(5) --providers Process : /tmp/web/bin/Debug/netcoreapp3.0/web Output File : /tmp/trace/trace.nettrace [00:00:00:08] Recording trace 2.3301 (MB) Press or to exit... Trace completed. Writing: /tmp/trace/trace.speedscope.json Conversion complete &lt;/pre&gt; &lt;p&gt;As indicated by the tool, you can stop tracing using Ctrl+C or Enter. For more information about using speedscope, check out &lt;a href="https://adamsitnik.com/speedscope/"&gt;Adam Sitnick’s blog post&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;EventPipe environment variables&lt;/h2&gt; &lt;p&gt;dotnet-trace enables the trace output when an application is running. By using environment variables we can also enable tracing from the application start. This also allows us to trace a tree of processes.&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt; &lt;td&gt;Description&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;COMPlus_EnableEventPipe&lt;/td&gt; &lt;td&gt;Enable/disable event pipe.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;COMPlus_EventPipeOutputPath&lt;/td&gt; &lt;td&gt;The full path excluding filename for the trace file.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;COMPlus_EventPipeCircularMB&lt;/td&gt; &lt;td&gt;Circular buffer size in megabytes (default: 1024 MB).&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;COMPlus_EventPipeConfig&lt;/td&gt; &lt;td&gt;Configuration for EventPipe.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The &lt;code&gt;EventPipeConfig&lt;/code&gt; has the same format as the &lt;code&gt;dotnet trace&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; argument. The &lt;code&gt;EventPipeOutputPath&lt;/code&gt; refers to a folder. This allows multiple processes to write a trace file by including the process pid in the filename. The &lt;code&gt;EventPipe&lt;/code&gt; uses the &lt;code&gt;nettrace&lt;/code&gt; format.&lt;/p&gt; &lt;p&gt;For example, to capture all events from a console application, we can run:&lt;/p&gt; &lt;pre&gt;COMPlus_EnableEventPipe=1 COMPlus_EventPipeConfig=* dotnet console.dll &lt;/pre&gt; &lt;h2&gt;TraceEvent library&lt;/h2&gt; &lt;p&gt;If you want to write tools that process these trace files, you can use the &lt;a href="https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent/"&gt;Microsoft.Diagnostics.Tracing.TraceEvent&lt;/a&gt; library. This library also allows us to read the nettrace files on Linux:&lt;/p&gt; &lt;pre&gt;# add the package: # dotnet add package Microsoft.Diagnostics.Tracing.TraceEvent using System; using Microsoft.Diagnostics.Tracing; using Microsoft.Diagnostics.Tracing.Etlx; using Microsoft.Diagnostics.Tracing.Parsers; namespace console { class Program { static void Main(string[] args) { if (args.Length &amp;#60; 1) { Console.WriteLine("You must specify a nettrace file."); return; } using (var traceLog = new TraceLog(TraceLog.CreateFromEventPipeDataFile(args[0]))) { var traceSource = traceLog.Events.GetSource(); traceSource.AllEvents += delegate (TraceEvent data) { Console.WriteLine("{0}", data); }; traceSource.Process(); } } } } &lt;/pre&gt; &lt;h2&gt;Microsoft.Extensions.Logging&lt;/h2&gt; &lt;p&gt;ASP.NET Core uses the &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; package for logging. You can find more information about this in &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0"&gt;Logging in .NET Core and ASP.NET Core&lt;/a&gt;. Multiple sinks can be configured as &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0#built-in-logging-providers"&gt;Logging providers&lt;/a&gt;. The &lt;code&gt;EventSource&lt;/code&gt; logger provider (which is included by default) allows to include the ASP.NET Core log output in the trace output. The &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-3.0#event-source-provider"&gt;EventSource section&lt;/a&gt; describes how to use the &lt;code&gt;Microsoft-Extensions-Logging&lt;/code&gt; EventSource with &lt;code&gt;dotnet-trace&lt;/code&gt;, and control the format, and log level of the individual loggers.&lt;/p&gt; &lt;h2&gt;dotnet-counters&lt;/h2&gt; &lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace"&gt;dotnet-counters&lt;/a&gt; is a new global tool with .NET Core 3.0. With &lt;code&gt;dotnet-counters&lt;/code&gt; we can live monitor &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventcounter?view=netcore-3.0"&gt;EventCounters&lt;/a&gt; of a running .NET Core application.&lt;br /&gt; To install counters run:&lt;/p&gt; &lt;pre&gt;dotnet tool install --global dotnet-counters &lt;/pre&gt; &lt;p&gt;Monitoring can be performed with the following command.&lt;/p&gt; &lt;pre&gt;dotnet-counters monitor -p &amp;#60;pid&amp;#62; [--refreshInterval &amp;#60;intervalSec&amp;#62;] [&amp;#60;counter_list&amp;#62;] &lt;/pre&gt; &lt;p&gt;When no counter list is specified, a default set of .NET runtime counters are shown information about the GC, &lt;code&gt;ThreadPool&lt;/code&gt;, lock contention, active timers, and exception count.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&amp;#60;counter_list&amp;#62;&lt;/code&gt; can be specified as a space separated list of &lt;code&gt;provider_name[:counter_name]&lt;/code&gt;. When the &lt;code&gt;&amp;#60;counter_name&amp;#62;&lt;/code&gt; is omitted, all counters of the provider are included.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you’ve learned how you can capture events from the&lt;a href="https://developers.redhat.com/products/dotnet/docs-and-apis"&gt; .NET Core runtime&lt;/a&gt; and BCL using &lt;code&gt;EventListener&lt;/code&gt;, &lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace"&gt;dotnet-trace&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;EventPipe&lt;/code&gt; environment variables. Using the &lt;code&gt;LoggingEventSource&lt;/code&gt; we can including events from &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; (like ASP.NET Core). To view and analyze these events you can use &lt;a href="https://github.com/microsoft/perfview"&gt;PerfView&lt;/a&gt; on windows, the cross-platform &lt;a href="https://www.speedscope.app/"&gt;speedscope&lt;/a&gt;, or build your own cross-platform tools using &lt;a href="https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.TraceEvent/"&gt;Microsoft.Diagnostics.Tracing.TraceEvent&lt;/a&gt;. With &lt;code&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace"&gt;dotnet-counters&lt;/a&gt;&lt;/code&gt; we can get a live view of EventCounters.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#38;linkname=Tracing%20.NET%20Core%20applications" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F23%2Ftracing-net-core-applications%2F&amp;#038;title=Tracing%20.NET%20Core%20applications" data-a2a-url="https://developers.redhat.com/blog/2019/12/23/tracing-net-core-applications/" data-a2a-title="Tracing .NET Core applications"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/23/tracing-net-core-applications/"&gt;Tracing .NET Core applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9QUsfR0Ujls" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, we’ll look at different ways of collecting and inspecting events from the .NET Core runtime and base class library (BCL). EventListener The EventListener class allows us to get events of the running application. Let’s learn how to use it with an example application. Our application performs an HTTP get and prints the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/23/tracing-net-core-applications/"&gt;Tracing .NET Core applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">660147</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2019-12-23T08:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/23/tracing-net-core-applications/</feedburner:origLink></entry><entry><title>JMS 2.0 on Kubernetes with Apache ActiveMQ</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QFvNjmXI1e8/" /><category term="Uncategorized" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=628257</id><updated>2019-12-20T08:00:39Z</updated><published>2019-12-20T08:00:39Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about &lt;a href="https://activemq.apache.org/"&gt;Apache ActiveMQ&lt;/a&gt; from Justin Ross, Engineering Manager at Red Hat.&lt;/p&gt; &lt;p&gt;Messaging has long been at the center of reliable, distributed systems. Now those systems are migrating to the cloud. This talk explores the latest improvements to the venerable &lt;a href="https://docs.oracle.com/javaee/6/tutorial/doc/bncdr.html"&gt;JMS API&lt;/a&gt; and shows how Apache ActiveMQ has evolved to function as a cloud-native service. It also looks at emerging &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt;-native alternatives to JMS. You&amp;#8217;ll learn how to make Java messaging and ActiveMQ part of a modern, event-driven application.&lt;/p&gt; &lt;p&gt;Watch the complete presentation:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/mkqVxWZfGfI" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Join us at an upcoming&lt;/span&gt;&lt;a href="https://developers.redhat.com/events/"&gt; &lt;span style="font-weight: 400;"&gt;developer event&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and see our collection of&lt;/span&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; &lt;span style="font-weight: 400;"&gt;past DevNation Live tech talks&lt;/span&gt;&lt;/a&gt;&lt;a href="https://developers.redhat.com/events/"&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#38;linkname=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fjms-2-0-on-kubernetes-with-apache-activemq%2F&amp;#038;title=JMS%202.0%20on%20Kubernetes%20with%20Apache%20ActiveMQ" data-a2a-url="https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/" data-a2a-title="JMS 2.0 on Kubernetes with Apache ActiveMQ"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/"&gt;JMS 2.0 on Kubernetes with Apache ActiveMQ&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QFvNjmXI1e8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. In this talk, you’ll learn about Apache ActiveMQ from Justin Ross, Engineering Manager at Red Hat. Messaging has long been at the center of reliable, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/"&gt;JMS 2.0 on Kubernetes with Apache ActiveMQ&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">628257</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-12-20T08:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/20/jms-2-0-on-kubernetes-with-apache-activemq/</feedburner:origLink></entry><entry><title>Service Binding Operator: The Operator in action</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cJuAXXCdz_c/" /><category term="Cloud" /><category term="Java" /><category term="Node.js" /><category term="OpenShift" /><category term="Operator" /><category term="Service Binding Operator" /><author><name>Shoubhik Bose</name></author><id>https://developers.redhat.com/blog/?p=663827</id><updated>2019-12-20T08:00:09Z</updated><published>2019-12-20T08:00:09Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/12/05/introducing-the-service-binding-operator"&gt;In the previous article,&lt;/a&gt; we introduced the &lt;a href="https://github.com/redhat-developer/service-binding-operator"&gt;Service Binding Operator&lt;/a&gt; and explained how it functions. In this article, we&amp;#8217;ll look at a more advanced topic—custom environment variables—and walk through a typical usage scenario.&lt;/p&gt; &lt;h2&gt;Custom environment variables&lt;/h2&gt; &lt;p&gt;To make binding applications (e.g., legacy &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; applications that depend on JDBS strings)  together with backing services more flexible, the Service Binding Operator supports the optional use of custom environment variables. To use custom environment variables, an application developer creates a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that looks like the one shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_659827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c.png"&gt;&lt;img aria-describedby="caption-attachment-659827" class="wp-image-659827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-1024x570.png" alt="A ServiceBindingRequest that uses custom environment variables." width="640" height="356" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-1024x570.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-300x167.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c-768x427.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf553f8120c.png 1564w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659827" class="wp-caption-text"&gt;Figure 1: A &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that uses custom environment variables.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The custom environment variables, which in this example access a PostgreSQL database, are defined under &lt;code&gt;customEnvVar&lt;/code&gt; and provide custom binding information for the application to bind with its needed backing services.&lt;/p&gt; &lt;h2&gt;The Service Binding Operator in action&lt;/h2&gt; &lt;p&gt;The best way to appreciate the features provided by the Service Binding Operator is to see them in action in a typical usage scenario. A set of example scenarios and operators that manage backing services is being developed in parallel with Service Binding Operator. (Links to these scenarios and backing operators are included in the final section of this article.)&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use one of these scenarios and operators as an example. For the backing service, we will use a PostgreSQL database managed by &lt;a href="https://github.com/operator-backing-service-samples/postgresql-operator" target="_blank" rel="noopener noreferrer"&gt;this sample operator&lt;/a&gt;. For the application being bound to this backing service, we’ll use &lt;a href="https://github.com/redhat-developer/service-binding-operator/tree/master/examples/nodejs_postgresql" target="_blank" rel="noopener noreferrer"&gt;this Java, Spring Boot example application&lt;/a&gt; that implements a fruit inventory system.&lt;/p&gt; &lt;p&gt;The documentation included with this and other example applications includes the full set of instructions, including admin tasks such as installing the Service Binding Operator and the backing service. In this illustration, we will focus on the steps taken by an application developer and the actions performed by the Service Binding Operator.&lt;/p&gt; &lt;p&gt;Before we begin, we have to install the Service Binding Operator. The operator is available through the OperatorHub in the &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; console&amp;#8217;s console&amp;#8217;s Administrative perspective as shown in Figure 1:&lt;/p&gt; &lt;div id="attachment_669977" style="width: 663px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669977" class="wp-image-669977" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-300x177.png" alt="" width="653" height="385" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-300x177.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-768x454.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13-1024x605.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-15-48-13.png 1378w" sizes="(max-width: 653px) 100vw, 653px" /&gt;&lt;p id="caption-attachment-669977" class="wp-caption-text"&gt;Figure 2: Installing the Service Binding Operator.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The sequence of application developer steps and Service Binding Operator actions is as follows.&lt;/p&gt; &lt;h3&gt;Step 1: Import the app&lt;/h3&gt; &lt;p&gt;The application developer logs into the &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; console&amp;#8217;s Developer perspective and creates a new app by referencing the application&amp;#8217;s source repo, as shown in Figure 3:&lt;/p&gt; &lt;div id="attachment_659907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9.png"&gt;&lt;img aria-describedby="caption-attachment-659907" class="wp-image-659907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-1024x554.png" alt="Creating a new app in the Red Hat OpenShift console's Developer perspective." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-1024x554.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9-768x416.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf56e6e18f9.png 1578w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659907" class="wp-caption-text"&gt;Figure 3: Creating a new app in the Red Hat OpenShift console&amp;#8217;s Developer perspective.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Create the database that the app will use&lt;/h3&gt; &lt;p&gt;The app developer now creates the database that the app will use, as shown in Figure 4. Note that at this point, the app and the backing service for the database are not bound together:&lt;/p&gt; &lt;div id="attachment_659857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7.png"&gt;&lt;img aria-describedby="caption-attachment-659857" class="wp-image-659857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-1024x547.png" alt="Creating the database that the app will use." width="640" height="342" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-1024x547.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7-768x411.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55c0196e7.png 1590w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659857" class="wp-caption-text"&gt;Figure 4: Creating the database that the app will use.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;OpenShift creates a &lt;code&gt;Deployment&lt;/code&gt; for the app, starts a pod for the app, deploys the app, and provides a route to the app. At this point, the app is running but without its backing service. Our example app is constructed so that it can display its main page, but any attempt to create new entries in the fruit inventory fails and raises an alert due to the lack of a backing service database, as shown in Figure 5:&lt;/p&gt; &lt;div id="attachment_659867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de.png"&gt;&lt;img aria-describedby="caption-attachment-659867" class="wp-image-659867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-1024x597.png" alt="A failed entry creates an alert." width="640" height="373" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-1024x597.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-300x175.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de-768x448.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf55f1104de.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659867" class="wp-caption-text"&gt;Figure 5: A failed entry creates an alert.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Show intent to bind by creating a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;At this point, the application developer signals the intent to bind the application together with a backing service by creating a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;. This &lt;code&gt;ServiceBindingRequest&lt;/code&gt; includes custom environment variables that provide database connection information such as a username, password, and connection URL, plus a reference (&lt;code&gt;ResourceRef&lt;/code&gt;) that refers to the backing database service by name, as shown in Figure 6:&lt;/p&gt; &lt;div id="attachment_659877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b.png"&gt;&lt;img aria-describedby="caption-attachment-659877" class="wp-image-659877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-1024x602.png" alt="The YAML for this ServiceBindingRequest." width="640" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-1024x602.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b-768x452.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf561319c7b.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659877" class="wp-caption-text"&gt;Figure 6: The YAML for this &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 4: The Service Binding Operator shares binding information with the application&lt;/h3&gt; &lt;p&gt;This information is collected by the Service Binding Operator into an intermediary secret, which is then shared with the application. The binding information corresponds to the application’s labels and backing service connection attributes.&lt;/p&gt; &lt;h3&gt;Step 5: The Service Binding Operator detects changes to the application’s &lt;code&gt;Deployment&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The Service Binding Operator reconciles these changes. The entity in control of that pod (for example, a &lt;code&gt;Deployment&lt;/code&gt; or &lt;code&gt;DeploymentConfig)&lt;/code&gt; restarts the pod to have the changes take effect, resulting in what you see in Figure 7:&lt;/p&gt; &lt;div id="attachment_659887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-659887" class="wp-image-659887 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-1024x622.png" alt="The pod is now restarted." width="640" height="389" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-1024x622.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-300x182.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560-768x466.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf564fbe560.png 1588w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-659887" class="wp-caption-text"&gt;Figure 7: The pod is now restarted.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The application can now access the backing service database, as we see in Figure 8:&lt;/p&gt; &lt;div id="attachment_659897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345.png"&gt;&lt;img aria-describedby="caption-attachment-659897" class="wp-image-659897 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-1024x671.png" alt="The application in action." width="640" height="419" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-1024x671.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-300x197.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345-768x503.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf568762345.png 1258w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659897" class="wp-caption-text"&gt;Figure 8: The application in action.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;What’s next?&lt;/h2&gt; &lt;p&gt;The Service Binding Operator is 100% open source. Download the code, kick the tires, provide feedback and ideas for new features, and contribute code!&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator" target="_blank" rel="noopener noreferrer"&gt;The Service Binding Operator GitHub repo&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator/blob/master/README.md#example-scenarios"&gt;A set of examples&lt;/a&gt;, each of which illustrates a usage scenario for the Service Binding Operator, is being developed in parallel with the Operator. Each example includes documentation and can be run either through the OpenShift web console or command-line client.&lt;/li&gt; &lt;li&gt;Sample Backing Service Operators &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;are available here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#38;linkname=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F20%2Fservice-binding-operator-the-operator-in-action%2F&amp;#038;title=Service%20Binding%20Operator%3A%20The%20Operator%20in%20action" data-a2a-url="https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/" data-a2a-title="Service Binding Operator: The Operator in action"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/"&gt;Service Binding Operator: The Operator in action&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cJuAXXCdz_c" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous article, we introduced the Service Binding Operator and explained how it functions. In this article, we&amp;#8217;ll look at a more advanced topic—custom environment variables—and walk through a typical usage scenario. Custom environment variables To make binding applications (e.g., legacy Java applications that depend on JDBS strings)  together with backing services more flexible, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/"&gt;Service Binding Operator: The Operator in action&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">663827</post-id><dc:creator>Shoubhik Bose</dc:creator><dc:date>2019-12-20T08:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/20/service-binding-operator-the-operator-in-action/</feedburner:origLink></entry><entry><title>Red Hat Summit 2020 - An Advanced Agile Integration Blueprint</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3OJm_GnPghE/red-hat-summit-2020-advanced-agile-integration-blueprint.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2020_an_advanced_agile_integration_blueprint</id><updated>2019-12-20T06:00:06Z</updated><published>2019-12-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://reg.summit.redhat.com/" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="625" data-original-width="1585" height="126" src="https://1.bp.blogspot.com/-XWdQUP29nkc/XcRFU57TXTI/AAAAAAAAwsk/EvBuCEj5XaAvkB2pkuabl2u9BYxyB86XQCNcBGAsYHQ/s320/Screenshot%2B2019-11-07%2Bat%2B16.38.47.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Back in &lt;a href="http://www.schabell.org/2019/11/red-hat-summit-2020-submissions.html" target="_blank"&gt;early November I shared&lt;/a&gt; a pile of submissions to &lt;a href="https://reg.summit.redhat.com/" target="_blank"&gt;Red Hat Summit 2020 in San Francisco on Apr 27-29&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Since that time I've again, for the 4th year in a row, been leading the team that select and delivers your hands-on labs experience at Red Hat Summit.&lt;br /&gt;&lt;br /&gt;As of last week we've finalized the hands-on labs and started sending acceptance emails (rejects follow later), along with the first round of acceptances for other sessions. Anyone who looks closely at my submissions to Red Hat Summit each year should notice I'm no longer putting any hands-on labs in the call for papers. Being on the selection team I've felt that's not right to participate in that type of session, so I've focused on other session types.&lt;br /&gt;&lt;br /&gt;With this round of notifications, I've gotten one session accepted. Let's see what you can join me for in San Francisco, shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Note that just because you did not get an acceptance email for your submissions this time around, it doesn't mean you are not going to be accepted in a later round of notifications. Watch your inbox for more notifications in January 2020.&lt;br /&gt;&lt;br /&gt;So far, this session I will be presenting together with my colleague:&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Concept to Reality: An Advanced Agile Integration Blueprint &lt;/h3&gt;&lt;i&gt;Are you all in on the concept of agile integration or just getting your toe in the water? Are you an expert or just getting started with concepts like integration, microservices, message integration, process integration, APIs, and all the things that make your customers experience the best it can be? This session has something for all levels as it walks attendees through the architecture concepts with whiteboard diagrams, easy to grasp images, with a bottom up approach to connecting the dots for the concepts of an integration architecture. Once the groundwork has been laid, the second half of this session take a look at an integration architecture blueprint based on three successful customer integration solutions. Presenting the results of researching these successful solution architectures provides attendees with a clear blueprint for matching to their own architectures, or to help solidify their plans for architecting successful integration solutions. (with &lt;a href="https://twitter.com/Christina_wm" target="_blank"&gt;Christina Lin&lt;/a&gt;)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Now enjoy your holidays, close out the year, and cross your fingers for more acceptance letters in January!&lt;i&gt; &lt;/i&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=IEM7xGJR1bE:_XZ-c_TFwPY:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=IEM7xGJR1bE:_XZ-c_TFwPY:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/IEM7xGJR1bE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3OJm_GnPghE" height="1" width="1" alt=""/&gt;</content><summary>Back in early November I shared a pile of submissions to Red Hat Summit 2020 in San Francisco on Apr 27-29. Since that time I've again, for the 4th year in a row, been leading the team that select and delivers your hands-on labs experience at Red Hat Summit. As of last week we've finalized the hands-on labs and started sending acceptance emails (rejects follow later), along with the first round of...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-12-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/IEM7xGJR1bE/red-hat-summit-2020-advanced-agile-integration-blueprint.html</feedburner:origLink></entry><entry><title>Introducing the Service Binding Operator</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9xxf3s-jmB8/" /><category term="Cloud" /><category term="Java" /><category term="Node.js" /><category term="OpenShift" /><category term="Operator" /><category term="Service Binding Operator" /><author><name>Shoubhik Bose</name></author><id>https://developers.redhat.com/blog/?p=659757</id><updated>2019-12-19T08:00:12Z</updated><published>2019-12-19T08:00:12Z</published><content type="html">&lt;p&gt;Connecting applications to the services that support them—for example, establishing the exchange of credentials between a &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; application and a database that it requires—is referred to as &lt;em&gt;binding&lt;/em&gt;. The configuration and maintenance of this binding together of applications and backing services can be a tedious and inefficient process. Manually editing YAML files to define binding information is error-prone and can introduce difficult-to-debug failures.&lt;/p&gt; &lt;h2&gt;Introduction to service binding&lt;/h2&gt; &lt;p&gt;The goal of the &lt;a href="https://github.com/redhat-developer/service-binding-operator"&gt;Service Binding Operator&lt;/a&gt; is to solve this binding problem. By making it easier for application developers to bind applications with needed backing services, the Service Binding Operator also assists operator providers in promoting and expanding the adoption of their operators. This article introduces the Service Binding Operator and describes how it functions. In the next article, we&amp;#8217;ll demonstrate its use through a real-world example.&lt;/p&gt; &lt;h3&gt;The case for managed binding&lt;/h3&gt; &lt;p&gt;The Service Binding Operator enables applications to use external services by automatically collecting and sharing binding information (credentials, connection details, volume mounts, secrets, etc.) with the application. In effect, the Service Binding Operator defines a contract between a &amp;#8220;bindable&amp;#8221; backing service (for example, a database operator) and an application requiring that backing service.&lt;/p&gt; &lt;p&gt;Note that in addition to the initial sharing of binding information, the binding is also &amp;#8220;managed&amp;#8221; by the Service Binding Operator. This statement means that, if credentials or URLs undergo modification by the backing service operator, those changes are automatically reflected in the application.&lt;/p&gt; &lt;p&gt;There are two parts to this contract. The first part concerns making the backing service bindable and the second part concerns binding the application and the service together. Both parts are supported by a new custom resource, the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;The &lt;code&gt;ServiceBindingRequest&lt;/code&gt; custom resource&lt;/h3&gt; &lt;p&gt;The Service Binding Operator enables application developers to more easily bind applications together with operator-managed backing services (such as a database) without having to perform manual configuration of secrets, ConfigMaps, etc. The Service Binding Operator accomplishes this task by automatically collecting binding information and sharing it with an application and an operator-managed backing service. This binding is performed through a new custom resource called a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;&lt;span class="pl-s"&gt;apiVersion: apps.openshift.io/v1alpha1&lt;/span&gt; &lt;span class="pl-s"&gt;kind: ServiceBindingRequest&lt;/span&gt; &lt;span class="pl-s"&gt;metadata:&lt;/span&gt; &lt;span class="pl-s"&gt; name: binding-request&lt;/span&gt; &lt;span class="pl-s"&gt; namespace: service-binding-demo&lt;/span&gt; &lt;span class="pl-s"&gt;spec:&lt;/span&gt; &lt;span class="pl-s"&gt; applicationSelector:&lt;/span&gt; &lt;span class="pl-s"&gt; resourceRef: nodejs-rest-http-crud&lt;/span&gt; &lt;span class="pl-s"&gt; group: apps&lt;/span&gt; &lt;span class="pl-s"&gt; version: v1&lt;/span&gt; &lt;span class="pl-s"&gt; resource: deployments&lt;/span&gt; &lt;span class="pl-s"&gt; backingServiceSelector:&lt;/span&gt; &lt;span class="pl-s"&gt; group: postgresql.baiju.dev&lt;/span&gt; &lt;span class="pl-s"&gt; version: v1alpha1&lt;/span&gt; &lt;span class="pl-s"&gt; kind: Database&lt;/span&gt; &lt;span class="pl-s"&gt; resourceRef: db-demo&lt;/span&gt;&lt;/pre&gt; &lt;/blockquote&gt; &lt;div id="attachment_663847" style="width: 610px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-663847" class="wp-image-663847" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest.png" alt="ServiceBindingRequest" width="600" height="267" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest.png 783w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ServiceBindingRequest-768x342.png 768w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;p id="caption-attachment-663847" class="wp-caption-text"&gt;Figure 1: The selectors in a &lt;code&gt;ServiceBindingRequest&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A &lt;code&gt;ServiceBindingRequest&lt;/code&gt; includes the following two selectors. The first is the &lt;code&gt;applicationSelector&lt;/code&gt;, which identifies the application to be bound with the backing service. The &lt;code&gt;ResourceRef&lt;/code&gt; defined here marks an application for binding. The second is the &lt;code&gt;backingServiceSelector&lt;/code&gt;, which identifies the backing service with which applications will be bound, as shown in Figure 1:&lt;/p&gt; &lt;p&gt;Additional data in the &lt;code&gt;ServiceBindingRequest&lt;/code&gt; can contain a combination of sensitive information such as usernames and passwords, plus non-sensitive information such as port numbers. In order to configure an existing operator to be bindable, an operator provider has to add a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; descriptor to the operator’s manifest. The &lt;code&gt;statusDescriptors&lt;/code&gt; in that manifest will contain the information needed by the Service Binding Operator to bind the application together with the backing service operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sample backing service operators that are already bindable are &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;available here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Figure 2 illustrates the relationship between the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;, its selectors, the application being bound, and the backing service. Note that for the &lt;code&gt;applicationSelector&lt;/code&gt;, the relevant attributes are the application’s group, version, resource, and &lt;code&gt;resourceRef&lt;/code&gt;, and that for the &lt;code&gt;backingServiceSelector&lt;/code&gt;, the relevant attributes are the version, kind, and &lt;code&gt;resourceRef&lt;/code&gt;:&lt;/p&gt; &lt;div id="attachment_659797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13.png"&gt;&lt;img aria-describedby="caption-attachment-659797" class="wp-image-659797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-1024x770.png" alt="The relationship between the ServiceBindingRequest and related components." width="640" height="481" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-1024x770.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-300x225.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13-768x577.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf544c61c13.png 1594w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659797" class="wp-caption-text"&gt;Figure 2: The relationship between the ServiceBindingRequest and related components.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Making an operator-managed backing service bindable&lt;/h3&gt; &lt;p&gt;To make a service bindable, the operator provider needs to express the information needed by applications to bind with the services provided by the operator. In other words, the operator provider must express the information that is &lt;em&gt;interesting&lt;/em&gt; to applications.&lt;/p&gt; &lt;p&gt;The binding information is provided as annotations in the Custom Resource Definition (CRD) of the operator that manages the backing service. The Service Binding Operator extracts the annotations to bind the application together with the backing service.&lt;/p&gt; &lt;p&gt;For example, Figure 3 shows a &lt;em&gt;bind-able&lt;/em&gt; operator&amp;#8217;s annotations in its CRD for a PostgreSQL database backing operator. Note the highlighted text and that &lt;code&gt;status.dbConfigMap&lt;/code&gt; is a &lt;code&gt;ConfigMap&lt;/code&gt; where the username and password are &lt;em&gt;interesting&lt;/em&gt; for binding:&lt;/p&gt; &lt;div id="attachment_659807" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb.png"&gt;&lt;img aria-describedby="caption-attachment-659807" class="wp-image-659807 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-1024x382.png" alt="A bindable operator's CRD annotations." width="640" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-1024x382.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-300x112.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb-768x287.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf5491e2deb.png 1592w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659807" class="wp-caption-text"&gt;Figure 3: A bindable operator&amp;#8217;s CRD annotations.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;An alternate method for making a service bindable enables operators that manage backing services, but which do not have any metadata in their CSV to use the Service Binding Operator to bind together the service and applications. The Service Binding Operator binds all sub-resources defined in the backing service CR by populating the binding secret with information from the routes, services, &lt;code&gt;ConfigMaps&lt;/code&gt;, and secrets owned by the backing service CR.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/#owners-and-dependents" target="_blank" rel="noopener noreferrer"&gt;This is how resource and sub-resource relationships are set&lt;/a&gt; in Kubernetes.&lt;/p&gt; &lt;p&gt;The binding itself is initiated by the introduction of the API option in the backing service CR (as shown in Figure 4):&lt;/p&gt; &lt;div id="attachment_659817" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02.png"&gt;&lt;img aria-describedby="caption-attachment-659817" class="wp-image-659817 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-1024x63.png" alt="Binding initiation." width="640" height="39" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-1024x63.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-300x18.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02-768x47.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/11/img_5ddf54e187f02.png 1596w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-659817" class="wp-caption-text"&gt;Figure 4: Binding initiation.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When this API option is set to &lt;code&gt;true&lt;/code&gt;, the Service Binding Operator automatically detects the routes, services, &lt;code&gt;ConfigMaps&lt;/code&gt;, and secrets owned by the backing service CR.&lt;/p&gt; &lt;h3&gt;Binding an application together with a backing service&lt;/h3&gt; &lt;p&gt;Manually binding an application together with a backing service without the Service Binding Operator is a time-consuming and error-prone process. The steps needed to perform the binding include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Locating the binding information in the backing service’s resources.&lt;/li&gt; &lt;li&gt;Creating and referencing any necessary secrets.&lt;/li&gt; &lt;li&gt;Manually editing the application’s &lt;code&gt;DeploymentConfig&lt;/code&gt;, &lt;code&gt;Deployment&lt;/code&gt;, &lt;code&gt;Replicaset&lt;/code&gt;, &lt;code&gt;KnativeService&lt;/code&gt;, or anything else that uses a standard &lt;code&gt;PodSpec&lt;/code&gt; to reference the binding request.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In contrast, by using the Service Binding Operator, the only action that an application developer must make during the import of the application is to make clear the &lt;em&gt;intent&lt;/em&gt; that the binding must be performed. This task is accomplished by creating the &lt;code&gt;ServiceBindingRequest&lt;/code&gt;. The Service Binding Operator takes that intent and performs the binding on behalf of the application developer.&lt;/p&gt; &lt;p&gt;In summary, there are two steps that an application developer must perform. First, they must signal the intent to bind the application to the backing service by adding labels to the application. Second, they must create a new &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that references the backing service.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;ServiceBindingRequest&lt;/code&gt; is created, the Service Binding Operator&amp;#8217;s controller collects the binding information into an intermediary secret, which it shares with the application through environment variables.&lt;/p&gt; &lt;p&gt;Note that an optional approach that can be used to provide binding information is through custom environment variables. We&amp;#8217;ll provide more on this topic, along with a real-world example, in the next article.&lt;/p&gt; &lt;h2&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator" target="_blank" rel="noopener noreferrer"&gt;The Service Binding Operator GitHub repo&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/service-binding-operator/blob/master/README.md#example-scenarios"&gt;A set of examples&lt;/a&gt;, each of which illustrates a usage scenario for the Service Binding Operator, is being developed in parallel with the Operator. Each example includes documentation and can be run either through the OpenShift web console or command-line client.&lt;/li&gt; &lt;li&gt;Sample Backing Service Operators &lt;a href="https://github.com/operator-backing-service-samples" target="_blank" rel="noopener noreferrer"&gt;are available here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#38;linkname=Introducing%20the%20Service%20Binding%20Operator" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F19%2Fintroducing-the-service-binding-operator%2F&amp;#038;title=Introducing%20the%20Service%20Binding%20Operator" data-a2a-url="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/" data-a2a-title="Introducing the Service Binding Operator"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/"&gt;Introducing the Service Binding Operator&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9xxf3s-jmB8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Connecting applications to the services that support them—for example, establishing the exchange of credentials between a Java application and a database that it requires—is referred to as binding. The configuration and maintenance of this binding together of applications and backing services can be a tedious and inefficient process. Manually editing YAML files to define binding [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/"&gt;Introducing the Service Binding Operator&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">659757</post-id><dc:creator>Shoubhik Bose</dc:creator><dc:date>2019-12-19T08:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/</feedburner:origLink></entry><entry><title>Move your APIs into the serverless era with Camel K and Knative</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4H4imgoWMFQ/" /><category term="Microservices" /><category term="Red Hat OpenShift Container Platform" /><category term="Serverless" /><category term="Service Mesh" /><category term="Knative" /><category term="Kubernetes" /><author><name>Abdellatif BOUCHAMA</name></author><id>https://developers.redhat.com/blog/?p=658557</id><updated>2019-12-18T08:00:53Z</updated><published>2019-12-18T08:00:53Z</published><content type="html">&lt;p&gt;In the past few years, developers have addressed the challenge of evolving from monolith systems to &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices architecture&lt;/a&gt;. These days, we hear about the adoption of &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;&lt;em&gt;serverless&lt;/em&gt;&lt;/a&gt; systems.&lt;/p&gt; &lt;p&gt;Like many trends in software, there’s no one clear view of how to define serverless or how this approach offers added value for our software architecture. The perfect place to start with serverless systems and discover serverless capabilities is through a use case.&lt;span id="more-658557"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;In this video, we&amp;#8217;ll show how to move your APIs into the serverless era using the super duo of Camel K and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Knative&lt;/a&gt;:&lt;/p&gt; &lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/lOqubmVSGdw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt; &lt;p&gt;By the end of this video, you will be able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Deploy an API with &lt;a href="https://camel.apache.org/camel-k/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Camel K&lt;/a&gt; as a &lt;a href="https://knative.dev" target="_blank" rel="noopener noreferrer"&gt;Knative&lt;/a&gt; service.&lt;/li&gt; &lt;li&gt;Deploy multiple revisions of a service.&lt;/li&gt; &lt;li&gt;Understand the scale-to-zero feature, and manage an auto-scaling strategy.&lt;/li&gt; &lt;li&gt;Set traffic distribution using different revisions of a service.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#38;linkname=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F12%2F18%2Fmove-your-apis-into-the-serverless-era-with-camel-k-and-knative%2F&amp;#038;title=Move%20your%20APIs%20into%20the%20serverless%20era%20with%20Camel%20K%20and%20Knative" data-a2a-url="https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/" data-a2a-title="Move your APIs into the serverless era with Camel K and Knative"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/"&gt;Move your APIs into the serverless era with Camel K and Knative&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4H4imgoWMFQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the past few years, developers have addressed the challenge of evolving from monolith systems to microservices architecture. These days, we hear about the adoption of serverless systems. Like many trends in software, there’s no one clear view of how to define serverless or how this approach offers added value for our software architecture. The perfect [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/"&gt;Move your APIs into the serverless era with Camel K and Knative&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">658557</post-id><dc:creator>Abdellatif BOUCHAMA</dc:creator><dc:date>2019-12-18T08:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/12/18/move-your-apis-into-the-serverless-era-with-camel-k-and-knative/</feedburner:origLink></entry></feed>
