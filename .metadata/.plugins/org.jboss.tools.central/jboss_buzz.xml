<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Get started with Node.js 14 on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BgdS-YXKE4o/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="node.js 14" scheme="searchisko:content:tags" /><category term="nullish coalescing" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="optional chaining" scheme="searchisko:content:tags" /><category term="V8 JavaScript" scheme="searchisko:content:tags" /><author><name>Alexandros Alykiotis</name></author><id>searchisko:content:id:jbossorg_blog-get_started_with_node_js_14_on_red_hat_openshift</id><updated>2020-10-20T07:00:01Z</updated><published>2020-10-20T07:00:01Z</published><content type="html">&lt;p&gt;In April, the Node.js development team released &lt;a href="https://nodejs.org/en/blog/release/v14.0.0/"&gt;Node.js 14&lt;/a&gt;. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020.&lt;/p&gt; &lt;p&gt;&lt;img class="alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/New_OpenShift_Featured_Image-300x168.png" alt="The Red Hat OpenShift logo." width="271" height="152" /&gt;&lt;/p&gt; &lt;p&gt;Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I&amp;#8217;ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you how to deploy Node.js 14 on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. See the end of the article for a list of resources for learning more about improvements and new features in Node.js 14.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; team creates and maintains Source-to-Image (S2I) container images for Node.js. They have released an S2I image for Node.js 14.&lt;/p&gt; &lt;h2&gt;Optional chaining in Node.js 14&lt;/h2&gt; &lt;p&gt;JavaScript&amp;#8217;s optional chaining operator (&lt;code&gt;?.&lt;/code&gt;) lets you read the value of a property located deep within a chain of connected objects. With this feature, you do not need to validate each reference in the chain explicitly. Here&amp;#8217;s an example of optional chaining in Node.js 14:&lt;/p&gt; &lt;pre&gt;const adventurer = { name: 'Alice', cat: { name: 'Dinah' } }; console.log(adventurer.dog?.name); // undefined (no error) &lt;/pre&gt; &lt;p&gt;In previous Node.js versions, we might have used the logical AND (&lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt;) operator to work around this issue, like this:&lt;/p&gt; &lt;pre&gt;console.log(adventurer.dog &amp;#38;&amp;#38; adventurer.dog.name); &lt;/pre&gt; &lt;p&gt;If the operand on the left side of the &lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt; operator is invalid, then the operand on the right will not be evaluated. Eventually, JavaScript will return an &lt;em&gt;undefined&lt;/em&gt; instead of an error.&lt;/p&gt; &lt;h2&gt;The nullish coalescing operator&lt;/h2&gt; &lt;p&gt;Nullish coalescing (&lt;code&gt;??&lt;/code&gt;) is a logical operator that returns the operand on its right when the operand on its left is null or undefined. Otherwise, it returns its left-hand-side operand:&lt;/p&gt; &lt;pre&gt;null ?? "n/a" // "n/a" undefined ?? "n/a" // "n/a" false ?? true // false 0 ?? 100 // 0 "" ?? "n/a" // "" NaN ?? 0 // NaN &lt;/pre&gt; &lt;p&gt;All of the operands shown in this code snippet are &lt;em&gt;falsy&lt;/em&gt; values, meaning that they evaluate to false when forced into a boolean value. If we had used the more familiar logical OR operator (&lt;code&gt;||&lt;/code&gt;), the evaluation of the previous expressions would be different:&lt;/p&gt; &lt;pre&gt;false || true // true 0 || 100 // 100 "" || "n/a" // "n/a" NaN || 0 // 0 &lt;/pre&gt; &lt;p&gt;When providing a fallback value for a nullable value, we recommend using &lt;code&gt;??&lt;/code&gt; rather than &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Two ways to deploy Node.js 14 on OpenShift&lt;/h2&gt; &lt;p&gt;If you are familiar with the process of using an S2I image, you already know what to do. This discussion is for developers who are new to using S2I images.&lt;/p&gt; &lt;p&gt;There are at least two ways to quickly deploy an application using the new Node.js 14 image. One option is to use the &lt;code&gt;oc new-app command&lt;/code&gt; with a Git repo:&lt;/p&gt; &lt;pre&gt;oc new-app registry.access.redhat.com/rhel8-beta/nodejs-14:latest~https://github.com/nodeshift-starters/nodejs-rest-http oc expose svc/nodejs-rest-http &lt;/pre&gt; &lt;p&gt;Alternatively, you can use the &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/nodeshift"&gt;Nodeshift module&lt;/a&gt; to deploy a local directory:&lt;/p&gt; &lt;pre&gt;npx nodeshift --dockerImage=registry.access.redhat.com/rhel8-beta/nodejs-14 --expose &lt;/pre&gt; &lt;h2&gt;Get started with Node.js&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve introduced a couple of the JavaScript language features now available in Node.js 14. I also showed you two simple ways to get started with using Node.js 14 on OpenShift. To &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;learn more about using Node.js&lt;/a&gt;, check out Lucas Holmquist&amp;#8217;s &amp;#8220;Modern web applications on OpenShift&amp;#8221; article series:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;Modern web applications on OpenShift: Part 1 — Web apps in two commands&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;Modern web applications on OpenShift: Part 2 — Using chained builds&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/"&gt;Modern web applications on OpenShift: Part 3 — OpenShift as a development environment&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e"&gt;Node.js 14 official announcement&lt;/a&gt; for even more about improvements and features in Node.js 14.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#038;title=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/" data-a2a-title="Get started with Node.js 14 on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/"&gt;Get started with Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BgdS-YXKE4o" height="1" width="1" alt=""/&gt;</content><summary>In April, the Node.js development team released Node.js 14. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020. Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I’ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you how to deploy Node.js 14 on Red Hat ...</summary><dc:creator>Alexandros Alykiotis</dc:creator><dc:date>2020-10-20T07:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nWz7T8hBLYE/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="developer survey" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes developer" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="openshift developer" scheme="searchisko:content:tags" /><author><name>Serena Chechile Nichols</name></author><id>searchisko:content:id:jbossorg_blog-let_s_collaborate_take_the_2020_red_hat_openshift_developer_survey_now</id><updated>2020-10-16T07:00:39Z</updated><published>2020-10-16T07:00:39Z</published><content type="html">&lt;p&gt;We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. An important part of that effort is the annual &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;OpenShift Developer Survey&lt;/a&gt;, which we&amp;#8217;ve just released for 2020.&lt;/p&gt; &lt;p&gt;Keep reading to learn more about the survey, including highlights of the 2019 survey results and what to expect from the survey this year. We also invite you to participate in our OpenShift developer experience office hours and one-to-one feedback sessions for our developer community and customers.&lt;/p&gt; &lt;p&gt;&lt;span id="more-795747"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey&lt;/h2&gt; &lt;p&gt;The annual OpenShift Developer Survey is a critical tool for sharing your experiences as an OpenShift developer. Here’s some of what we learned from developers responding to the 2019 survey:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; was the clear leader for languages and tools used for application development on OpenShift.&lt;/li&gt; &lt;li&gt;Most respondents named Jenkins as their &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; tool of choice.&lt;/li&gt; &lt;li&gt;73% of respondents said that they used source-to-image (S2I) to package applications into a container image (a 10% jump from 2018).&lt;/li&gt; &lt;li&gt;Most respondents expressed overall satisfaction with their OpenShift experience, with room for improvement.&lt;/li&gt; &lt;li&gt;Documentation and help were still top pain points for developers.&lt;/li&gt; &lt;li&gt;Asked what version of OpenShift they used: &lt;ul&gt; &lt;li&gt;19% of respondents had used OpenShift 4.x (only OpenShift 4.1 and 4.2 were released when the survey started).&lt;/li&gt; &lt;li&gt;58% of respondents said that OpenShift 3.11 was the newest version that they had used.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Survey respondents included developers who interacted with OpenShift or a representative such as their manager or team lead. Red Hat representatives were invited to respond on behalf of their developer clients and customers.&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey in 2020&lt;/h2&gt; &lt;p&gt;We use the OpenShift Developer Survey to understand better how developers work with OpenShift—what works and what doesn&amp;#8217;t—as well as the technologies that you rely on the most. Getting a breadth of responses helps us compare data and focus on the technologies and improvements that are key for our developer community and customers.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;2020 OpenShift Developer Survey&lt;/a&gt; is open now and continues through November 22, 2020. It takes about seven minutes to complete. We hope that you will participate in the survey and share it with your team. Also, look for a follow-up article in December, where we&amp;#8217;ll report on the survey results.&lt;/p&gt; &lt;h2&gt;New office hours for the OpenShift developer experience&lt;/h2&gt; &lt;p&gt;Our OpenShift developer experience office hours are now weekly. During office hours, we alternate between talking about the future and getting feedback about what is happening right now. Developer advocates demonstrate tools in the OpenShift ecosystem and discuss their coding challenges and mishaps, as well as how they worked through them.&lt;/p&gt; &lt;p&gt;Our weekly OpenShift developer experience office hours are featured on &lt;a target="_blank" rel="nofollow" href="http://openshift.tv"&gt;openshift.tv&lt;/a&gt;, streaming on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/streaming/twitch?hsLang=en-us"&gt;Twitch&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/rhopenshift"&gt;YouTube&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.facebook.com/openshift/"&gt;Facebook Live&lt;/a&gt;. You can also check the &lt;a target="_blank" rel="nofollow" href="https://groups.google.com/forum/#!forum/openshift-dev-users"&gt;openshift-dev-users mailing list&lt;/a&gt; or the &lt;a target="_blank" rel="nofollow" href="https://calendar.google.com/calendar/u/0/embed?src=redhatstreaming@gmail.com"&gt;openshift.tv schedule&lt;/a&gt; for office hours. Or, reach out to the team anytime through any of the channels listed on the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/console"&gt;OpenShift Console project homepage&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you haven’t yet experienced it, be sure to check out &lt;a href="https://developers.redhat.com/blog/2020/07/16/whats-new-in-the-openshift-4-5-console-developer-experience/"&gt;What’s new in the OpenShift 4.5 console developer experience&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Register for a remote feedback session&lt;/h2&gt; &lt;p&gt;As a developer who uses OpenShift, we are very interested in your perspective. We&amp;#8217;re currently inviting developers to participate in remote feedback sessions, where we discuss your technology pain points, validate use cases, and collaborate on future experiences. We&amp;#8217;re also offering customer empathy sessions, where you can let us know what isn&amp;#8217;t working for you.&lt;/p&gt; &lt;p&gt;As always, these sessions are a great opportunity to impact the future of the developer experience on OpenShift. To set up a session, please &lt;a target="_blank" rel="nofollow" href="https://forms.gle/dv5x8iQRjg7VvCw19"&gt;fill out this request form&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re serious about valuing your feedback, and we hope that you will take the opportunity to help shape the developer experience on OpenShift. The annual OpenShift Developer Survey is open until November 22, we&amp;#8217;re now hosting weekly office hours, and we&amp;#8217;re currently scheduling one-to-one feedback sessions. Get in touch and help us make the OpenShift developer experience better for you!&lt;/p&gt; &lt;p&gt;Take the &lt;a target="_blank" rel="nofollow" href="https://redhatvoc.co1.qualtrics.com/jfe/form/SV_cTvjNzMTmsFHILH?blog"&gt;OpenShift Developer Survey&lt;/a&gt; now.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#038;title=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" data-a2a-url="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/" data-a2a-title="Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/"&gt;Let&amp;#8217;s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nWz7T8hBLYE" height="1" width="1" alt=""/&gt;</content><summary>We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for Red Hat OpenShift. An important part of that effort is the annual OpenShift Developer Survey, which we’ve just released for 2020. Keep reading to learn more about the survey, including highlights of the 2019 survey results and what to expect from the survey this year. ...</summary><dc:creator>Serena Chechile Nichols</dc:creator><dc:date>2020-10-16T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/</feedburner:origLink></entry><entry><title>Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ng9kxFQ7gjw/" /><category term="Big Data" scheme="searchisko:content:tags" /><category term="Data Grid" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="NoSQL" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="tls handshake" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-securely_connect_quarkus_and_red_hat_data_grid_on_red_hat_openshift</id><updated>2020-10-15T07:00:56Z</updated><published>2020-10-15T07:00:56Z</published><content type="html">&lt;p&gt;The release of &lt;a href="https://developers.redhat.com/products/datagrid/overview"&gt;Red Hat Data Grid&lt;/a&gt; 8.1 offers new features for securing applications deployed on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Naturally, I wanted to check them out for &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;. Using the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Quarkus Data Grid extension&lt;/a&gt; made that easy to do.&lt;/p&gt; &lt;p&gt;Data Grid is an in-memory, distributed, NoSQL datastore solution based on &lt;a target="_blank" rel="nofollow" href="https://infinispan.org"&gt;Infinispan&lt;/a&gt;. Since it manages your data, Data Grid should be as secure as possible. For this reason, it uses a default property realm that requires HTTPS and automatically enforces user authentication on remote endpoints. As an additional layer of security on OpenShift, Data Grid presents certificates signed by the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/security/certificates/service-serving-certificate.html"&gt;OpenShift Service Signer&lt;/a&gt;. In practice, this means that Data Grid is as secure as possible out of the box, requiring encrypted connections and authentication from the first request. Data Grid generates a default set of credentials (which, of course, you can override), but unauthenticated access is denied.&lt;/p&gt; &lt;p&gt;In this article, I show you how to configure a Quarkus application with Data Grid and deploy it on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;span id="more-794727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Getting started with Data Grid 8.1&lt;/h2&gt; &lt;p&gt;OpenShift&amp;#8217;s &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/red_hat_data_grid_8.1_release_notes/index#data_grid_operator"&gt;Data Grid Operator&lt;/a&gt; makes it easy to deploy Data Grid in a variety of configurations. The Operator also manages Data Grid&amp;#8217;s security, storage, upgrade, and logging capabilities. Once you&amp;#8217;ve deployed the Data Grid Operator from the OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/understanding/olm-understanding-operatorhub.html"&gt;OperatorHub&lt;/a&gt;, it &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/running_data_grid_on_openshift/index#start_operator"&gt;exposes custom resources&lt;/a&gt; (called Infinispan Cluster and Infinispan Cache), which Data Grid uses to provision the caches on an existing cluster.&lt;/p&gt; &lt;p&gt;In the next sections, we&amp;#8217;ll deploy a three-node Data Grid cluster, configure a sample Quarkus application to securely connect to Data Grid, then deploy and verify our application on OpenShift.&lt;/p&gt; &lt;h2&gt;Deploy a three-node Data Grid cluster&lt;/h2&gt; &lt;p&gt;To deploy a three-node Data Grid cluster, just add the following custom resource to any OpenShift project (note that my project name for this example is &lt;code&gt;dgdemo&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;apiVersion: infinispan.org/v1 kind: Infinispan metadata: name: example-infinispan namespace: dgdemo spec: replicas: 3 expose: type: LoadBalancer &lt;/pre&gt; &lt;p&gt;After you&amp;#8217;ve added the custom resource, Data Grid deploys the nodes and sets up the networking. The setup includes a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; service that resolves to the cluster members. The Kubernetes service support HTTPS using the OpenShift Service Signer.&lt;/p&gt; &lt;h3&gt;Using signed certificates to connect Data Grid and Quarkus&lt;/h3&gt; &lt;p&gt;When your applications access Data Grid, they&amp;#8217;ll do so through the Kubernetes service, so they will be subject to its certificates. It&amp;#8217;s possible to use an annotated &lt;code&gt;ConfigMap&lt;/code&gt; to simplify the process of injecting these certificates into a pod. However, because we&amp;#8217;re using Java, we&amp;#8217;ll need the certificates in a format that Java applications can consume, so JKS or PKCS12.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll use the signed certificates when our Quarkus application initiates a TLS handshake with Data Grid. We need to manually extract and convert them to JKS format before mounting them in our application&amp;#8217;s running pods.&lt;/p&gt; &lt;h3&gt;Extract the certificates&lt;/h3&gt; &lt;p&gt;To generate the Java keystore, we first need to extract the certificates from the OpenShift Service Signer&amp;#8217;s certificate authority. We can then use the JDK&amp;#8217;s &lt;code&gt;keytool&lt;/code&gt; to generate the keystore file. Using the &lt;code&gt;oc&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, and &lt;code&gt;keytool&lt;/code&gt; command-line interfaces (CLIs), enter the following:&lt;/p&gt; &lt;pre&gt;$ oc get secrets/signing-key -n openshift-service-ca -o template='{{index .data "tls.crt"}}' | openssl base64 -d -A &amp;#62; /tmp/server.crt $ keytool -importcert -keystore /tmp/server.jks -storepass password -file /tmp/server.crt -trustcacerts -noprompt &lt;/pre&gt; &lt;p&gt;This series of commands grabs the Base64-encoded certificate content, then uses the &lt;code&gt;keytool&lt;/code&gt; format to a file &lt;code&gt;/tmp/server.jks&lt;/code&gt; with the passphrase: &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Create a secret&lt;/h3&gt; &lt;p&gt;Next, we need to consume the certificates in our Quarkus application namespace (&lt;code&gt;dgdemo&lt;/code&gt;). We&amp;#8217;ll create a secret, &lt;code&gt;clientcerts&lt;/code&gt;, whose contents are set to the contents of our certificate file. Here&amp;#8217;s the command to do it:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic clientcerts -n dgdemo --from-file=clientcerts=/tmp/server.jks &lt;/pre&gt; &lt;h2&gt;Configure the Quarkus application&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve created our secret named &lt;code&gt;clientcerts&lt;/code&gt; and set its value as the content of our &lt;code&gt;server.jks&lt;/code&gt;. Next, we need to configure our Quarkus application to mount the secret at a given mount point, read the contents, and use the certificates whenever it connects to Data Grid.&lt;/p&gt; &lt;p&gt;I created a &lt;a target="_blank" rel="nofollow" href="https://github.com/jamesfalkner/quarkus-dg-tls"&gt;sample application&lt;/a&gt; for this part of the demonstration. Open it, and you&amp;#8217;ll see that I&amp;#8217;ve already installed both the &lt;code&gt;infinispan-client&lt;/code&gt; and &lt;code&gt;openshift&lt;/code&gt; extensions. This is a simple application that responds to the &lt;code&gt;GET /infinispan&lt;/code&gt; endpoint with the value of the Data Grid entry under the key of &lt;code&gt;hello&lt;/code&gt;. As you might guess, the entry is &amp;#8220;Hello World, Infinispan is up!&amp;#8221;&lt;/p&gt; &lt;p&gt;You can find the configuration in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;. I&amp;#8217;ll also show it here:&lt;/p&gt; &lt;pre&gt;# The DNS name and port of the Service fronting Data Grid quarkus.infinispan-client.server-list=example-infinispan:11222 # Auth info, including server name and super secret password for the developer quarkus.infinispan-client.auth-server-name=example-infinispan quarkus.infinispan-client.auth-realm=default # DG user credentials. You'll need to change these quarkus.infinispan-client.auth-username=developer quarkus.infinispan-client.auth-password=I@TIR7awMPvYATGl quarkus.infinispan-client.sasl-mechanism=PLAIN quarkus.infinispan-client.client-intelligence=BASIC # Where the application can read the trust store from when it runs quarkus.infinispan-client.trust-store=/mnt/clientcerts # trust store password quarkus.infinispan-client.trust-store-password=password # trust store type quarkus.infinispan-client.trust-store-type=jks # which secret to mount and where to mount it quarkus.openshift.mounts.my-volume.path=/mnt quarkus.openshift.secret-volumes.my-volume.secret-name=clientcerts # instructs quarkus to build and deploy to kubernetes/openshift, and # create an ingress Route, and to trust the Kubernetes API since we're using self-signed, quarkus.container-image.build=true quarkus.kubernetes.deploy=true quarkus.openshift.expose=true quarkus.kubernetes-client.trust-certs=true quarkus.kubernetes.deployment-target=openshift &lt;/pre&gt; &lt;h3&gt;Get the secret&lt;/h3&gt; &lt;p&gt;Our application will use the values of &lt;code&gt;quarkus.infinispan-client.auth-username&lt;/code&gt; and &lt;code&gt;quarkus.infinispan-client.auth-password&lt;/code&gt; as the credentials to talk to Data Grid. Enter the following command to discover the autogenerated username of &lt;code&gt;developer&lt;/code&gt; and its associated password:&lt;/p&gt; &lt;pre&gt;$ oc get secret/example-infinispan-generated-secret -o template='{{index .data "identities.yaml"}}' | openssl base64 -d -A &lt;/pre&gt; &lt;p&gt;Take the username and password and insert them into your the&lt;code&gt;application.propeties&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;With all of that in place, we&amp;#8217;re ready to deploy!&lt;/p&gt; &lt;h2&gt;Deploy to OpenShift&lt;/h2&gt; &lt;p&gt;All we have to do now is log into OpenShift and switch to our demo project, then build and deploy. In this case, the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift"&gt;Quarkus OpenShift plugin&lt;/a&gt; does most of the work for us; we just enter:&lt;/p&gt; &lt;pre&gt;$ oc project dgdemo $ mvn clean package &lt;/pre&gt; &lt;p&gt;It will take a minute or so to build and deploy. After the build is done, the application should deploy and show up in the OpenShift developer console, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_794927" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM.png"&gt;&lt;img aria-describedby="caption-attachment-794927" class="wp-image-794927 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-1024x512.png" alt="The OpenShift developer console shows the Quarkus application and its build status." width="640" height="320" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-1024x512.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-768x384.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-794927" class="wp-caption-text"&gt;Figure 1: The Quarkus application with Data Grid in the OpenShift developer console.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the application&lt;/h3&gt; &lt;p&gt;Before we test the application, let&amp;#8217;s take a look at its log file:&lt;/p&gt; &lt;pre&gt;$ oc logs -n dgdemo dc/infinispan-client-quickstart __ ____ __ _____ ___ __ ____ ______ --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ -/ /_/ / /_/ / __ |/ , _/ ,&amp;#60; / /_/ /\ \ --\___\_\____/_/ |_/_/|_/_/|_|\____/___/ 2020-10-01 22:53:32,096 INFO [org.inf.SECURITY] (HotRod-client-async-pool-1-1) ISPN000947: Using Java SSL Provider 2020-10-01 22:53:37,612 INFO [org.inf.HOTROD] (main) ISPN004021: Infinispan version: Infinispan 'Corona Extra' 11.0.3.Final 2020-10-01 22:53:37,863 INFO [InfinispanClientApp] (main) Create or get cache named mycache with the default configuration 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) infinispan-client-quickstart 1.0-SNAPSHOT on JVM (powered by Quarkus 1.8.0.Final) started in 1.676s. Listening on: http://0.0.0.0:8080 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) Profile prod activated. 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) Installed features: [cdi, infinispan-client, kubernetes, resteasy] &lt;/pre&gt; &lt;p&gt;That looks healthy. Now, let&amp;#8217;s test it with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ curl http://$(oc get route -n dgdemo infinispan-client-quickstart -o jsonpath="{.spec.host}")/infinispan Hello World, Infinispan is up! &lt;/pre&gt; &lt;p&gt;Yes, we got the expected value showing that the connection was successful.&lt;/p&gt; &lt;h3&gt;Verify the value in the Data Grid 8.1 web console&lt;/h3&gt; &lt;p&gt;As our final step, let&amp;#8217;s use the new &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/webassets/avalon/d/red-hat-data-grid/8.1/videos/console_tour.html"&gt;Data Grid 8.1 web console&lt;/a&gt; to verify the value. To get to it, you can discover the URL with:&lt;/p&gt; &lt;pre&gt;$ echo http://$(oc get service/example-infinispan-external jsonpath='{.status.loadBalancer.ingress[0].hostname}'):11222 &lt;/pre&gt; &lt;p&gt;This command outputs the URL, which you can then copy and paste into your browser. You can use the credentials that you specified earlier to log in. Then, find the &lt;b&gt;mycache&lt;/b&gt; cache, and search for entries using the key &lt;b&gt;hello&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_794937" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM.png"&gt;&lt;img aria-describedby="caption-attachment-794937" class="wp-image-794937 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-1024x546.png" alt="The Data Grid web console shows the The application's key and value." width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-1024x546.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-768x410.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-794937" class="wp-caption-text"&gt;Figure 2: The application&amp;#8217;s key and value in the new Data Grid web console.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Wrap up&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid delivers many features for hybrid cloud deployments on OpenShift. In this article, you&amp;#8217;ve seen how to use a default configuration to securely connect your Quarkus applications to Data Grid and deploy them on OpenShift.&lt;/p&gt; &lt;p&gt;While the default configuration is considered to be as secure as possible, there are many other features to explore. Examples include cross-data center asynchronous replication on OpenShift and autoscaling to dynamically expand and contract clusters sizes.&lt;/p&gt; &lt;p&gt;Whether you choose the default configuration or need to explore additional security features, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/data-grid"&gt;Red Hat Data Grid&lt;/a&gt; is a valuable solution for large datasets across large clouds.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#038;title=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/" data-a2a-title="Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ng9kxFQ7gjw" height="1" width="1" alt=""/&gt;</content><summary>The release of Red Hat Data Grid 8.1 offers new features for securing applications deployed on Red Hat OpenShift. Naturally, I wanted to check them out for Quarkus. Using the Quarkus Data Grid extension made that easy to do. Data Grid is an in-memory, distributed, NoSQL datastore solution based on Infinispan. Since it manages your data, Data Grid should be as secure as possible. For this reason, i...</summary><dc:creator>James Falkner</dc:creator><dc:date>2020-10-15T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Checkpointing Java from outside of Java</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7MgdW6vM-2s/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="heap dump" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Java checkpoint" scheme="searchisko:content:tags" /><category term="JIT compiler" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="load java class" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><author><name>chf@redhat.com</name></author><id>searchisko:content:id:jbossorg_blog-checkpointing_java_from_outside_of_java</id><updated>2020-10-15T07:00:12Z</updated><published>2020-10-15T07:00:12Z</published><content type="html">&lt;p&gt;When &lt;a href="https://developers.redhat.com/products/openjdk/overview"&gt;OpenJDK&lt;/a&gt;&amp;#8216;s Java virtual machine (JVM) runs a &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; application, it loads a dozen or so classes before it starts the main class. It runs a method several hundred times before it invokes the optimizing compiler on that method. This preparation is a critical component of Java&amp;#8217;s &amp;#8220;write once, run anywhere&amp;#8221; power, but it comes at the cost of long startup times.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve been working on a new approach that allows you to load your classes, warm up your just-in-time (JIT) compiler, and then checkpoint your application. Later, you can restore the application to get it running quickly. With these changes, we have seen applications that took seconds to start come up warm in milliseconds.&lt;/p&gt; &lt;p&gt;In this article, you&amp;#8217;ll learn how to checkpoint and restore a running Java program from the &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux command line&lt;/a&gt;. In another article soon, I will introduce a Java Native Interface (JNI) library that lets you checkpoint and restore a Java program from inside of your Java code.&lt;/p&gt; &lt;h2&gt;Using checkpoints in your Java code&lt;/h2&gt; &lt;p&gt;The JNI &lt;a target="_blank" rel="nofollow" href="https://www.jfokus.se/jfokus19-preso/Checkpointing-Java.pdf"&gt;Checkpoint Restore library&lt;/a&gt; is based on &lt;a target="_blank" rel="nofollow" href="http://www.criu.org"&gt;Linux Checkpoint/Restore in Userspace&lt;/a&gt; (CRIU), which we&amp;#8217;ll use for the examples in this article.  CRIU can save you startup time, but it offers even more possibilities.&lt;/p&gt; &lt;p&gt;If you have a program that runs for a long time, you can regularly checkpoint it. Then, if you get a failure, you can restart the application from the last checkpoint. If the failure is due to a bug, then you can quickly reproduce it. If the failure was caused by an external factor, you could continue from where you left off without losing any work.&lt;/p&gt; &lt;p&gt;As another example, say that you want to take a heap dump at several points in the program, but stopping to walk the heap perturbs the execution. Inserting checkpoints lets you run the program to completion and then go back and restart to do a heap dump. That way, you can see the memory layout at the point in time that interests you, but with an order of program execution that is very similar to the original program.&lt;/p&gt; &lt;p&gt;Does that sound good? Let&amp;#8217;s go through an example.&lt;/p&gt; &lt;h2&gt;Checkpointing from outside of Java&lt;/h2&gt; &lt;p&gt;In this example, you&amp;#8217;ll learn how to checkpoint and restore a running Java program from the command line. To start,  let&amp;#8217;s say that we are running a Java program called Scooby.&lt;/p&gt; &lt;p&gt;From terminal one, enter:&lt;/p&gt; &lt;pre&gt;% setsid java -XX:-UsePerfData -XX:+UseSerialGC Scooby &lt;/pre&gt; &lt;p&gt;From another directory in another terminal, enter:&lt;/p&gt; &lt;pre&gt;% sudo criu dump -t --shell-job -o dump.log &lt;/pre&gt; &lt;p&gt;You can now do a &lt;code&gt;ps&lt;/code&gt; and see that your Java program is no longer running. You can look at the directory and view a number of image files. You can also look at the &lt;code&gt;dump.log&lt;/code&gt; to see everything that CRIU did to checkpoint your code.&lt;/p&gt; &lt;p&gt;Now, from the directory where you dumped the image, do the following:&lt;/p&gt; &lt;pre&gt;% sudo criu restore --shell-job -d -vvv -o restore.log &lt;/pre&gt; &lt;p&gt;You should see your Java program running again. You can check the &lt;code&gt;restore.log&lt;/code&gt; to see what restoring did. You will notice that, by default, CRIU restores the JVM to the same process ID (PID). If you want to restore the same image multiple times, you can use virtual PIDs:&lt;/p&gt; &lt;pre&gt;% sudo unshare -p -m -f bash # mount -t proc none /proc/ # criu restore --shell-job &lt;/pre&gt; &lt;p&gt;In another window but the same directory, you could do:&lt;/p&gt; &lt;pre&gt;% sudo unshare -p -m -f bash # mount -t proc none /proc/ # criu restore --shell-job &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Checkpointing has a few issues. For now, you need to turn off &lt;code&gt;perf&lt;/code&gt; and parallel garbage collection when using checkpoints. If you have a &lt;code&gt;/var/lib/sss/pipes/nss&lt;/code&gt; file, you will have to remove it. You will also need root access to run a &lt;code&gt;restore&lt;/code&gt; operation because you need to be able to choose a specific PID. The CRIU team is currently working on this issue.&lt;/p&gt; &lt;p&gt;Stay tuned for my next article, where I&amp;#8217;ll show you how to use the JNI Checkpoint Restore library to checkpoint Java from inside of Java.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#038;title=Checkpointing%20Java%20from%20outside%20of%20Java" data-a2a-url="https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/" data-a2a-title="Checkpointing Java from outside of Java"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/"&gt;Checkpointing Java from outside of Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7MgdW6vM-2s" height="1" width="1" alt=""/&gt;</content><summary>When OpenJDK‘s Java virtual machine (JVM) runs a Java application, it loads a dozen or so classes before it starts the main class. It runs a method several hundred times before it invokes the optimizing compiler on that method. This preparation is a critical component of Java’s “write once, run anywhere” power, but it comes at the cost of long startup times. We’ve been working on a new approach th...</summary><dc:creator>chf@redhat.com</dc:creator><dc:date>2020-10-15T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/</feedburner:origLink></entry><entry><title>Payments Architecture - Financial Calculations Example</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ApmBADhkix8/payments-architecture-financial-calculations-example.html" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-payments_architecture_financial_calculations_example</id><updated>2020-10-15T11:48:54Z</updated><published>2020-10-15T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s1600/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="financial calculations" border="0" data-original-height="1067" data-original-width="1600" height="213" src="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s320/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 6 - Financial calculations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Cloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service.&lt;br /&gt;&lt;br /&gt;So far we've presented research-based architectural blueprints of&amp;nbsp;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel customer experience&lt;/a&gt;,&amp;nbsp;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;integrating with SaaS applications&lt;/a&gt;, and&amp;nbsp;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development solutions&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In&amp;nbsp;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;the previous article&lt;/a&gt;&amp;nbsp;in this series we covered our fraud detection physical architecture.&lt;br /&gt;&lt;br /&gt;In this article we're exploring the final physical architecture in this blueprint,&amp;nbsp; a generic financial calculations example, one based on successful customer solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprints&lt;/h3&gt;&lt;div&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but we've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or&amp;nbsp;&lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact us&lt;/a&gt;&amp;nbsp;directly with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the example.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Generic payment calculations&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The example blueprint shown on the right entitled&amp;nbsp;&lt;i&gt;Financial calculations example&lt;/i&gt;&amp;nbsp;outlines the solution in a physical architecture. Note that this diagram is focusing on the highest level of the solution and the element groupings that apply to this process.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Ee9CWw-QOWI/X23aIbUmvpI/AAAAAAAAxkU/1Np_R6YGBIoc_VQzKQcJiLXcndV1X5vhACNcBGAsYHQ/s1600/payments-calculations-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="financial calculations" border="0" data-original-height="902" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-Ee9CWw-QOWI/X23aIbUmvpI/AAAAAAAAxkU/1Np_R6YGBIoc_VQzKQcJiLXcndV1X5vhACNcBGAsYHQ/s320/payments-calculations-sd.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;All previously discussed physical architectures were related to the original &lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;immediate payments architecture overview&lt;/a&gt;, but this one is a more generic payments case. It's possible to imagine this financial calculations architecture applying to many domains where determining discounts, taxes, fees, and special offers might be part of the payment process.&lt;br /&gt;&lt;br /&gt;In this example, starting from the top left corner, a payment request always arrives from a fronting &lt;i&gt;API &lt;/i&gt;element. as an entry point. The payment request starts off as a message and this is a more traditional integration architecture than one using message streams that we've been discussing previously.&lt;br /&gt;&lt;br /&gt;The initial request arrives in the &lt;i&gt;message queues&lt;/i&gt;&amp;nbsp;where it's picked up and validated through the &lt;i&gt;validation microservices. &lt;/i&gt;The validation requires the use of data and it shown receiving input from a&amp;nbsp;&lt;i&gt;reference data &lt;/i&gt;element that fronts all of the backing data stores.&lt;br /&gt;&lt;br /&gt;Depending on the solution domain, these data stores can be anything from customer data, taxation information, compliance data, or other needed data sources. For this example the data stores backing payment calculations are &lt;i&gt;customer, contact, tariff, &lt;/i&gt;and&lt;i&gt;&amp;nbsp;discount &lt;/i&gt;information.&amp;nbsp;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;After validation a message is sent back to the &lt;i&gt;message queues&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;A generic &lt;i&gt;detail calculations microservices &lt;/i&gt;element encompasses the various stages that calculations might need to be performed on the payment request. For example, it can arrive here more than once as the payment calculations are made to apply tariffs and then discounts.&lt;br /&gt;&lt;br /&gt;As the payment calculation is pulled together, there will be times when data or message aggregation is needed to modify for a specific calculation or backend system access. For this purpose you find the &lt;i&gt;aggregation microservices&amp;nbsp;&lt;/i&gt;which, upon final completion of all calculations and aggregations, &amp;nbsp;passes the payment request on to the &lt;i&gt;integration microservices.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;These &lt;i&gt;integration microservices &lt;/i&gt;ensure that the &lt;i&gt;billing systems &lt;/i&gt;are accessible for the final processed payment request. It's shown here as a possible private cloud element as that's ensuring that integration will be effective even if the &lt;i&gt;billing systems&lt;/i&gt;&amp;nbsp;change over time or move to other architectures outside the organizations control.&lt;br /&gt;&lt;br /&gt;This completes the tour of this financial calculations architecture.&lt;/div&gt;&lt;h3&gt;Project examples&lt;/h3&gt;&lt;div&gt;Sharing the process results for our payments blueprint is what this series is about, but there are project artifacts and diagrams that can also be shared with you the reader. We've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s1600/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="financial calculations" border="1" data-original-height="232" data-original-width="530" height="139" src="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s320/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example, if you scroll down to the file listings on the main page, you can locate all the example physical diagrams as shown on the right.&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;br /&gt;This is the collection associated with payments:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case there are multiple images you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-tooling/index.html?#/portfolio-architecture-examples/projects/schematic-diagrams-payments.drawio" target="_blank"&gt;click to automatically open the project diagrams&lt;/a&gt;&amp;nbsp;in the diagram tooling used in this blueprint (use private or incognito browser mode to avoid caching issues and a smoother tooling experience)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you desire to start designing your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the payments portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/financial-payments-architecture-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-common-elements.html" target="_blank"&gt;Common architecture elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;Immediate payments example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;Anti-money laundering example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-fraud-detection-example.html" target="_blank"&gt;Fraud detection example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-financial-calculations-example.html" target="_blank"&gt;Financial calculations example&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;This completes our series that has laid out a cloud-native architecture focusing on payment processing with suggestions for leveraging open technologies.&lt;br /&gt;&lt;br /&gt;(Article co-authored by&amp;nbsp;&lt;a href="https://www.linkedin.com/in/ramonv/?originalSubdomain=uk" target="_blank"&gt;Ramon Villarreal&lt;/a&gt;)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/MPdQQlYOz_Q" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ApmBADhkix8" height="1" width="1" alt=""/&gt;</content><summary>Part 6 - Financial calculationsCloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service. So far we've presented research-based architectural blueprints of omnichannel customer experience, integrating with SaaS applications, and cloud-native...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-15T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/MPdQQlYOz_Q/payments-architecture-financial-calculations-example.html</feedburner:origLink></entry><entry><title>Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Cmrnuh9pNQE/" /><category term="Argo CD" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gitops" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="tekton pipelines" scheme="searchisko:content:tags" /><author><name>David Sancho</name></author><id>searchisko:content:id:jbossorg_blog-building_modern_ci_cd_workflows_for_serverless_applications_with_red_hat_openshift_pipelines_and_argo_cd_part_2</id><updated>2020-10-14T07:00:05Z</updated><published>2020-10-14T07:00:05Z</published><content type="html">&lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1"&gt;first half of this article&lt;/a&gt;, I introduced &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-cloud-native-ci-cd-with-tekton-kubecon-europe-2020/"&gt;Tekton&lt;/a&gt; as a framework for cloud-native &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; pipelines, and &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; as its perfect partner for GitOps on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Our example for the demonstration is a &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative service&lt;/a&gt; that deploys and serves a &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; application. Our goal is to develop a complete continuous integration and delivery process, which begins when a commit is initiated in the application’s GitHub repository and ends with the new application version deployed in the development, staging, and production environments.&lt;/p&gt; &lt;p&gt;In Part 1, we used Tekton to implement the workflow&amp;#8217;s continuous integration (CI) tasks. Now, we will complete the CI/CD process by implementing the continuous delivery (CD) tasks with Argo CD. As a refresher, consider the CI/CD workflow diagram in Figure 1.&lt;/p&gt; &lt;div id="attachment_780177" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png"&gt;&lt;img aria-describedby="caption-attachment-780177" class="wp-image-780177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png" alt="A diagram of the sample CI/CD workflow." width="639" height="519" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png 829w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-300x244.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-768x623.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780177" class="wp-caption-text"&gt;Figure 1: The sample CI/CD workflow for the demonstration.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: I recommend &lt;a href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/"&gt;reading the first half of this article&lt;/a&gt; before continuing with Part 2. All of the discussions and examples here are based on the demo application and workflow that we developed in Part 1.&lt;/p&gt; &lt;p&gt;In Part 2, we will add the power of Argo CD to fully automate the deployment of the application. Argo CD will pull the changes from the Kustomize files that were pushed by the CI pipeline into the -deployment repository, and synchronize those changes in the target namespaces. As the last step of our automation, we will define a &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers"&gt;Tekton Trigger&lt;/a&gt; that will ignite the CI/CD workflow.&lt;/p&gt; &lt;h2&gt;Get started with Argo CD&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; is becoming popular these days. As a first-class citizen in the &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; ecosystem, it facilitates the adoption of &lt;a href="https://developers.redhat.com/devnation/tech-talks/gitops/watch"&gt;GitOps&lt;/a&gt;, where teams leverage declarative configuration and infrastructure definitions from Git as the single source of truth. We&amp;#8217;ve already developed the Tekton tasks for our CI/CD workflow. Could Argo CD be the perfect fit for what is missing in our current workflow?&lt;/p&gt; &lt;h3&gt;Install Argo CD&lt;/h3&gt; &lt;p&gt;Open your OpenShift web console and navigate to the &lt;code&gt;cicd&lt;/code&gt; namespace for our demonstration workflow. Use the following script to install the Argo CD Operator:&lt;/p&gt; &lt;pre&gt;$ ./bootstrap-argo.sh cicd ------------------------------ Installing argo operator Release "argocd" does not exist. Installing it now. NAME: argocd LAST DEPLOYED: Thu Sep 10 18:37:23 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None &lt;/pre&gt; &lt;p&gt;As shown in Figure 2, you should see a new Operator installed in the &lt;code&gt;cicd&lt;/code&gt; namespace:&lt;/p&gt; &lt;div id="attachment_781127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed.png"&gt;&lt;img aria-describedby="caption-attachment-781127" class="wp-image-781127 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-1024x350.png" alt="The OpenShift console shows the Argo CD Operator has been installed in the CICD namespace.." width="640" height="219" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-1024x350.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-300x103.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-768x263.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781127" class="wp-caption-text"&gt;Figure 2: Argo CD installed in the CICD project namespace.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create an Argo CD instance&lt;/h3&gt; &lt;p&gt;Next, create an &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;Argo CD&lt;/a&gt; instance. This instance will manage all of the &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;AppProject&lt;/a&gt;s and &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;Application&lt;/a&gt;s that we&amp;#8217;ve created under the &lt;code&gt;cicd&lt;/code&gt; namespace. Running the following script creates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An Argo CD instance in the &lt;code&gt;cicd&lt;/code&gt; namespace.&lt;/li&gt; &lt;li&gt;An AppProject called &lt;code&gt;rh-developers&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Three applications under the &lt;code&gt;rh-developers&lt;/code&gt; AppProject. Each application references the deployment repository in the master branch. The applications are aligned with the development, staging, and production folders, respectively.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Execute the following (do not forget to use your own &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository):&lt;/p&gt; &lt;pre&gt;$ ./add-argo-apps.sh cicd rh-developers https://github.com/dsanchor/quarkus-hello-world-deployment.git master ---------------------------------------------------------------------------------------------------------------- Installing basic Argo CD server instance argocd.argoproj.io/argocd created Adding edit role to argocd-application-controller ServiceAccount in projects development, staging and production rolebinding.rbac.authorization.k8s.io/edit-rh-developers-dev created rolebinding.rbac.authorization.k8s.io/edit-rh-developers-staging created rolebinding.rbac.authorization.k8s.io/edit-rh-developers-production created Creating rh-developers AppProject in namespace cicd appproject.argoproj.io/rh-developers created Creating Applications in namespace cicd in rh-developers AppProject application.argoproj.io/quarkus-hello-world-development created application.argoproj.io/quarkus-hello-world-staging created application.argoproj.io/quarkus-hello-world-production created &lt;/pre&gt; &lt;p&gt;Enter the Argo CD route, which you need in order to access the main Argo CD dashboard:&lt;/p&gt; &lt;pre&gt;$ oc get routes argocd-server -n cicd --------------------------------------- NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD argocd-server argocd-server-cicd.apps.ocp4.mydomain.com argocd-server https passthrough/Redirect None &lt;/pre&gt; &lt;p&gt;Wait until the Argo CD server is running, then log in using your OpenShift credentials. And, &lt;em&gt;voilà&lt;/em&gt;! You should receive the current status of your applications, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_781157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1.png"&gt;&lt;img aria-describedby="caption-attachment-781157" class="wp-image-781157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-1024x292.png" alt="The Argo CD dashboard shows the quarkus-hello-world application in development, staging, and production. The development version is out of sync." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-1024x292.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781157" class="wp-caption-text"&gt;Figure 3: Log in to the Argo CD dashboard to view all of the application versions and their respective health status.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You might observe that both the development and staging applications show their status as &lt;b&gt;Synced&lt;/b&gt;, while the production application is &lt;b&gt;OutOfSync&lt;/b&gt;. While the first two are configured with auto-sync enabled, we will use manual configuration for production.&lt;/p&gt; &lt;h2&gt;Deploy the first application version&lt;/h2&gt; &lt;p&gt;In the next sections, we will take our example &lt;code&gt;quarkus-hello-world&lt;/code&gt; application through several revisions, which we&amp;#8217;ll sync through the development, staging, and production stages of the deployment cycle. See Part 1 for more information about the Quarkus application that we are using for this demonstration.&lt;/p&gt; &lt;h3&gt;Application version 1 in the development environment&lt;/h3&gt; &lt;p&gt;Click on the &lt;code&gt;quarkus-hello-world-development&lt;/code&gt; application and you will see that every object in this version has been synced, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_781167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1.png"&gt;&lt;img aria-describedby="caption-attachment-781167" class="wp-image-781167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-1024x328.png" alt="All of the objects in the development application are synced." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-768x246.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781167" class="wp-caption-text"&gt;Figure 4: Click an application version to check its health status.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Having all of the objects synced means that the first version of the application was successfully deployed. Now, get the routes, so that we can access the service (notice that the ingress routes for &lt;a target="_blank" rel="nofollow" href="https://knative.dev/"&gt;Knative&lt;/a&gt; services are automatically created in the &lt;code&gt;knative-serving-ingress&lt;/code&gt; namespace):&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep development -------------------------------------------------------------- route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-313361326363 quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-613962613835 r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;get routes&lt;/code&gt; command should return at least two routes: The main route (&lt;code&gt;quarkus-hello-world-development.apps.ocp4.mydomain.com&lt;/code&gt;) and one for the new revision that we&amp;#8217;ve just deployed (&lt;code&gt;r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com&lt;/code&gt;). Note that the main route could have several revisions behind it, but because this is our first deployment, it has only one.&lt;/p&gt; &lt;p&gt;Test both routes and observe the results. If no pod is running, it is because &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/autoscaling/"&gt;Knative downscales inactive pods&lt;/a&gt;. The first request could take longer than usual if it&amp;#8217;s necessary to re-create the pod.&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;/hello.&lt;/code&gt;, then use &lt;code&gt;curl&lt;/code&gt; to test the endpoint:&lt;/p&gt; &lt;pre&gt;$ curl http://quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! $ curl http://r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! &lt;/pre&gt; &lt;p&gt;You can now navigate to the &lt;b&gt;Serverless&lt;/b&gt; menu in the OpenShift web console, select the &lt;b&gt;development&lt;/b&gt; project, and explore it, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_781177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp.png"&gt;&lt;img aria-describedby="caption-attachment-781177" class="wp-image-781177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-1024x237.png" alt="The quarkus-hello-world project is shown in the development namespace." width="640" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-1024x237.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-300x69.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-768x177.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781177" class="wp-caption-text"&gt;Figure 5: View the development project in the OpenShift Serverless menu.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Application version 1 in the staging environment&lt;/h3&gt; &lt;p&gt;Re-enter the Argo CD dashboard and take a look at the staging application. Currently, you should see a single &lt;code&gt;ConfigMap&lt;/code&gt;, which is shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_781197" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1.png"&gt;&lt;img aria-describedby="caption-attachment-781197" class="wp-image-781197 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-1024x205.png" alt="The staging application currently contains a single ConfigMap." width="640" height="128" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-1024x205.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-768x154.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781197" class="wp-caption-text"&gt;Figure 6: View the staging application in the Argo CD dashboard.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We only have the &lt;code&gt;ConfigMap&lt;/code&gt; because we have not yet created the &lt;code&gt;kustomization.yaml&lt;/code&gt;. You might remember from Part 1 that we do have a file named &lt;code&gt;kustomization-REVISION.yaml&lt;/code&gt;. In order to synchronize the changes in the &lt;code&gt;REVISION&lt;/code&gt; file, you must rename that file and push the changes to Git.&lt;/p&gt; &lt;p&gt;Navigate to the folder where you checked out the deployment repository and run:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv staging/kustomization-r9ce9024.yaml staging/kustomization.yaml &amp;#38;&amp;#38; \ git add staging &amp;#38;&amp;#38; git commit -m "Revision 9ce9024 is now active in staging" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Wait a couple of minutes to let Argo CD synchronize the changes. If you are impatient, you can click &lt;b&gt;Sync&lt;/b&gt; to have the revision automatically deployed in staging, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_781207" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes.png"&gt;&lt;img aria-describedby="caption-attachment-781207" class="wp-image-781207 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-1024x292.png" alt="All of the application changes have been synced." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-1024x292.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-300x85.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781207" class="wp-caption-text"&gt;Figure 7: Argo CD synchronizes and deploys the changes that you have just made.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Just like we did with the development application, get the routes and run a few tests against the staging endpoints:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep staging ------------------------------------------------------------ route-fd38a613-ea42-4809-af13-cd02503980bf-346238393864 quarkus-hello-world-staging.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-fd38a613-ea42-4809-af13-cd02503980bf-623763373761 r9ce9024-quarkus-hello-world-staging.ocp4.mydomain.com kourier http2 edge/Allow None $ curl http://quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello hola staging! Yeap! $ curl http://r9ce9024-quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello hola staging! Yeap! &lt;/pre&gt; &lt;h3&gt;Application version 1 in the production environment&lt;/h3&gt; &lt;p&gt;Now, we move the application to production, where we have not set the auto-sync. All of the application candidate&amp;#8217;s objects are thus &lt;b&gt;OutOfSync&lt;/b&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_781217" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-781217" class="wp-image-781217 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-1024x206.png" alt="The production candidate has not synchronized the newest application version." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-1024x206.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-768x155.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-781217" class="wp-caption-text"&gt;Figure 8: Objects in the production environment must be manually synchronized.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We need manual approval to make the new application version available for synchronization. Execute the same steps we took for the application in staging:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv production/kustomization-r9ce9024.yaml production/kustomization.yaml &amp;#38;&amp;#38; \ git add production &amp;#38;&amp;#38; git commit -m "Revision 9ce9024 is now ready to be sync in production" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Wait a minute or two and you will see the new objects, which are currently marked as &lt;b&gt;OutOfSync&lt;/b&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_781227" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync.png"&gt;&lt;img aria-describedby="caption-attachment-781227" class="wp-image-781227 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-1024x293.png" alt="The new objects have been added to the production application candidate." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-1024x293.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781227" class="wp-caption-text"&gt;Figure 9: Add the new objects for the current revision and verify them in the Argo CD console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If the changes are what you expected, you can do a manual synchronization to deploy the new version in production. Click the &lt;b&gt;Sync&lt;/b&gt; button and you will finally get the new version, ready to be tested. That screen is shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_781237" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced.png"&gt;&lt;img aria-describedby="caption-attachment-781237" class="wp-image-781237 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-1024x285.png" alt="Clicking sync updates and verifies the current revision." width="640" height="178" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-1024x285.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-300x83.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-768x214.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781237" class="wp-caption-text"&gt;Figure 10: Click the Sync button to synchronize your changes in the current revision.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, run a few tests against the production routes, following the same procedure that you used for the development and staging cycles:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep production ------------------------------------------------------------ route-8c948175-70a8-4c1c-ae70-846aa3b2081f-643262313638 quarkus-hello-world-production.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-8c948175-70a8-4c1c-ae70-846aa3b2081f-663561353830 r9ce9024-quarkus-hello-world-production.apps.ocp4.mydomain.com kourier http2 edge/Allow None $ curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello hola production! Yeap! $ curl http://r9ce9024-quarkus-hello-world-production.apps.ocp4.mydomain.com/hello hola production! Yeap! &lt;/pre&gt; &lt;p&gt;As shown in Figure 11, all of the Argo CD applications are now in sync.&lt;/p&gt; &lt;div id="attachment_781457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced.png"&gt;&lt;img aria-describedby="caption-attachment-781457" class="wp-image-781457 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-1024x232.png" alt="The Argo CD dashboard shows the development, staging, and production application versions are all in sync." width="640" height="145" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-1024x232.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-768x174.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781457" class="wp-caption-text"&gt;Figure 11: View all of your projects in the Argo CD dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Deploy a new version of the application&lt;/h2&gt; &lt;p&gt;Now, let&amp;#8217;s see what happens when we deploy a new version of our &lt;code&gt;quarkus-hello-world&lt;/code&gt; application. In this case, we will simply run the CI/CD pipeline again with a different commit ID. Note that we&amp;#8217;re still triggering the pipeline manually for now. We will introduce webhooks to the pipeline in the last part of the article.&lt;/p&gt; &lt;p&gt;Navigate to the &lt;code&gt;rh-developers-cicd&lt;/code&gt; repo and trigger the pipeline using the following parameters:&lt;/p&gt; &lt;pre&gt;$ cat tekton/pipelines/knative-pipeline-run.yaml | \   SOURCE_REPO=https://github.com/dsanchor/quarkus-hello-world.git \ COMMIT=c076ee940b1f1d9576b7af3250bbbd7114e82263 \ SHORT_COMMIT=c076ee9 \ DEPLOYMENT_REPO=https://github.com/dsanchor/quarkus-hello-world-deployment.git \   IMAGES_NS=cicd envsubst | \ oc create -f - -n cicd ------------------------------------------------------------------------------------ pipelinerun.tekton.dev/knative-pipeline-run-j5knc created &lt;/pre&gt; &lt;p&gt;If you prefer to start the pipeline using the &lt;code&gt;tkn&lt;/code&gt; CLI, run the following:&lt;/p&gt; &lt;pre&gt;$ tkn pipeline start knative-pipeline -p application=quarkus-hello-world \ -p source-repo-url=https://github.com/dsanchor/quarkus-hello-world.git \ -p source-revision=c076ee940b1f1d9576b7af3250bbbd7114e82263 \ -p short-source-revision=c076ee9 \ -p deployment-repo-url=https://github.com/dsanchor/quarkus-hello-world-deployment.git \ -p deployment-revision=master \ -p dockerfile=./src/main/docker/Dockerfile.jvm \ -p image-registry=image-registry.openshift-image-registry.svc.cluster.local:5000 \ -p image-repository=cicd \ -w name=source,claimName=source-pvc \ -w name=maven-settings,config=maven \ -w name=knative-kustomize-base,config=knative-kustomize-base \ -w name=knative-kustomize-environment,config=knative-kustomize-environment \ -n cicd &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The pipeline&amp;#8217;s execution could take up to five minutes. In the meantime, I recommend reading this article about &lt;a href="https://developers.redhat.com/blog/2020/02/26/speed-up-maven-builds-in-tekton-pipelines/"&gt;speeding up Maven builds in Tekton&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When the pipeline has finished, we will have pushed a new image—&lt;code&gt;quarkus-hello-world:c076ee940b1f1d9576b7af3250bbbd7114e82263&lt;/code&gt;—into the OpenShift internal registry under the &lt;code&gt;cicd&lt;/code&gt; namespace. We&amp;#8217;ll also have pushed the new Kustomization files to the &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository.&lt;/p&gt; &lt;h3&gt;Execution logs&lt;/h3&gt; &lt;p&gt;Checking the pipeline&amp;#8217;s execution logs lets us see the changes that we are pushing to Git. Notice the logs for the &lt;code&gt;push-knative-manifest&lt;/code&gt; task, in particular:&lt;/p&gt; &lt;pre&gt;add 'development/kustomization.yaml' remove 'development/r9ce9024/configmap.yaml' remove 'development/r9ce9024/revision-patch.yaml' remove 'development/r9ce9024/routing-patch.yaml' add 'development/rc076ee9/configmap.yaml' add 'development/rc076ee9/revision-patch.yaml' add 'development/rc076ee9/routing-patch.yaml' add 'production/kustomization-rc076ee9.yaml' add 'production/rc076ee9/configmap.yaml' add 'production/rc076ee9/revision-patch.yaml' add 'production/rc076ee9/routing-patch.yaml' add 'staging/kustomization-rc076ee9.yaml' add 'staging/rc076ee9/configmap.yaml' add 'staging/rc076ee9/revision-patch.yaml' add 'staging/rc076ee9/routing-patch.yaml' &lt;/pre&gt; &lt;p&gt;In summary:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The new revision is accessible in &lt;code&gt;development&lt;/code&gt; by overriding the &lt;code&gt;kustomization.yaml&lt;/code&gt; file, which references the new revision resources. Notice that there is no change in the &lt;code&gt;traffic-routing.yaml&lt;/code&gt;, so we will keep any existing routing rules. (As an example, we might keep the blue/green or canary routing rules configured from previous iterations, if any.)&lt;/li&gt; &lt;li&gt;We only add a new route for the new revision, and we remove any references to previous routes. The main route might still contain a reference to the previous revision, in which case that revision would be temporarily accessible through the main route. Once a revision becomes non-routeable, Knative eventually (after a predetermined amount of time) garbage collects it. Using Knative serving means less maintenance and operation, which makes us happier.&lt;/li&gt; &lt;li&gt;We also create the necessary Kustomize files for this new revision in the staging and production environments, but they are not yet referenced by the &lt;code&gt;kustomization.yaml&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Application version 2 in the development environment&lt;/h3&gt; &lt;p&gt;We have a new Knative service revision, but the main route still targets the previous application, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_781477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev.png"&gt;&lt;img aria-describedby="caption-attachment-781477" class="wp-image-781477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-1024x482.png" alt="The Argo CD dashboard shows the main route pointing to the previous application version." width="640" height="301" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-1024x482.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-768x362.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev.png 1089w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781477" class="wp-caption-text"&gt;Figure 12: The main route points to the previous application revision.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Get the current routes for the application running in the &lt;code&gt;development&lt;/code&gt; environment:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep development -------------------------------------------------------------- route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-313361326363 quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-353136303164 rc076ee9-quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None &lt;/pre&gt; &lt;p&gt;Test both and you will notice that the main route targets the previous revision:&lt;/p&gt; &lt;pre&gt;$ curl http://quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! $ curl rc076ee9-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Nice to see you back! &lt;/pre&gt; &lt;p&gt;If you want to add traffic to the new revision under the main route, simply modify the &lt;code&gt;traffic-routing.yaml&lt;/code&gt;. Navigate to the &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository and do a &lt;code&gt;git pull&lt;/code&gt;. Then, switch to the development folder and edit the &lt;code&gt;traffic-routing.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Change the file from this:&lt;/p&gt; &lt;pre&gt;- op: add path: /spec/traffic value: - revisionName: quarkus-hello-world-r9ce9024 percent: 100 &lt;/pre&gt; &lt;p&gt;To this:&lt;/p&gt; &lt;pre&gt;- op: add path: /spec/traffic value: - revisionName: quarkus-hello-world-r9ce9024 percent: 50 - revisionName: quarkus-hello-world-rc076ee9 percent: 50 &lt;/pre&gt; &lt;p&gt;Then push the changes:&lt;/p&gt; &lt;pre&gt;$ git add development/traffic-routing.yaml &amp;#38;&amp;#38; git commit -m "Splitted traffic between r9ce9024 %50 and rc076ee9 50" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;In two minutes or less, Argo CD will automatically synchronize those changes, or you can force a manual sync if you want to apply the change immediately.&lt;/p&gt; &lt;p&gt;If you check the main route, you will now see that it returns responses from both revisions:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;p&gt;If you want to ensure that traffic does not go to any old application versions, just remove that version from the &lt;code&gt;traffic-routing.yaml&lt;/code&gt; file. Knative will eventually garbage collect it, which you can test on your own.&lt;/p&gt; &lt;h3&gt;Application version 2 in the staging environment&lt;/h3&gt; &lt;p&gt;We have not yet received a new revision or route in the &lt;code&gt;staging&lt;/code&gt; environment. The reason is that the CI pipeline has not changed the &lt;code&gt;kustomization.yaml&lt;/code&gt; file. Instead, it just created a possible candidate: &lt;code&gt;kustomization-REVISION.yaml&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s deploy this new version (&lt;code&gt;mv staging/kustomization-rc076ee9.yaml staging/kustomization.yaml&lt;/code&gt;). We&amp;#8217;ll configure the same routing that we used in development, splitting the traffic between our two current revisions:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv staging/kustomization-rc076ee9.yaml staging/kustomization.yaml &amp;#38;&amp;#38; \ cp development/traffic-routing.yaml staging/traffic-routing.yaml &amp;#38;&amp;#38; \ rm -rf staging/r9ce9024 &amp;#38;&amp;#38; \ git add staging &amp;#38;&amp;#38; git commit -m "Split traffic between r9ce9024 %50 and rc076ee9 50%" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Notice that we also removed an older revision folder (&lt;code&gt;rm -rf staging/r9ce9024&lt;/code&gt;). The CI pipeline did this automatically for development,  but not for staging or production. Removing that older revision differentiates development from the other two environments in the demo.&lt;/p&gt; &lt;p&gt;The application&amp;#8217;s final result in staging would be the same as in the development environment, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_781547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync.png"&gt;&lt;img aria-describedby="caption-attachment-781547" class="wp-image-781547 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-1024x308.png" alt="Staging and development are in sync." width="640" height="193" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-1024x308.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-300x90.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-768x231.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781547" class="wp-caption-text"&gt;Figure 13: The development and staging applications are in sync.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Test the main route and you should see that you get responses from both Knative service revisions:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;h3&gt;Application version 2 in the production environment&lt;/h3&gt; &lt;p&gt;As previously noted, the production scenario differs from staging because auto-synchronization is not set for production. We will perform exactly the same steps that we did in the staging environment and see the results.&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv production/kustomization-rc076ee9.yaml production/kustomization.yaml &amp;#38;&amp;#38; \ cp staging/traffic-routing.yaml production/traffic-routing.yaml &amp;#38;&amp;#38; \ rm -rf production/r9ce9024 &amp;#38;&amp;#38; \ git add production &amp;#38;&amp;#38; git commit -m "Split traffic between r9ce9024 %50 and rc076ee9 50%" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;h3&gt;OutOfSync&lt;/h3&gt; &lt;p&gt;When you check the Argo CD dashboard, shown in Figure 14, you should observe that &lt;code&gt;quarkus-hello-world-production&lt;/code&gt; application is &lt;b&gt;OutOfSync&lt;/b&gt;. The Knative service object is the affected object.&lt;/p&gt; &lt;div id="attachment_781567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2.png"&gt;&lt;img aria-describedby="caption-attachment-781567" class="wp-image-781567 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-1024x469.png" alt="The Knative service object is out of sync." width="640" height="293" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-1024x469.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-768x352.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2.png 1144w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781567" class="wp-caption-text"&gt;Figure 14: The Knative service object is out of sync.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click on the &lt;b&gt;OutOfSync&lt;/b&gt; box under &lt;code&gt;quarkus-hello-world&lt;/code&gt; and check the &lt;b&gt;DIFF&lt;/b&gt; tab, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_781577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff.png"&gt;&lt;img aria-describedby="caption-attachment-781577" class="wp-image-781577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-1024x431.png" alt="Use the Diff tool to check the current application version against the desired manifest." width="640" height="269" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-1024x431.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-300x126.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-768x323.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff.png 1487w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781577" class="wp-caption-text"&gt;Figure 15: Use the Diff tool to find the differences between application versions.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The screen in Figure 15 shows the differences between the live manifest and the desired manifest, with the live version being shown on the left. The differences are what we expected, so let&amp;#8217;s manually sync and deploy the new revision and routing rules in production.&lt;/p&gt; &lt;p&gt;Once synced, test the main route:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;h2&gt;Rollback to a previous state&lt;/h2&gt; &lt;p&gt;So far, you have seen how to deploy new application versions in every environment. What if you found an unexpected behavior in the latest revision of the application in production? Let&amp;#8217;s use Argo CD to rollback to a previous application state.&lt;/p&gt; &lt;p&gt;With Argo CD, we can rollback to any code or application revision in the history of our Git repository. For this example, we&amp;#8217;ll rollback to the previous revision. From the Argo CD dashboard, click on &lt;b&gt;History and Rollback&lt;/b&gt;, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_781607" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png"&gt;&lt;img aria-describedby="caption-attachment-781607" class="wp-image-781607" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png" alt="The Argo CD dashboard includes an option to rollback." width="640" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png 968w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu-768x113.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781607" class="wp-caption-text"&gt;Figure 16: Use the History and Rollback feature to return to a previous version of the application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you have found the revision that you want to rollback to, click the dotted menu in the top-right corner of the screen, then select the only action that you have: &lt;b&gt;Rollback&lt;/b&gt;.&lt;/p&gt; &lt;div id="attachment_781617" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action.png"&gt;&lt;img aria-describedby="caption-attachment-781617" class="wp-image-781617 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-1024x356.png" alt="The current revision is shown, along with the option to select an older application version." width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action.png 1518w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781617" class="wp-caption-text"&gt;Figure 17: Choose the revision that you want, then click Rollback.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 17, the result is that the application status is currently &lt;b&gt;OutOfSync&lt;/b&gt;, but it&amp;#8217;s synced with the revision that we selected for rollback. Validate that the rollback worked by running tests:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;p&gt;You should be able to confirm that the responses are from the previous application version and not the most recent one.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you had auto-sync enabled for the production environment, you would need to disable it before executing the rollback. Otherwise, you would be auto-synced again to the latest revision.&lt;/p&gt; &lt;h2&gt;Closing the loop: Fully automated CI/CD&lt;/h2&gt; &lt;p&gt;So far, we have only triggered the pipeline manually. As the final step in this workflow, we will introduce automation to trigger the pipeline.&lt;/p&gt; &lt;p&gt;I have left this part to the end of the article so that we could use the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world.git"&gt;complete source repository&lt;/a&gt; to run the pipeline. We will add a webhook to this repository, which triggers the pipeline automatically when new commits are pushed to the repository.&lt;/p&gt; &lt;p&gt;Before starting, fork the source code repository at &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world.git"&gt;https://github.com/dsanchor/quarkus-hello-world.git&lt;/a&gt;. We will use it for this final example.&lt;/p&gt; &lt;h3&gt;Add a Tekton trigger&lt;/h3&gt; &lt;p&gt;On the Tekton side, we will create three different kinds of objects that work together:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/triggertemplates.md"&gt;TriggerTemplate&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/triggerbindings.md"&gt;TriggerBinding&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md"&gt;EventListener&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In the &lt;code&gt;EventListener&lt;/code&gt;, we&amp;#8217;ll add two interceptors:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md#GitHub-Interceptors"&gt;GitHub interceptor&lt;/a&gt; adds a simple check based on a shared token.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md#cel-interceptors"&gt;CEL interceptor&lt;/a&gt; applies a basic function to shorten the commit ID and make it available to the pipeline.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As your first step, create a &lt;code&gt;secret&lt;/code&gt; with a random token:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic webhook --from-literal=token=XXXXXXXXXXXXXX -n cicd &lt;/pre&gt; &lt;p&gt;Then, create a common &lt;code&gt;TriggerTemplate&lt;/code&gt; and &lt;code&gt;TriggerBinding&lt;/code&gt; that will be shared between different applications:&lt;/p&gt; &lt;pre&gt;$ oc apply -f tekton/webhook/knative-pipeline-trigger.yaml -n cicd -------------------------------------------------------------------- triggerbinding.triggers.tekton.dev/webhook-body-binding created triggertemplate.triggers.tekton.dev/knative-pipeline-template created &lt;/pre&gt; &lt;p&gt;Next, create the application-specific &lt;code&gt;EventListener&lt;/code&gt; and &lt;code&gt;TriggerBinding&lt;/code&gt;. &lt;b&gt;Important&lt;/b&gt;: Use your own deployment repository in &lt;code&gt;DEPLOYMENT_REPO_URL&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cat tekton/webhook/app-custom-trigger.yaml | \ GITHUB_SECRET=webhook \ APPLICATION=quarkus-hello-world \ NS=cicd \ DEPLOYMENT_REPO_URL=https://github.com/dsanchor/quarkus-hello-world-deployment \ DEPLOYMENT_REPO_REVISION=master \ envsubst | oc apply -f - -n cicd ------------------------------------------------------------------------------------- eventlistener.triggers.tekton.dev/quarkus-hello-world-listener created triggerbinding.triggers.tekton.dev/quarkus-hello-world-binding created &lt;/pre&gt; &lt;p&gt;Expose the event-listener service, which will be the target endpoint for your webhook in GitHub:&lt;/p&gt; &lt;pre&gt;$ oc expose svc el-quarkus-hello-world-listener -n cicd &lt;/pre&gt; &lt;p&gt;And get the route:&lt;/p&gt; &lt;pre&gt;$ oc get route el-quarkus-hello-world-listener -n cicd -------------------------------------------------------- NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD el-quarkus-hello-world-listener el-quarkus-hello-world-listener-cicd.apps.ocp4.mydomain.com el-quarkus-hello-world-listener http-listener None &lt;/pre&gt; &lt;h3&gt;Configure a webhook in GitHub&lt;/h3&gt; &lt;p&gt;Now, go to your application&amp;#8217;s GitHub repository. Under &lt;b&gt;Settings&lt;/b&gt;, click on &lt;b&gt;Webhooks -&amp;#62; Add Webhooks&lt;/b&gt;, as shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_781637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1.png"&gt;&lt;img aria-describedby="caption-attachment-781637" class="wp-image-781637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-1024x233.png" alt="The GitHub source repository includes an option to add a webhook." width="640" height="146" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-1024x233.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-768x175.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781637" class="wp-caption-text"&gt;Figure 18: Add a webhook in the project&amp;#8217;s GitHub repository.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Add the route as the payload URL, set the content type as JSON, and, finally, copy the token content into the secret box, as shown in Figure 19.&lt;/p&gt; &lt;div id="attachment_781647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2.png"&gt;&lt;img aria-describedby="caption-attachment-781647" class="wp-image-781647 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-1024x535.png" alt="After you've added the webhook, you must configure it." width="640" height="334" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-1024x535.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781647" class="wp-caption-text"&gt;Figure 19: Configure the webhook.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you&amp;#8217;ve added these final elements, you should see a single webhook on your screen.&lt;/p&gt; &lt;h3&gt;Try it out&lt;/h3&gt; &lt;p&gt;I will make a simple change in the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world/blob/master/src/main/java/org/acme/quickstart/GreetingResource.java"&gt;GreetingResource&lt;/a&gt; class. You must apply the same change in your &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world/blob/master/src/test/java/org/acme/quickstart/GreetingResourceTest.java"&gt;GreetingResourceTest&lt;/a&gt;. In my case, I am changing the last part of the message to &amp;#8220;Webhooks work.&amp;#8221;&lt;/p&gt; &lt;p&gt;After all of the tests pass locally, push your changes to the remote repository:&lt;/p&gt; &lt;pre&gt;$ git add src &amp;#38;&amp;#38; \ git commit -m "Changed greeting message" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;The pipeline should have already started. If you encounter an error, you might want to look at the event listener pod that we created to manage events for the &lt;code&gt;EventListener&lt;/code&gt;. To obtain the name of the pod, run:&lt;/p&gt; &lt;pre&gt;$ oc get pod -l eventlistener=quarkus-hello-world-listener -n cicd &lt;/pre&gt; &lt;p&gt;Wait until the pipeline finishes. Once it&amp;#8217;s done, you should have a new Knative service revision running in your development environment. You can use the &lt;a href="https://developers.redhat.com/blog/2020/07/16/whats-new-in-the-openshift-4-5-console-developer-experience/"&gt;new developer perspective in the OpenShift web console&lt;/a&gt; to verify that the Knative service is running. Select the &lt;b&gt;development&lt;/b&gt; project and check the topology, as shown in Figure 20.&lt;/p&gt; &lt;div id="attachment_781717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console.png"&gt;&lt;img aria-describedby="caption-attachment-781717" class="wp-image-781717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-1024x471.png" alt="OpenShift's developer perspective lets you see the live applications and routing at a glance." width="640" height="294" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-1024x471.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-768x353.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console.png 1063w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781717" class="wp-caption-text"&gt;Figure 20: Use OpenShift&amp;#8217;s developer perspective to verify that the Knative service is running.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see three different revisions running (although they are all scaled down due to inactivity). The two revisions that we deployed during the first steps of this article are under the same main route, with each managing half of the traffic. The last revision has its own route, which our pipeline created. Let&amp;#8217;s hit it and see the results:&lt;/p&gt; &lt;pre&gt;$ curl r1b644f0-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Webhooks work! &lt;/pre&gt; &lt;p&gt;You can also see that Knative automatically scaled up that revision to one pod, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_781727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up.png"&gt;&lt;img aria-describedby="caption-attachment-781727" class="wp-image-781727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-1024x472.png" alt="The lives application is indicated with a blue circle around its pod." width="640" height="295" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-1024x472.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-768x354.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up.png 1063w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781727" class="wp-caption-text"&gt;Figure 21: Knative auto-scales the newest application version.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This second half of my introduction to building modern CI/CD workflows has introduced you to using Argo CD to implement the continuous delivery side of a serverless CI/CD workflow. Combining Tekton with GitOps, implemented by Argo CD, is an increasingly popular option for fully automated CI/CD. I hope that you have enjoyed this demonstration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#038;title=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/" data-a2a-title="Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/"&gt;Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Cmrnuh9pNQE" height="1" width="1" alt=""/&gt;</content><summary>In the first half of this article, I introduced Tekton as a framework for cloud-native CI/CD pipelines, and Argo CD as its perfect partner for GitOps on Red Hat OpenShift. Our example for the demonstration is a Knative service that deploys and serves a Quarkus application. Our goal is to develop a complete continuous integration and delivery process, which begins when a commit is initiated in the ...</summary><dc:creator>David Sancho</dc:creator><dc:date>2020-10-14T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/</feedburner:origLink></entry><entry><title>Support for IBM Z and more in CodeReady Workspaces 2.4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pB_Qxz7VEeA/" /><category term="certificate authority" scheme="searchisko:content:tags" /><category term="codeready" scheme="searchisko:content:tags" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="IBM Z" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Parag Dave</name></author><id>searchisko:content:id:jbossorg_blog-support_for_ibm_z_and_more_in_codeready_workspaces_2_4</id><updated>2020-10-13T07:00:21Z</updated><published>2020-10-13T07:00:21Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces 2.4&lt;/a&gt; is now available. For this release, we focused on adding support for &lt;a target="_blank" rel="nofollow" href="https://www.ibm.com/it-infrastructure/z"&gt;IBM Z&lt;/a&gt; and improving the IDE editor and configuration elements.&lt;/p&gt; &lt;p&gt;CodeReady Workspaces (CRW) 2.4 is available on &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html/installation_guide/installing-codeready-workspaces-on-openshift-3-using-the-operator_crw"&gt;Red Hat OpenShift 3.11&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;OpenShift 4.4&lt;/a&gt; and higher. CodeReady Workspaces 2.4 is also available on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;OpenShift Dedicated 4.3&lt;/a&gt; via the add-ons capability.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Based on &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/getting-started/cloud"&gt;Eclipse Che&lt;/a&gt;, CodeReady Workspaces is an OpenShift-native developer environment that supports cloud-native development.&lt;/p&gt; &lt;h2&gt;Support for IBM Z&lt;/h2&gt; &lt;p&gt;It is now possible to deploy a CodeReady Workspaces &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator&lt;/a&gt; on an &lt;a href="https://developers.redhat.com/openshift"&gt;OpenShift&lt;/a&gt; cluster running on the IBM Z mainframe system. If you are using CodeReady Workspaces on a &lt;a href="https://developers.redhat.com/blog/category/windows/"&gt;Windows&lt;/a&gt;, macOS, or &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; machine, you can use the CRW command-line interface (CLI), &lt;code&gt;crwctl&lt;/code&gt;, for the same purpose.&lt;/p&gt; &lt;p&gt;CodeReady Workspaces does not officially support deployment to disconnected OpenShift clusters on IBM Z. Fewer devfiles and samples are provided for IBM Z, and some languages—like &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;.NET Core&lt;/a&gt;—are not supported.&lt;/p&gt; &lt;h2&gt;IDE and configuration improvements&lt;/h2&gt; &lt;p&gt;With this release, we focused on several improvements to the IDE and configuration.&lt;/p&gt; &lt;h3&gt;Switch or close workspaces from the IDE&lt;/h3&gt; &lt;p&gt;As shown in Figure 1, you can now use the CodeReady Workspaces IDE to close a running workspace or switch to a different workspace while keeping the current one active:&lt;/p&gt; &lt;div id="attachment_792227" style="width: 410px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM.png"&gt;&lt;img aria-describedby="caption-attachment-792227" class="wp-image-792227" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM-237x300.png" alt="You can now switch between workspaces in the CodeReady Workspaces IDE." width="400" height="505" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM-237x300.png 237w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM.png 714w" sizes="(max-width: 400px) 100vw, 400px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-792227" class="wp-caption-text"&gt;Figure 1: Close or switch workspaces from the CodeReady Workspaces IDE.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Support certificates from an OpenShift-trusted CA bundle&lt;/h3&gt; &lt;p&gt;When OpenShift is configured with trusted certificate authority (CA)-signed certificates, CodeReady Workspaces automatically processes all of those certificates, along with the ones that are explicitly assigned to it.&lt;/p&gt; &lt;h3&gt;Configure with a custom hostname&lt;/h3&gt; &lt;p&gt;You can now set the configuration property &lt;code&gt;cheHost&lt;/code&gt; in the CheCluster custom resource with a custom &lt;code&gt;hostname&lt;/code&gt; value. The custom &lt;code&gt;hostname&lt;/code&gt; value is then used for all communication to the CodeReady Workspaces server. You must ensure that the custom resource is configured with a trusted certificate for the custom &lt;code&gt;hostname&lt;/code&gt; value.&lt;/p&gt; &lt;h3&gt;Support for the .devfile.yaml name format&lt;/h3&gt; &lt;p&gt;In your source project folder, you can now include a devfile with the &lt;code&gt;.devfile.yaml&lt;/code&gt; or &lt;code&gt;devfile.yaml&amp;#60;/&lt;/code&gt; file name format. If it doesn&amp;#8217;t find any files named &lt;code&gt;devfile.yaml&lt;/code&gt;, CodeReady Workspaces automatically searches for files named &lt;code&gt;.devfile.yaml&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Try CodeReady Workspaces 2.4&lt;/h2&gt; &lt;p&gt;CodeReady Workspaces 2.4 is available now on OpenShift 3.11 and OpenShift 4.x.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;If you are using OpenShift 3.11, you can find Installation instructions &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html/installation_guide/installing-codeready-workspaces-on-openshift-3-using-the-operator_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;If you are using OpenShift 4.x, you can install directly from the OpenShift OperatorHub and follow the documentation &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.4/html/installation_guide/installing-codeready-workspaces_crw#installing-codeready-workspaces-on-openshiftt-4-using-operatorhub_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;If you are using OpenShift 4.x on IBM Z, you can install directly from the OperatorHub and follow the documentation &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.4/html/installation_guide/installing-codeready-workspaces_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/download"&gt;Download&lt;/a&gt; the Red Hat CodeReady Workspaces CLI.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces"&gt;Visit&lt;/a&gt; the CodeReady Workspaces product page.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#038;title=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" data-a2a-url="https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/" data-a2a-title="Support for IBM Z and more in CodeReady Workspaces 2.4"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/"&gt;Support for IBM Z and more in CodeReady Workspaces 2.4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pB_Qxz7VEeA" height="1" width="1" alt=""/&gt;</content><summary>Red Hat CodeReady Workspaces 2.4 is now available. For this release, we focused on adding support for IBM Z and improving the IDE editor and configuration elements. CodeReady Workspaces (CRW) 2.4 is available on Red Hat OpenShift 3.11 and OpenShift 4.4 and higher. CodeReady Workspaces 2.4 is also available on OpenShift Dedicated 4.3 via the add-ons capability. Note: Based on Eclipse Che, CodeReady...</summary><dc:creator>Parag Dave</dc:creator><dc:date>2020-10-13T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/</feedburner:origLink></entry><entry><title>JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-09</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TGJfW3DI-NE/12.17.0.ga.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><category term="codereadystudio" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/12.17.0.ga.html</id><updated>2020-10-13T09:57:16Z</updated><published>2020-10-13T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://tools.jboss.org/downloads/jbosstools/2020-09/4.17.0.Final.html"&gt;JBoss Tools 4.17.0&lt;/a&gt; and &lt;a href="https://tools.jboss.org/downloads/devstudio/2020-09/12.17.0.GA.html"&gt;Red Hat CodeReady Studio 12.17&lt;/a&gt; for Eclipse 2020-09 are here waiting for you. Check it out!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/blog/images/crstudio12.png" alt="crstudio12" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="installation"&gt;&lt;a class="anchor" href="#installation"&gt;&lt;/a&gt;Installation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href="https://developers.redhat.com/products/codeready-studio/overview/"&gt;Red Hat CodeReady product page&lt;/a&gt; and run it like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java -jar codereadystudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release requires at least Eclipse 4.17 (2020-09) but we recommend using the latest &lt;a href="https://www.eclipse.org/downloads/packages/release/2020-09/r/eclipse-ide-enterprise-java-developers"&gt;Eclipse 4.17 2020-06 JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock warning"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-warning" title="Warning"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So make sure to select a Java11 JDK in the installer. You can still work with pre-Java11 JDK/JRE and projects in the tool.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &amp;quot;JBoss Tools&amp;quot; or &amp;quot;Red Hat CodeReady Studio&amp;quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our main focus for this release was an improved tooling for the Quarkus framework, improvements for container based development and bug fixing. Eclipse 2020-09 itself has a lot of new cool stuff but let me highlight just a few updates in both Eclipse 2020-09 and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="openshift"&gt;&lt;a class="anchor" href="#openshift"&gt;&lt;/a&gt;OpenShift&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="openshift-container-platform-4-6-support"&gt;&lt;a class="anchor" href="#openshift-container-platform-4-6-support"&gt;&lt;/a&gt;OpenShift Container Platform 4.6 support&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the new OpenShift Container Platform (OCP) 4.6 now available, JBoss Tools is compatible with this major release in a transparent way. Just define your connection to your OCP 4.6 based cluster as you did before for an OCP 3 cluster, and use the tooling !&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="quarkus"&gt;&lt;a class="anchor" href="#quarkus"&gt;&lt;/a&gt;Quarkus&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-yaml-configuration-file"&gt;&lt;a class="anchor" href="#support-for-yaml-configuration-file"&gt;&lt;/a&gt;Support for YAML configuration file&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus supports configuration through YAML format. For more information, see the &lt;a href="https://quarkus.io/guides/config#yaml"&gt;Quarkus documentation&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to use it, follow the steps:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;create a Quarkus project using the new Quarkus wizard&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;create a new &lt;code&gt;application.yaml&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; next to the &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The editor will open and you will get content assist and syntax validation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-21-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-21-server-adapter"&gt;&lt;/a&gt;Wildfly 21 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 21. It adds support for Java EE 8, Jakarta EE 8 and Microprofile 3.3.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.4 runtime provider now incorporates Hibernate Core version 5.4.21.Final and Hibernate Tools version 5.4.21.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.18.Final and Hibernate Tools version 5.3.18.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="platform"&gt;&lt;a class="anchor" href="#platform"&gt;&lt;/a&gt;Platform&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="views-dialogs-and-toolbar"&gt;&lt;a class="anchor" href="#views-dialogs-and-toolbar"&gt;&lt;/a&gt;Views, Dialogs and Toolbar&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="adjustable-view-fonts"&gt;&lt;a class="anchor" href="#adjustable-view-fonts"&gt;&lt;/a&gt;Adjustable view fonts&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The font used for tree and table views can now be customized with a font preference. This preference is called &amp;quot;Tree and Table font for views&amp;quot; and can be found in Window &amp;gt; Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Colors and Fonts under the &amp;quot;View and Editor Folders&amp;quot; category.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font-preference.png" alt="adjustable view font preference" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Project Explorer is an example of a view that gets affected by this font preference.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font.png" alt="adjustable view font" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="remove-gifs-from-views"&gt;&lt;a class="anchor" href="#remove-gifs-from-views"&gt;&lt;/a&gt;Remove gifs from views&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Several years ago, the icons of the platform views were migrated to .png files. As already opened views store their reference to the image, the .gif files were left in the code. These have been removed now. If you are using the same workspace for multiple years and view icons are missing due to that removal, you have to close and reopen the view.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="default-changed-for-confirm-on-exit-for-last-window"&gt;&lt;a class="anchor" href="#default-changed-for-confirm-on-exit-for-last-window"&gt;&lt;/a&gt;Default changed for confirm on exit for last window&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;By default, Eclipse now closes if you select the close icon on the last window without additional confirmation dialog. If you want to get a confirmation dialog, you can enable that via Window &amp;gt; Preferences &amp;gt; General &amp;gt; Startup and Shutdown &amp;gt; Confirm exit when closing last window.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="workbench-models-created-in-releases-before-2014-are-not-automatically-converted"&gt;&lt;a class="anchor" href="#workbench-models-created-in-releases-before-2014-are-not-automatically-converted"&gt;&lt;/a&gt;Workbench models created in releases before 2014 are not automatically converted&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Workbench models (workbench.xmi) stored in workspaces created with releases before 2014 and never opened with a later release are not automatically converted anymore if opened with the 2020-09 release.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="text-editors"&gt;&lt;a class="anchor" href="#text-editors"&gt;&lt;/a&gt;Text Editors&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="multiple-last-edit-locations"&gt;&lt;a class="anchor" href="#multiple-last-edit-locations"&gt;&lt;/a&gt;Multiple Last Edit Locations&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Previous Edit Location&lt;/strong&gt; navigation (formerly named Last Edit Location) is now expanded to remember multiple edit locations.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The last 15 edit locations are now remembered. For convenience, similar edit locations in close proximity to each other are also merged so that each of the 15 remembered locations remains distinct.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/multiple-last-edit-locations.png" alt="multiple last edit locations" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;How to use&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Two new keyboard shortcuts are introduced:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+LEFT_ARROW&lt;/strong&gt;) navigates to the most recent edit location, just as &lt;strong&gt;Ctrl+Q&lt;/strong&gt; always has in prior releases.&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;However, now continuing to hold &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and then pressing &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; again begins a traversal through the history of prior edit locations, with each additional press of &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; moving a step further back in history. Once traversal stops, future &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; actions are now temporarily anchored to this older historical location for easy exploration of that code region.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The classic &lt;strong&gt;Ctrl+Q&lt;/strong&gt; mapping has been likewise enhanced with this new functionality, so that &lt;strong&gt;Ctrl+Q&lt;/strong&gt; and &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; are synonymous.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ctrl+Alt+RIGHT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+RIGHT_ARROW&lt;/strong&gt;) conversely moves the anchor forward through edit history, so after traversing backward with &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt;, you can go forward again by holding &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and repeatedly pressing &lt;strong&gt;RIGHT_ARROW&lt;/strong&gt;. A new menu item has likewise been added for this forward navigation as well.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New edit locations are always inserted at the end, so original historical ordering is always maintained. New edits also reset the last location &amp;quot;anchor&amp;quot; back to the most recent edit, so that pressing &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; once again brings you to the most recent edit rather than a historical one.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="printing-editor-content-adds-date-in-header"&gt;&lt;a class="anchor" href="#printing-editor-content-adds-date-in-header"&gt;&lt;/a&gt;Printing editor content adds date in header&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Printing editor content now includes the current date in addition to the filename in the header of each printed page.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/print-header-date.png" alt="print header date" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="themes-and-styling"&gt;&lt;a class="anchor" href="#themes-and-styling"&gt;&lt;/a&gt;Themes and Styling&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="improved-gtk-light-theme"&gt;&lt;a class="anchor" href="#improved-gtk-light-theme"&gt;&lt;/a&gt;Improved GTK light theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The GTK light theme has been updated to align better with the default GTK3 Adwaita theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-old.png" alt="gtk light old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-new.png" alt="gtk light new" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="windows-menus-are-styled-in-the-dark-theme"&gt;&lt;a class="anchor" href="#windows-menus-are-styled-in-the-dark-theme"&gt;&lt;/a&gt;Windows menus are styled in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively styles the menu under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/menu-background-old.png" alt="menu background old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/menu-background-dark.png" alt="menu background dark" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme"&gt;&lt;a class="anchor" href="#dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme"&gt;&lt;/a&gt;Dropbox boxes (Combos) are styled under Windows in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively styles drop-down boxes under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-old.png" alt="combo win32 dark old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-new.png" alt="combo win32 dark new" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="selection-highlighter-for-dark-theme"&gt;&lt;a class="anchor" href="#selection-highlighter-for-dark-theme"&gt;&lt;/a&gt;Selection highlighter for dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The active tab selection highlighter has been enabled for Eclipse’s default dark themes. This will help users identify which tab is active at a glance.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/dark-selection-highlighter.png" alt="dark selection highlighter" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="selection-highlighter-for-tables-under-windows-in-the-dark-theme"&gt;&lt;a class="anchor" href="#selection-highlighter-for-tables-under-windows-in-the-dark-theme"&gt;&lt;/a&gt;Selection highlighter for tables under Windows in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively supports selection highlighter in tables under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/selection-highlight.png" alt="selection highlight" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug"&gt;&lt;a class="anchor" href="#debug"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="filter-null-bytes-from-console-output"&gt;&lt;a class="anchor" href="#filter-null-bytes-from-console-output"&gt;&lt;/a&gt;Filter null bytes from console output&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The interpretation of ASCII control characters in the &lt;strong&gt;Console View&lt;/strong&gt; was extended to recognize the characters: &lt;code&gt;\0&lt;/code&gt; - null byte. If interpretation is enabled, any null byte will be stripped and not shown in console view. This is most relevant for the Linux platform where a null byte in console view causes anything after it on the same line to be not rendered.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This feature is disabled by default. You can enable it on the &lt;strong&gt;Run/Debug &amp;gt; Console&lt;/strong&gt; preference page.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="general-updates"&gt;&lt;a class="anchor" href="#general-updates"&gt;&lt;/a&gt;General Updates&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="builds-for-linux-aarch64-aka-arm64-added"&gt;&lt;a class="anchor" href="#builds-for-linux-aarch64-aka-arm64-added"&gt;&lt;/a&gt;Builds for Linux AArch64 (aka Arm64) added&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Binaries for Linux AArch64 (Arm64) are available for testing. With the raising popularity of this architecture people can continue using the Eclipse IDE even when changing their machine.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="java-developement-tools-jdt"&gt;&lt;a class="anchor" href="#java-developement-tools-jdt"&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-15-support"&gt;&lt;a class="anchor" href="#java-15-support"&gt;&lt;/a&gt;Java 15 Support&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="java-15"&gt;&lt;a class="anchor" href="#java-15"&gt;&lt;/a&gt;Java 15&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 15 is out and Eclipse JDT supports Java 15 for 4.17 via Marketplace.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The release notably includes the following Java 15 features:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;JEP 378: Text Blocks (Standard).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 384: Records (Second Preview).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 375: Pattern Matching for Instanceof (Second Preview).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 360: Sealed Classes (Preview).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that preview option should be on for preview language features. For an informal introduction of the support, please refer to &lt;a href="https://wiki.eclipse.org/Java15/Examples"&gt;Java 15 Examples wiki&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="junit"&gt;&lt;a class="anchor" href="#junit"&gt;&lt;/a&gt;JUnit&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="collapse-all-nodes-in-junit-view"&gt;&lt;a class="anchor" href="#collapse-all-nodes-in-junit-view"&gt;&lt;/a&gt;Collapse all nodes in JUnit view&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JUnit view now provides a context-menu option to collapse all nodes:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-collapse-all.png" alt="junit collapse all" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="sort-test-results-by-execution-time"&gt;&lt;a class="anchor" href="#sort-test-results-by-execution-time"&gt;&lt;/a&gt;Sort test results by execution time&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JUnit view now provides the ability to sort results by execution time. By default, results will be sorted by execution order. Choosing &lt;strong&gt;Sort By &amp;gt; Execution Time&lt;/strong&gt; from the &lt;strong&gt;JUnit View&lt;/strong&gt; menu will reorder the results once all tests are complete. While tests are still running, they will be shown in execution order.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-before.png" alt="junit sort time before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Sorting by execution order results in:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-after.png" alt="junit sort time after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-editor"&gt;&lt;a class="anchor" href="#java-editor"&gt;&lt;/a&gt;Java Editor&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="substring-subword-matches-for-types"&gt;&lt;a class="anchor" href="#substring-subword-matches-for-types"&gt;&lt;/a&gt;Substring/Subword matches for types&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Content Assist now fully supports both substring and subword matches for types:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/substring-types.png" alt="substring types" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Substring matches are always shown and subword matches can be enabled/disabled with the existing &lt;strong&gt;Show subword matches&lt;/strong&gt; option on the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Content Assist&lt;/strong&gt; preference page.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="optimization-tab"&gt;&lt;a class="anchor" href="#optimization-tab"&gt;&lt;/a&gt;Optimization tab&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new tab has been added that gathers cleanups that improve the time performance: the existing lazy operator cleanup and the regex precompiler cleanup.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png" alt="regex preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="objects-equals"&gt;&lt;a class="anchor" href="#objects-equals"&gt;&lt;/a&gt;Objects.equals()&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that makes use of &lt;code&gt;Objects.equals()&lt;/code&gt; to implement the &lt;code&gt;equals(Object)&lt;/code&gt; method.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It reduces the code and improves the reading. The cleanup is only available for Java 7 or higher. Although this kind of comparison is almost exclusively seen in the &lt;code&gt;equals(Object)&lt;/code&gt; method, it can also reduce code in other methods.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Use Objects.equals() in the equals method implementation&lt;/strong&gt; on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-preferences.png" alt="objects equals preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-before.png" alt="objects equals before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You get this after the clean up:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-after.png" alt="objects equals after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="precompiles-the-regular-expressions"&gt;&lt;a class="anchor" href="#precompiles-the-regular-expressions"&gt;&lt;/a&gt;Precompiles the regular expressions&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that optimizes the regular expression execution by precompiling it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It replaces some usages of &lt;code&gt;java.lang.String&lt;/code&gt; by usages of &lt;code&gt;java.util.regex.Pattern&lt;/code&gt;. The cleanup is done only if it is sure that the string is used as a regular expression. If there is any doubt, nothing is done. The regular expression must be explicitly used several times to be sure the cleanup is useful.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Precompiles reused regular expressions&lt;/strong&gt; on the &lt;strong&gt;Optimization&lt;/strong&gt; tab.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png" alt="regex preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-before.png" alt="regex before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You get this after the clean up:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-after.png" alt="regex after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="string-format-quickfix"&gt;&lt;a class="anchor" href="#string-format-quickfix"&gt;&lt;/a&gt;String.format quickfix&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quickfix has been added to replace string concatenation with &lt;code&gt;String.format&lt;/code&gt;, similar to the existing ones for &lt;code&gt;StringBuilder&lt;/code&gt; and &lt;code&gt;MessageFormat&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/String.format-quickfix.png" alt="String.format quickfix" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="method-reference-quickfix"&gt;&lt;a class="anchor" href="#method-reference-quickfix"&gt;&lt;/a&gt;Method reference quickfix&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quickfix has been added to create missing methods for method references.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;strong&gt;Current restriction is that this quickfix is only available on current class&lt;/strong&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Expect current implementation to work on simple cases only&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Method references invoking nested generics or type parameters might be problematic to resolve correct&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/methodreference_1.png" alt="methodreference 1" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-views-and-dialog"&gt;&lt;a class="anchor" href="#java-views-and-dialog"&gt;&lt;/a&gt;Java Views and Dialog&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="toggle-code-minings-from-find-actions-menu"&gt;&lt;a class="anchor" href="#toggle-code-minings-from-find-actions-menu"&gt;&lt;/a&gt;Toggle Code Minings From Find Actions Menu&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The code minings within an editor can be enabled/disabled through the Find Actions menu (&lt;strong&gt;Ctrl+3&lt;/strong&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/toggle-code-minings.png" alt="toggle code minings" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-formatter"&gt;&lt;a class="anchor" href="#java-formatter"&gt;&lt;/a&gt;Java Formatter&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="assert-statement-wrapping"&gt;&lt;a class="anchor" href="#assert-statement-wrapping"&gt;&lt;/a&gt;Assert statement wrapping&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new setting in the Formatter profile controls &lt;strong&gt;line wrapping of assert statements&lt;/strong&gt;. A line wrap can be added between the assert condition and its error message. The setting can be found in the &lt;strong&gt;Profile Editor (Preferences &amp;gt; Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​&lt;/strong&gt;) in the &lt;strong&gt;Line Wrapping &amp;gt; Wrapping Settings &amp;gt; Statemtens &amp;gt; &amp;apos;assert&amp;apos; messages&lt;/strong&gt; node.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/formatter-wrap-assert.png" alt="formatter wrap assert" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug-2"&gt;&lt;a class="anchor" href="#debug-2"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="anonymous-class-instance-in-evaluation"&gt;&lt;a class="anchor" href="#anonymous-class-instance-in-evaluation"&gt;&lt;/a&gt;Anonymous class instance in evaluation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; is now capable of inspecting/evaluating expressions with anonymous class instances.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection-code.png" alt="anon instance inspection code" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection.png" alt="anon instance inspection" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="jep-358-helpful-nullpointerexceptions"&gt;&lt;a class="anchor" href="#jep-358-helpful-nullpointerexceptions"&gt;&lt;/a&gt;JEP 358: Helpful NullPointerExceptions&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; has now a checkbox option to activate the command line support for JEP 358. This is disabled below Java 14 and enabled by default for Java programs launched with Java 14 and above.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;-XX:+ShowCodeDetailsInExceptionMessages&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/helpfulNullPointerExceptions.png" alt="helpfulNullPointerExceptions" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JVM is now capable of analyzing which variable was null at the point of NullPointerException and describe the variable with a null-detail message in the NPE.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="actual-type-in-variables-view"&gt;&lt;a class="anchor" href="#actual-type-in-variables-view"&gt;&lt;/a&gt;Actual type in Variables view&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The option &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Expressions&lt;/strong&gt; views now displays the value’s actual type instead of its declared type. This simplifies debugging especially when variable details (&lt;code&gt;toString()&lt;/code&gt;) is shown &lt;strong&gt;As the label for all variables&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To enable &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; view, column mode must be disabled (&lt;strong&gt;View Menu &amp;gt; Layout &amp;gt; Show Columns&lt;/strong&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Object s = &amp;quot;some string&amp;quot;; Collection&amp;lt;?&amp;gt; c = Arrays.asList(s, 1); // breakpoint&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/variables-actual-type.png" alt="variables actual type" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.17.0.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Having JBoss Tools 4.17.0 and Red Hat CodeReady Studio 12.17 out we are already working on the next release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TGJfW3DI-NE" height="1" width="1" alt=""/&gt;</content><summary>JBoss Tools 4.17.0 and Red Hat CodeReady Studio 12.17 for Eclipse 2020-09 are here waiting for you. Check it out! Installation Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this: java -jar codereadystudio-&lt;installername&gt;.jar JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more: This release requires at least Eclipse 4.17 (2020-09) but we recommend using the latest Eclipse 4.17 2020-06 JEE Bundle since then you get most of the dependencies preinstalled. Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2020-10-13T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/12.17.0.ga.html</feedburner:origLink></entry><entry><title>Quarked testing: Writing tests for Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UEfGntMJ1yk/" /><category term="devnation" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="service virtualization" scheme="searchisko:content:tags" /><category term="test containers" scheme="searchisko:content:tags" /><category term="test java application" scheme="searchisko:content:tags" /><author><name>Alex Soto Bueno</name></author><id>searchisko:content:id:jbossorg_blog-quarked_testing_writing_tests_for_quarkus</id><updated>2020-10-12T07:00:10Z</updated><published>2020-10-12T07:00:10Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; applications and services from &lt;a href="https://developers.redhat.com/blog/author/asotobue/"&gt;Alex Soto Bueno&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Testing allows you to deliver your application with the confidence that you&amp;#8217;re building the right things and building the things right. Testing also helps developers refactor their code, add a new feature, or fix a bug knowing that nothing else is breaking.&lt;/p&gt; &lt;p&gt;Quarkus brings to the &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; ecosystem a way to develop cloud-first, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt;-native, &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;-focused, and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-optimized applications. This is where GraalVM meets Quarkus, bringing server-side and enterprise-capable Java to help you build truly cloud-native apps.&lt;/p&gt; &lt;p&gt;But, how do you test Quarkus applications and services? In this talk, we show how you how. We&amp;#8217;ll look at how to test basic components, mocks, stubs, or (secured) RESTful web APIs. Also, we will cover more advanced topics such as persistence tests, service virtualization, and using containers for testing purposes. Come to this session to learn in practice how to write tests for Quarkus.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/qQLSZTDODSQ?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#038;title=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/" data-a2a-title="Quarked testing: Writing tests for Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;Quarked testing: Writing tests for Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UEfGntMJ1yk" height="1" width="1" alt=""/&gt;</content><summary>DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing Quarkus applications and services from Alex Soto Bueno and Burr Sutter. Testing allows you to deliver your application with the confidence that you’re building the right things and...</summary><dc:creator>Alex Soto Bueno</dc:creator><dc:date>2020-10-12T07:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/</feedburner:origLink></entry><entry><title>CodeReady Containers - Getting Started with OpenShift Container Platform 4.5 and Process Automation Tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Vy-9QYoAvFQ/codeready-containers-ocp-45-with-process-automation-tooling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_getting_started_with_openshift_container_platform_4_5_and_process_automation_tooling</id><updated>2020-10-12T05:00:03Z</updated><published>2020-10-12T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/s2048/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1371" data-original-width="2048" height="214" src="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/w320-h214/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As a cloud-native developer you've &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt; development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;This article targets getting you started on your new &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt; by putting the latest process automation developer tooling at your disposal. You'll get started by installing it using the latest available container registry images. After that, if you need more help getting started, try a free online workshop where you can build your first process automation project hands-on.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;Get started today with new &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;developer tooling for process design&lt;/a&gt;, user tasks, forms, rules, and business logic in just a few simple steps.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130"&gt;Process automation developer tooling&lt;/h3&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/s2048/crc-rhpam-architecture.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1152" data-original-width="2048" height="180" src="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/w320-h180/crc-rhpam-architecture.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Let's install the &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;Red Hat Process Automation Manager on an OpenShift Container Platform&lt;/a&gt; using the latest provided container catalog image. It delivers fully functioning developer process automation tooling containerized on your OpenShift Container Platform.&lt;br /&gt;&lt;/div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131"&gt;Install from container catalog&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster.&lt;/div&gt;&lt;ol data-sourcepos="12:1-13:0" dir="auto"&gt;&lt;li data-sourcepos="12:1-13:0"&gt;Ensure you have an OpenShift container based installation, such as one of the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="14:3-17:0" dir="auto"&gt;&lt;li data-sourcepos="14:3-15:0"&gt;&lt;div data-sourcepos="14:5-14:116"&gt;your own OpenShift installation, if using this you just need to pass the IP address to the init.{sh|bat} script.&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="16:3-17:0"&gt;&lt;div data-sourcepos="16:5-16:95"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="18:1-23:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo/-/archive/master/rhcs-rhpam-install-demo-master.zip" target="_blank"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="22:1-23:0"&gt;&lt;div data-sourcepos="22:4-22:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;pre class="code highlight" lang="plaintext"&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address to HOST_IP variable found at the top of the init.{sh|bat} files:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without any arguments and it uses the hostname:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/3054799686837756106#" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-original-height="886" data-original-width="1600" height="177" src="https://1.bp.blogspot.com/-vEsuIwWe5xg/XhLsYPZArnI/AAAAAAAAw1w/9NM0V6bfpYEUVxTBUf6R4kw2wloDArxSQCEwYBhgL/w320-h177/rhcs-rhpam-ocp.png" title="process automation tooling" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;After some installation magic you can watch and read about in the script log output on your console, it's time to login to your process automation tooling.&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;br /&gt;Get started developing containerized process automation projects here (the address will be generated):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;CodeReady Container example: http:rhcs-rhpam-install-demo-appdev-in-cloud.apps-crc.testing/business-central ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Process Automation Manager? Try one of these&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/index-rhpam.html#/1" target="_blank"&gt;online workshops&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/J1iPmKtJjHg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Vy-9QYoAvFQ" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you've installed an OpenShift Container Platform development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-12T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/J1iPmKtJjHg/codeready-containers-ocp-45-with-process-automation-tooling.html</feedburner:origLink></entry></feed>
